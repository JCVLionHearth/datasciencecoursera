Si los valores no se están actualizando correctamente al editar una acción, hay varios puntos en el código que podrían estar causando este problema. Aquí te dejo algunas sugerencias para identificar y solucionar el problema:

1. Verificar editar_accion en routes.py

En la función editar_accion, asegúrate de que el populate_obj y las actualizaciones se estén haciendo correctamente:

@main.route('/accion/<int:id>/editar', methods=['GET', 'POST'])
def editar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
        
    accion = AccionTratamiento.query.get_or_404(id)
    form = AccionTratamientoForm(obj=accion)

    if form.validate_on_submit():
        # Depuración para ver los datos antes de actualizar
        print("Datos del formulario:")
        print("Nombre causa:", form.nombre_causa.data)
        print("Categoría:", form.categoria.data)
        print("Puntos causa:", form.puntos_causa.data)
        print("Puntos consecuencia:", form.puntos_consecuencia.data)

        accion_data = next((accion for accion in cargar_acciones() if accion[0] == form.categoria.data), None)
        
        if accion_data:
            form.populate_obj(accion)  # Llena el objeto 'accion' con los datos del formulario
            accion.at = accion_data[1]
            accion.modificador_id = session['user_id']
            
            db.session.commit()
            flash('Acción de tratamiento actualizada con éxito', 'success')
            return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

    # Procesar el formulario para rellenarlo con los datos actuales de 'accion'
    form.process(obj=accion)
    return render_template('agregar_accion.html', form=form, riesgo=accion.riesgo)

2. Problemas con form.process(obj=accion)

Después de form.process(obj=accion), verifica que los valores en el formulario coincidan con los valores del objeto accion:

print("Valores actuales de accion:")
print("Nombre causa:", accion.nombre_causa)
print("Categoría:", accion.categoria)
print("Puntos causa:", accion.puntos_causa)
print("Puntos consecuencia:", accion.puntos_consecuencia)

Esto te permitirá verificar si los datos del objeto accion están siendo correctamente asignados al formulario.

3. Actualizar el campo categoria

En el formulario, categoria es un SelectField que toma datos de cargar_acciones(). Asegúrate de que el valor que se selecciona al editar existe en las opciones de categoria.

Agrega una impresión para verificar las opciones del campo categoria:

print("Opciones de categoría en el formulario:", form.categoria.choices)

4. Revisar populate_obj

A veces, populate_obj puede no funcionar como se espera si hay conflictos con los datos o si se manipulan manualmente los campos después de procesar el formulario. Si el populate_obj no funciona correctamente, puedes asignar los valores manualmente:

accion.nombre_causa = form.nombre_causa.data
accion.categoria = form.categoria.data
accion.puntos_causa = form.puntos_causa.data
accion.puntos_consecuencia = form.puntos_consecuencia.data
accion.at = accion_data[1]
accion.modificador_id = session['user_id']

5. Actualizar en la base de datos

Después de realizar la actualización y el db.session.commit(), verifica directamente en la base de datos si los cambios se aplicaron:

SELECT * FROM acciones_tratamiento WHERE id = <ID de la acción>;

6. Depuración en la plantilla

En la plantilla agregar_accion.html, asegúrate de que los campos muestran los valores correctos al cargar el formulario:

{{ form.categoria.data }}
{{ form.puntos_causa.data }}
{{ form.puntos_consecuencia.data }}

Resumen de posibles soluciones
	1.	Imprime los valores del formulario y del objeto accion para identificar inconsistencias.
	2.	Verifica que categoria tenga una opción válida seleccionada en el formulario.
	3.	Asigna los valores manualmente en lugar de usar populate_obj si es necesario.
	4.	Confirma los cambios en la base de datos después del commit.

Prueba estas sugerencias y dime si el problema persiste o si identificas alguna pista adicional.

Por lo que describes y al revisar tu código, el problema parece estar relacionado con el valor del puntaje que no se está guardando correctamente en la base de datos y queda en cero. Aquí te doy algunas sugerencias y posibles soluciones para solucionar este problema.

1. Verificar cargar_acciones()

En la función cargar_acciones() de utils.py, asegúrate de que la columna Puntaje_AT en el archivo Excel contiene valores numéricos válidos. Si hay valores nulos o no numéricos en Puntaje_AT, podrían estar generando el problema.

Ejemplo para mejorar el manejo de datos:

def cargar_acciones():
    df = pd.read_excel('uploads/Acciones.xlsx')
    # Verificar si hay valores nulos o incorrectos
    df['Puntaje_AT'] = pd.to_numeric(df['Puntaje_AT'], errors='coerce').fillna(0)
    return [(index, row['AT'], row['Puntaje_AT']) for index, row in df.iterrows()]

Esto se asegura de que todos los puntajes sean numéricos y que los valores inválidos se conviertan en cero por defecto.

2. Comprobar el formulario AccionTratamientoForm

En el AccionTratamientoForm, estás utilizando SelectField con coerce=int para puntos_causa y puntos_consecuencia. Asegúrate de que los valores se están enviando correctamente desde el formulario HTML. Puedes agregar una impresión de depuración para verificar:

if form.validate_on_submit():
    print("Puntos causa:", form.puntos_causa.data)
    print("Puntos consecuencia:", form.puntos_consecuencia.data)

Si los valores no son los esperados, puede ser un problema en la selección en el HTML o en la forma en que se envían los datos.

3. Verificar el populate_obj en editar_accion

En la ruta para editar (editar_accion), estás usando form.populate_obj(accion), lo cual es correcto, pero asegúrate de que el formulario está actualizando los campos correctamente. También puedes agregar una impresión de depuración:

print("Datos después de populate_obj:")
print("Nombre causa:", accion.nombre_causa)
print("Puntos causa:", accion.puntos_causa)
print("Puntos consecuencia:", accion.puntos_consecuencia)

4. Actualización correcta del modelo en la ruta

En la ruta agregar_accion, estás obteniendo la información de accion_data para establecer at, pero asegúrate de que categoria es el puntaje correcto:

if accion_data:
    print("Accion data:", accion_data)
    nueva_accion = AccionTratamiento(
        nombre_causa=form.nombre_causa.data,
        at=accion_data[1],
        categoria=accion_data[2],  # Asegúrate de usar el puntaje correcto aquí
        puntos_causa=form.puntos_causa.data,
        puntos_consecuencia=form.puntos_consecuencia.data,
        riesgo_id=id,
        creador_id=session['user_id']
    )

5. Validar el contenido del archivo Excel

Abre el archivo Acciones.xlsx y asegúrate de que la columna Puntaje_AT tiene valores enteros válidos. También verifica que no haya filas vacías o con errores.

6. Debug en la base de datos

Después de guardar una acción, verifica directamente en la base de datos si los valores se están almacenando correctamente. Por ejemplo, puedes ejecutar una consulta SQL directamente:

SELECT * FROM acciones_tratamiento WHERE id = (último ID insertado);

Resumen de pasos a seguir
	1.	Revisa el contenido de Acciones.xlsx y asegúrate de que Puntaje_AT sea numérico.
	2.	Agrega impresiones de depuración para ver los valores en form.validate_on_submit().
	3.	Asegúrate de que categoria en nueva_accion recibe el puntaje correcto de accion_data[2].
	4.	Comprueba la base de datos directamente después de insertar una acción para ver los valores guardados.

Con estos pasos, deberías poder identificar por qué el puntaje está siendo guardado como cero y solucionarlo.

estoy revisando la base de datos que se crea en mi aplicación, para esto estoy usando un formulario y uno de los campos deben ser el de categoría, este se visualiza en el formulario, pero el dato que se utiliza es el del puntaje para poder hacer cálculos, este ultimo no se visualiza, he notado que no esta guardando adecuadamente el puntaje, pues lo pone en cero en la base de datos, estos son segmentos de mis códigos:

en utils.py

def cargar_acciones():
    df = pd.read_excel('uploads/Acciones.xlsx')
    return [(index, row['AT'], row['Puntaje_AT']) for index, row in df.iterrows()]

def calcular_reduccion_por_acciones(acciones):
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    puntaje_residual_causa=0
    puntaje_residual_consecuencia=0
    for accion in acciones:
        puntos_causa = (accion.puntos_causa + accion.categoria) / 2
        puntos_consecuencia = (accion.puntos_consecuencia + accion.categoria) / 2
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(acciones), puntos_consecuencia_total / len(acciones))

en models.py

class AccionTratamiento(db.Model):
    __tablename__ = 'acciones_tratamiento'
    id = db.Column(db.Integer, primary_key=True)
    nombre_causa=db.Column(db.String(100), nullable=False)
    at = db.Column(db.String(100), nullable=False)
    categoria = db.Column(db.Integer, nullable=False)
    puntos_causa = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    puntos_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    creador_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    modificador_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    fecha_creacion = db.Column(db.DateTime, default=db.func.current_timestamp())
    fecha_modificacion = db.Column(db.DateTime, onupdate=db.func.current_timestamp())
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

en forms.py

class AccionTratamientoForm(FlaskForm):
    nombre_causa = SelectField('Nombre de la Causa', choices=[])
    categoria = SelectField('Categoría de la Acción', choices=[], coerce=int)
    puntos_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    puntos_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')

    def __init__(self, *args, **kwargs):
        super(AccionTratamientoForm, self).__init__(*args, **kwargs)
        self.categoria.choices = [(accion[0], accion[1]) for accion in cargar_acciones()]
        self.nombre_causa.choices = [(causa, causa) for causa in cargar_causas()]

en routes.py

# Ruta para agregar una acción
@main.route('/riesgo/<int:id>/agregar_accion', methods=['GET', 'POST'])
def agregar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
    riesgo = Risk.query.get_or_404(id)    
    if not archivos_cargados():
        flash('No hay archivos cargados. Por favor, cargue los archivos necesarios antes de continuar.', 'error')
        return redirect(url_for('main.parametros'))
   
    form = AccionTratamientoForm()

    if form.validate_on_submit():
        accion_data = next((accion for accion in cargar_acciones() if accion[0] == form.categoria.data), None)
        if accion_data:
            nueva_accion = AccionTratamiento(
                nombre_causa=form.nombre_causa.data,
                at=accion_data[1],
                categoria=form.categoria.data,
                puntos_causa=form.puntos_causa.data,
                puntos_consecuencia=form.puntos_consecuencia.data,
                riesgo_id=id,
                creador_id=session['user_id']  # Agregar el ID del usuario autenticado que agrega la acción
            )
            db.session.add(nueva_accion)
            db.session.commit()
            flash('Acción de tratamiento añadida con éxito', 'success')
            return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_accion.html', form=form, riesgo=riesgo)

## Rutas para editar y eliminar

@main.route('/accion/<int:id>/editar', methods=['GET', 'POST'])
def editar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
        
    accion = AccionTratamiento.query.get_or_404(id)
    form = AccionTratamientoForm(obj=accion)

    if form.validate_on_submit():
        accion_data = next((accion for accion in cargar_acciones() if accion[0] == form.categoria.data), None)
        if accion_data:
            form.populate_obj(accion)
            accion.at = accion_data[1]
            accion.modificador_id = session['user_id']  # Agregar el ID del usuario autenticado que modifica la accion
            db.session.commit()
            flash('Acción de tratamiento actualizada con éxito', 'success')
            return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

    form.process(obj=accion)
    return render_template('agregar_accion.html', form=form, riesgo=accion.riesgo)

@main.route('/accion/<int:id>/eliminar', methods=['GET', 'POST'])
def eliminar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
        
    accion = AccionTratamiento.query.get_or_404(id)
    db.session.delete(accion)
    db.session.commit()
    flash('Acción de tratamiento eliminada con éxito', 'success')
    return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

y agregar_accion.html

{% extends "base.html" %}

{% block title %}Añadir Acción de Tratamiento{% endblock %}

{% block content %}
    <div class="card mb-4">
        <div class="card-header card-header-custom">
            <h5 class="text-center card-subtitle">Añadir Acción de Tratamiento: <br>{{ riesgo.nombre }}</h5>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header card-header-custom">
            <h6 class="card-subtitle">Acción de Tratamiento</h6>
        </div>
        <div class="card-body p-2">
            <form method="POST">
                {{ form.hidden_tag() }}
                
                <div class="row mb-3">
                    <label for="nombre_causa" class="col-sm-2 col-form-label">{{ form.nombre_causa.label }}</label>
                    <div class="col-sm-10">
                        {{ form.nombre_causa(class="form-control") }}
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="categoria" class="col-sm-2 col-form-label">{{ form.categoria.label }}</label>
                    <div class="col-sm-10">
                        {{ form.categoria(class="form-control", rows="2") }}
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="puntos_causa" class="col-sm-2 col-form-label">{{ form.puntos_causa.label }}</label>
                    <div class="col-sm-10">
                        {{ form.puntos_causa(class="form-control") }}
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="puntos_consecuencia" class="col-sm-2 col-form-label">{{ form.puntos_consecuencia.label }}</label>
                    <div class="col-sm-10">
                        {{ form.puntos_consecuencia(class="form-control") }}
                    </div>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar AT</button>
                    <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}" class="btn btn-secondary">Regresar</a>
                </div>
            </form>
        </div>
    </div>
{% endblock %}

