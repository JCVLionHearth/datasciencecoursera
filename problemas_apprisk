estoy revisando la base de datos que se crea en mi aplicación, para esto estoy usando un formulario y uno de los campos deben ser el de categoría, este se visualiza en el formulario, pero el dato que se utiliza es el del puntaje para poder hacer cálculos, este ultimo no se visualiza, he notado que no esta guardando adecuadamente el puntaje, pues lo pone en cero en la base de datos, estos son segmentos de mis códigos:

en utils.py

def cargar_acciones():
    df = pd.read_excel('uploads/Acciones.xlsx')
    return [(index, row['AT'], row['Puntaje_AT']) for index, row in df.iterrows()]

def calcular_reduccion_por_acciones(acciones):
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    puntaje_residual_causa=0
    puntaje_residual_consecuencia=0
    for accion in acciones:
        puntos_causa = (accion.puntos_causa + accion.categoria) / 2
        puntos_consecuencia = (accion.puntos_consecuencia + accion.categoria) / 2
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(acciones), puntos_consecuencia_total / len(acciones))

en models.py

class AccionTratamiento(db.Model):
    __tablename__ = 'acciones_tratamiento'
    id = db.Column(db.Integer, primary_key=True)
    nombre_causa=db.Column(db.String(100), nullable=False)
    at = db.Column(db.String(100), nullable=False)
    categoria = db.Column(db.Integer, nullable=False)
    puntos_causa = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    puntos_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    creador_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    modificador_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    fecha_creacion = db.Column(db.DateTime, default=db.func.current_timestamp())
    fecha_modificacion = db.Column(db.DateTime, onupdate=db.func.current_timestamp())
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

en forms.py

class AccionTratamientoForm(FlaskForm):
    nombre_causa = SelectField('Nombre de la Causa', choices=[])
    categoria = SelectField('Categoría de la Acción', choices=[], coerce=int)
    puntos_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    puntos_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')

    def __init__(self, *args, **kwargs):
        super(AccionTratamientoForm, self).__init__(*args, **kwargs)
        self.categoria.choices = [(accion[0], accion[1]) for accion in cargar_acciones()]
        self.nombre_causa.choices = [(causa, causa) for causa in cargar_causas()]

en routes.py

# Ruta para agregar una acción
@main.route('/riesgo/<int:id>/agregar_accion', methods=['GET', 'POST'])
def agregar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
    riesgo = Risk.query.get_or_404(id)    
    if not archivos_cargados():
        flash('No hay archivos cargados. Por favor, cargue los archivos necesarios antes de continuar.', 'error')
        return redirect(url_for('main.parametros'))
   
    form = AccionTratamientoForm()

    if form.validate_on_submit():
        accion_data = next((accion for accion in cargar_acciones() if accion[0] == form.categoria.data), None)
        if accion_data:
            nueva_accion = AccionTratamiento(
                nombre_causa=form.nombre_causa.data,
                at=accion_data[1],
                categoria=form.categoria.data,
                puntos_causa=form.puntos_causa.data,
                puntos_consecuencia=form.puntos_consecuencia.data,
                riesgo_id=id,
                creador_id=session['user_id']  # Agregar el ID del usuario autenticado que agrega la acción
            )
            db.session.add(nueva_accion)
            db.session.commit()
            flash('Acción de tratamiento añadida con éxito', 'success')
            return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_accion.html', form=form, riesgo=riesgo)

## Rutas para editar y eliminar

@main.route('/accion/<int:id>/editar', methods=['GET', 'POST'])
def editar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
        
    accion = AccionTratamiento.query.get_or_404(id)
    form = AccionTratamientoForm(obj=accion)

    if form.validate_on_submit():
        accion_data = next((accion for accion in cargar_acciones() if accion[0] == form.categoria.data), None)
        if accion_data:
            form.populate_obj(accion)
            accion.at = accion_data[1]
            accion.modificador_id = session['user_id']  # Agregar el ID del usuario autenticado que modifica la accion
            db.session.commit()
            flash('Acción de tratamiento actualizada con éxito', 'success')
            return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

    form.process(obj=accion)
    return render_template('agregar_accion.html', form=form, riesgo=accion.riesgo)

@main.route('/accion/<int:id>/eliminar', methods=['GET', 'POST'])
def eliminar_accion(id):
    if 'user_id' not in session:
        return redirect(url_for('main.login'))
        
    accion = AccionTratamiento.query.get_or_404(id)
    db.session.delete(accion)
    db.session.commit()
    flash('Acción de tratamiento eliminada con éxito', 'success')
    return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

y agregar_accion.html

{% extends "base.html" %}

{% block title %}Añadir Acción de Tratamiento{% endblock %}

{% block content %}
    <div class="card mb-4">
        <div class="card-header card-header-custom">
            <h5 class="text-center card-subtitle">Añadir Acción de Tratamiento: <br>{{ riesgo.nombre }}</h5>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header card-header-custom">
            <h6 class="card-subtitle">Acción de Tratamiento</h6>
        </div>
        <div class="card-body p-2">
            <form method="POST">
                {{ form.hidden_tag() }}
                
                <div class="row mb-3">
                    <label for="nombre_causa" class="col-sm-2 col-form-label">{{ form.nombre_causa.label }}</label>
                    <div class="col-sm-10">
                        {{ form.nombre_causa(class="form-control") }}
                    </div>
                </div>

                <div class="row mb-3">
                    <label for="categoria" class="col-sm-2 col-form-label">{{ form.categoria.label }}</label>
                    <div class="col-sm-10">
                        {{ form.categoria(class="form-control", rows="2") }}
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="puntos_causa" class="col-sm-2 col-form-label">{{ form.puntos_causa.label }}</label>
                    <div class="col-sm-10">
                        {{ form.puntos_causa(class="form-control") }}
                    </div>
                </div>
                <div class="row mb-3">
                    <label for="puntos_consecuencia" class="col-sm-2 col-form-label">{{ form.puntos_consecuencia.label }}</label>
                    <div class="col-sm-10">
                        {{ form.puntos_consecuencia(class="form-control") }}
                    </div>
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-success"><i class="fas fa-save"></i> Guardar AT</button>
                    <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}" class="btn btn-secondary">Regresar</a>
                </div>
            </form>
        </div>
    </div>
{% endblock %}

