me sale este error al intentar desplegar en render.com

 File "<frozen os>", line 225, in makedirs
OSError: [Errno 30] Read-only file system: '/var/data'
==> Exited with status 1
==> Common ways to troubleshoot your deploy: https://docs.render.com/troubleshooting-deploys
==> Requesting node version >=6
==> Using Node version 22.7.0 via ./.venv/lib/python3.11/site-packages/fontawesomefree/static/fontawesomefree/js-packages/@fortawesome/fontawesome-free/package.json
==> Docs on specifying a Node version: https://render.com/docs/node-version
==> Using Bun version 1.1.0 (default)
==> Docs on specifying a bun version: https://render.com/docs/bun-version
==> Running 'gunicorn app:app'
Traceback (most recent call last):
  File "/opt/render/project/src/.venv/bin/gunicorn", line 8, in <module>
    sys.exit(run())
             ^^^^^
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/wsgiapp.py", line 67, in run
    WSGIApplication("%(prog)s [OPTIONS] [APP_MODULE]", prog=prog).run()
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/base.py", line 236, in run
    super().run()
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/base.py", line 72, in run
    Arbiter(self).run()
    ^^^^^^^^^^^^^
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/arbiter.py", line 58, in __init__
    self.setup(app)
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/arbiter.py", line 118, in setup
    self.app.wsgi()
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/base.py", line 67, in wsgi
    self.callable = self.load()
                    ^^^^^^^^^^^
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/wsgiapp.py", line 58, in load
    return self.load_wsgiapp()
           ^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/app/wsgiapp.py", line 48, in load_wsgiapp
    return util.import_app(self.app_uri)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/.venv/lib/python3.11/site-packages/gunicorn/util.py", line 371, in import_app
    mod = importlib.import_module(module)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1204, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1176, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1147, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 690, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 940, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/opt/render/project/src/app.py", line 19, in <module>
    os.makedirs(db_dir,exist_ok=True)
  File "<frozen os>", line 225, in makedirs
OSError: [Errno 30] Read-only file system: '/var/data'

import matplotlib
matplotlib.use('Agg')
import pandas as pd
from flask import Flask, render_template, request, redirect, url_for, jsonify, session, make_response
import matplotlib.pyplot as plt
from pywaffle import Waffle
import io
import os
import base64
import csv
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Ruta del disco persistente
db_dir = '/var/data'
os.makedirs(db_dir, exist_ok=True)
db_path = os.path.join(db_dir, 'apartamentos.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{db_path}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Apartamento(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(20), unique=True, nullable=False)
    coeficiente = db.Column(db.Float, nullable=False)
    user = db.Column(db.String(50), nullable=False)
    date_registered = db.Column(db.DateTime, default=datetime.utcnow)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(50), nullable=False)

# Crear base de datos
with app.app_context():
    db.create_all()

# Cargar datos desde Excel
df_apartamentos = pd.read_excel('apartamentos.xlsx', engine='openpyxl')
df_apartamentos['Codigo'] = df_apartamentos['Codigo'].astype(str)
apartamentos_permitidos = df_apartamentos.set_index('Codigo')['Coeficiente'].to_dict()

@app.route('/')
def index():
    if 'username' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    if username in usuarios and usuarios[username] == password:
        session['username'] = username
        return redirect(url_for('dashboard'))
    return 'Credenciales incorrectas', 403

@app.route('/logout')
def logout():
    session.pop('username', None)
    return redirect(url_for('index'))

@app.route('/dashboard')
def dashboard():
    if 'username' in session:
        return render_template('dashboard.html')
    return redirect(url_for('index'))

@app.route('/registrar', methods=['POST'])
def registrar_apartamento():
    if 'username' not in session:
        return jsonify({'status': 'error', 'message': 'No autenticado.'})
    
    codigo = request.form['codigo'].strip()
    usuario = session['username']
    
    if codigo in apartamentos_permitidos:
        existing_apartamento = Apartamento.query.filter_by(codigo=codigo).first()
        coeficiente = apartamentos_permitidos[codigo]
        if not existing_apartamento:
            new_apartamento = Apartamento(codigo=codigo, coeficiente=coeficiente, user=usuario)
            db.session.add(new_apartamento)
            db.session.commit()
            return jsonify({'status': 'success', 'message': f'Apartamento <b>{codigo}</b> registrado correctamente con un coeficiente de: <b>{coeficiente}</b>'})
        else:
            return jsonify({'status': 'error', 'message': f'Apartamento {codigo} ya <b>ha sido registrado anteriormente</b>.'})
    else:
        return jsonify({'status': 'error', 'message': f'Apartamento {codigo} <b>NO válido</b>.'})

@app.route('/apartamentos')
def mostrar_apartamentos():
    if 'username' not in session:
        return redirect(url_for('index'))
    
    registrados = Apartamento.query.all()
    registrados_list = [{'codigo': a.codigo, 'coeficiente': a.coeficiente, 'user': a.user, 'date_registered': a.date_registered} for a in registrados]
    no_registrados = set(apartamentos_permitidos.keys()) - {a['codigo'] for a in registrados_list}
    
    total_coeficiente = sum([a['coeficiente'] for a in registrados_list])
    
    return render_template('apartamentos.html', registrados=registrados_list, no_registrados=list(no_registrados), total_coeficiente=total_coeficiente)

@app.route('/admin')
def admin():
    if 'username' not in session:
        return redirect(url_for('index'))
    
    # Estadísticas o lógica de administración adicional
    
    return render_template('admin.html')

if __name__ == '__main__':
    app.run(debug=True)
