Aquí tienes un pequeño “pipeline” en R para pasar de tu tabla navex ―que contiene las columnas
numero_identificacion y resultado_verificacion― a un resumen por persona con:
	•	una columna-dummy (en realidad, de conteo) por cada categoría de resultado_verificacion;
	•	el total de apariciones;
	•	un indicador de riesgo ético de 1 a 3, siguiendo las reglas que describiste.

Suposición de trabajo
“Muchas veces” se interpreta como tres o más registros “no corroborado”.
Si te conviene otro umbral, cambia el parámetro threshold.

# ── Paquetes ──────────────────────────────────────────────────────────────
library(dplyr)
library(tidyr)
library(janitor)   # para limpiar nombres de variables

# ── Función reutilizable ──────────────────────────────────────────────────
calcular_riesgo_etico <- function(df,
                                  id_col      = "numero_identificacion",
                                  cat_col     = "resultado_verificacion",
                                  threshold   = 3) {

  df %>%
    ## 1. Asegura nombres "seguros" para R (sin acentos ni espacios)
    clean_names() %>%                               # ej.: 'número identificación' → 'numero_identificacion'
    
    ## 2. Cuenta apariciones por identificación y categoría
    count(.data[[id_col]], .data[[cat_col]], name = "freq") %>%
    
    ## 3. Convierte cada categoría en columna-dummy con su frecuencia
    pivot_wider(names_from  = all_of(cat_col),
                values_from = freq,
                values_fill = 0) %>%
    
    ## 4. Limpia otra vez por si los nombres de categoría tenían espacios
    clean_names() %>%                               # ej.: 'no corroborado' → 'no_corroborado'
    
    ## 5. Calcula total de registros por persona
    mutate(total_casos = rowSums(across(-all_of(id_col)))) %>%
    
    ## 6. Clasifica el riesgo ético (1 = bajo, 3 = alto)
    mutate(riesgo_etico = case_when(
      corroborado      > 0                 ~ 3,                    # cualquier “corroborado”
      no_corroborado   >= threshold        ~ 2,                    # muchos “no corroborado”
      TRUE                                   ~ 1                   # resto
    ))
}

# ── Ejecución sobre tu data frame navex ───────────────────────────────────
navex_indicador <- calcular_riesgo_etico(navex, threshold = 3)

# navex_indicador ahora contiene, por ejemplo:
# numero_identificacion  corroborado  no_corroborado  otros  total_casos  riesgo_etico
# 1                      1            2               0      3            3
# 2                      0            4               0      4            2
# 3                      0            0               1      1            1

Cómo adaptar el código

Necesitas…	Cambia…
Usar otro nombre de columna	id_col o cat_col
Ajustar la definición de “muchas veces”	threshold
Añadir más categorías	El pivot_wider() las crea automáticamente; solo asegúrate de revisar la lógica de riesgo_etico si incorporas otras reglas.

Con este resumen puedes enlazar fácilmente tu indicador de riesgo ético a cualquier otra tabla con la clave numero_identificacion. ¡Listo para el siguiente paso de tu análisis!


Gracias por la aclaración. A continuación, te presento el código actualizado para realizar el análisis de anomalías considerando tanto el `trader_id` como el `tipo_operación`.

```r
# Instalar y cargar las librerías necesarias
if (!require("readxl")) install.packages("readxl")
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
if (!require("factoextra")) install.packages("factoextra")
if (!require("dbscan")) install.packages("dbscan")
if (!require("isotree")) install.packages("isotree")

library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(factoextra)
library(dbscan)
library(isotree)

# 1. Carga de archivo Excel
file_path <- "ruta/al/archivo/traders_data.xlsx"
trades <- read_excel(file_path)

# 2. Transformación de variables
# Convertir las fechas a formato Date
trades <- trades %>%
  mutate(fecha_contrato = as.Date(fecha_contrato),
         vigencia_desde = as.Date(vigencia_desde),
         vigencia_hasta = as.Date(vigencia_hasta))

# 3. Análisis de Anomalías por Trader y Tipo de Operación - Métodos Básicos
# 3.1 Usando IQR (Interquartile Range) para identificar outliers por trader y tipo de operación
trades <- trades %>%
  group_by(trader_id, tipo_operacion) %>%
  mutate(Q1 = quantile(diferencial, 0.25),
         Q3 = quantile(diferencial, 0.75),
         IQR = Q3 - Q1,
         lower_bound = Q1 - 1.5 * IQR,
         upper_bound = Q3 + 1.5 * IQR,
         anomalia_iqr = diferencial < lower_bound | diferencial > upper_bound) %>%
  ungroup()

# 3.2 Visualización de anomalías por trader y tipo de operación usando Boxplot
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_iqr)) +
  geom_boxplot() +
  facet_wrap(~tipo_operacion) +
  geom_jitter(width = 0.2) +
  labs(title = "Boxplot de Diferenciales por Trader y Tipo de Operación",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 4. Análisis de Anomalías por Trader y Tipo de Operación - Métodos Avanzados
# 4.1 Usando Isolation Forest para detectar anomalías
iso_forest <- isolation.forest(as.matrix(trades$diferencial), ntrees = 100)
trades$anomalia_iso <- predict(iso_forest, as.matrix(trades$diferencial)) > 0.5

# Visualización de anomalías detectadas por Isolation Forest
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_iso)) +
  geom_point() +
  facet_wrap(~tipo_operacion) +
  labs(title = "Análisis de Anomalías usando Isolation Forest por Trader y Tipo de Operación",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 4.2 Usando Local Outlier Factor (LOF) para detectar anomalías
lof_scores <- lof(as.matrix(trades$diferencial), minPts = 6)
trades$anomalia_lof <- lof_scores > quantile(lof_scores, 0.95)

# Visualización de anomalías detectadas por LOF
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_lof)) +
  geom_point() +
  facet_wrap(~tipo_operacion) +
  labs(title = "Análisis de Anomalías usando Local Outlier Factor por Trader y Tipo de Operación",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 5. Análisis Adicional: Clustering con k-means
# Selección del número óptimo de clusters por trader y tipo de operación
set.seed(123)
optimal_clusters <- kmeans(trades$diferencial, centers = 3)
trades$cluster <- as.factor(optimal_clusters$cluster)

# Visualización de clusters por trader y tipo de operación
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = cluster)) +
  geom_point() +
  facet_wrap(~tipo_operacion) +
  labs(title = "Clustering de Diferenciales usando k-means por Trader y Tipo de Operación",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 6. Resultados Finales
# Unir todas las anomalías detectadas en una columna
trades <- trades %>%
  mutate(anomalia_final = anomalia_iqr | anomalia_iso | anomalia_lof)

# Visualización final de todas las anomalías detectadas
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_final)) +
  geom_point() +
  facet_wrap(~tipo_operacion) +
  labs(title = "Análisis Combinado de Anomalías en Diferenciales por Trader y Tipo de Operación",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### Explicación:

1. **Carga de archivo Excel**: Se carga el archivo Excel y se convierten las fechas a formato `Date`.

2. **Análisis de Anomalías por Trader y Tipo de Operación - Métodos Básicos**: 
   - Se agrupan los datos por `trader_id` y `tipo_operacion` para calcular el rango intercuartílico (IQR) y determinar outliers dentro de cada combinación de trader y tipo de operación.
   - Se visualizan los resultados usando un boxplot por `trader_id` y `tipo_operacion`.

3. **Análisis de Anomalías por Trader y Tipo de Operación - Métodos Avanzados**:
   - Se utiliza `Isolation Forest` para detectar anomalías y se visualizan los resultados por `trader_id` y `tipo_operacion`.
   - Se usa `Local Outlier Factor (LOF)` para identificar anomalías y se visualizan los resultados.

4. **Análisis Adicional: Clustering con k-means**: 
   - Se realiza un clustering de los diferenciales por trader y tipo de operación usando k-means, y se visualizan los resultados para identificar patrones.

5. **Resultados Finales**: 
   - Se combinan los resultados de todas las técnicas de detección de anomalías y se visualizan las anomalías detectadas en un gráfico final, considerando las dos variables `trader_id` y `tipo_operacion`.

Este código te permitirá analizar y detectar anomalías en los diferenciales de precios, teniendo en cuenta tanto el `trader_id` como el `tipo_operacion`.

Gracias por la aclaración. Aquí te dejo un código actualizado que utiliza la variable "diferencial" ya existente y realiza el análisis por trader para identificar anomalías en sus operaciones.

```r
# Instalar y cargar las librerías necesarias
if (!require("readxl")) install.packages("readxl")
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
if (!require("factoextra")) install.packages("factoextra")
if (!require("dbscan")) install.packages("dbscan")
if (!require("isotree")) install.packages("isotree")

library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(factoextra)
library(dbscan)
library(isotree)

# 1. Carga de archivo Excel
file_path <- "ruta/al/archivo/traders_data.xlsx"
trades <- read_excel(file_path)

# 2. Transformación de variables
# Convertir las fechas a formato Date
trades <- trades %>%
  mutate(fecha_contrato = as.Date(fecha_contrato),
         vigencia_desde = as.Date(vigencia_desde),
         vigencia_hasta = as.Date(vigencia_hasta))

# 3. Análisis de Anomalías por Trader - Métodos Básicos
# 3.1 Usando IQR (Interquartile Range) para identificar outliers por trader
trades <- trades %>%
  group_by(trader_id) %>%
  mutate(Q1 = quantile(diferencial, 0.25),
         Q3 = quantile(diferencial, 0.75),
         IQR = Q3 - Q1,
         lower_bound = Q1 - 1.5 * IQR,
         upper_bound = Q3 + 1.5 * IQR,
         anomalia_iqr = diferencial < lower_bound | diferencial > upper_bound) %>%
  ungroup()

# 3.2 Visualización de anomalías por trader usando Boxplot
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_iqr)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  labs(title = "Boxplot de Diferenciales por Trader",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 4. Análisis de Anomalías por Trader - Métodos Avanzados
# 4.1 Usando Isolation Forest para detectar anomalías
iso_forest <- isolation.forest(as.matrix(trades$diferencial), ntrees = 100)
trades$anomalia_iso <- predict(iso_forest, as.matrix(trades$diferencial)) > 0.5

# Visualización de anomalías detectadas por Isolation Forest
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_iso)) +
  geom_point() +
  labs(title = "Análisis de Anomalías usando Isolation Forest por Trader",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 4.2 Usando Local Outlier Factor (LOF) para detectar anomalías
lof_scores <- lof(as.matrix(trades$diferencial), minPts = 6)
trades$anomalia_lof <- lof_scores > quantile(lof_scores, 0.95)

# Visualización de anomalías detectadas por LOF
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_lof)) +
  geom_point() +
  labs(title = "Análisis de Anomalías usando Local Outlier Factor por Trader",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 5. Análisis Adicional: Clustering con k-means
# Selección del número óptimo de clusters por trader
set.seed(123)
optimal_clusters <- kmeans(trades$diferencial, centers = 3)
trades$cluster <- as.factor(optimal_clusters$cluster)

# Visualización de clusters por trader
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = cluster)) +
  geom_point() +
  labs(title = "Clustering de Diferenciales usando k-means por Trader",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# 6. Resultados Finales
# Unir todas las anomalías detectadas en una columna
trades <- trades %>%
  mutate(anomalia_final = anomalia_iqr | anomalia_iso | anomalia_lof)

# Visualización final de todas las anomalías detectadas
ggplot(trades, aes(x = as.factor(trader_id), y = diferencial, color = anomalia_final)) +
  geom_point() +
  labs(title = "Análisis Combinado de Anomalías en Diferenciales por Trader",
       x = "Trader ID",
       y = "Diferencial (Compra - Venta)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### Explicación:

1. **Carga de archivo Excel**: Se carga el archivo Excel y se convierten las fechas a formato `Date`.

2. **Análisis de Anomalías por Trader - Métodos Básicos**: 
   - Se agrupan los datos por `trader_id` para calcular el rango intercuartílico (IQR) y determinar outliers dentro de cada trader.
   - Se visualizan los resultados usando un boxplot por `trader_id`.

3. **Análisis de Anomalías por Trader - Métodos Avanzados**:
   - Se utiliza `Isolation Forest` para detectar anomalías y se visualizan los resultados por `trader_id`.
   - Se usa `Local Outlier Factor (LOF)` para identificar anomalías y se visualizan los resultados.

4. **Análisis Adicional: Clustering con k-means**: 
   - Se realiza un clustering de los diferenciales por trader usando k-means, y se visualizan los resultados para identificar patrones.

5. **Resultados Finales**: 
   - Se combinan los resultados de todas las técnicas de detección de anomalías y se visualizan las anomalías detectadas en un gráfico final.

Este código te permitirá identificar operaciones anómalas por trader y realizar un análisis profundo para detectar patrones inusuales.

errores
Error in process.data(data, sample_weights, column_weights, recode_categ,  : 
  Invalid input data. Supported types are: data.frame, matrix, dgCMatrix, matrix.csc
In addition: Warning message:
In isolation.forest(trades$diferencial_analisis, ntrees = 100) :
  'sample_size' is larger than the number of rows in 'data', will be decreased.

Error in lof(trades$diferencial_analisis, k = 5) : 
  x needs to be a matrix or a dist object!
In addition: Warning message:
In lof(trades$diferencial_analisis, k = 5) :
  lof: k is now deprecated. use minPts = 6 instead .

codigo
Aquí te dejo un código completo en R que incluye la carga del archivo Excel, el cálculo de diferenciales, la detección de anomalías utilizando varios métodos, la visualización de resultados, y un análisis adicional con k-means clustering. Cada sección está comentada para que puedas entender el proceso paso a paso.

```r
# Instalar y cargar las librerías necesarias
if (!require("readxl")) install.packages("readxl")
if (!require("dplyr")) install.packages("dplyr")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyr")) install.packages("tidyr")
if (!require("factoextra")) install.packages("factoextra")
if (!require("dbscan")) install.packages("dbscan")

library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(factoextra)
library(dbscan)

# 1. Carga de archivo Excel
# Asumiendo que tienes un archivo llamado "traders_data.xlsx" con tus datos
file_path <- "ruta/al/archivo/traders_data.xlsx"
trades <- read_excel(file_path)

# 2. Transformación de variables
# Convertir las fechas a formato Date
trades <- trades %>%
  mutate(fecha_contrato = as.Date(fecha_contrato),
         vigencia_desde = as.Date(vigencia_desde),
         vigencia_hasta = as.Date(vigencia_hasta))

# 3. Cálculo del diferencial de precio
# Crear una columna con el diferencial dependiendo de si es una venta o compra
trades <- trades %>%
  mutate(diferencial = ifelse(tipo_operacion == "venta", precio_barril, -precio_barril))

# 4. Análisis de Anomalías - Métodos Básicos
# 4.1 Usando IQR (Interquartile Range) para identificar outliers
Q1 <- quantile(trades$diferencial, 0.25)
Q3 <- quantile(trades$diferencial, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

trades <- trades %>%
  mutate(anomalia_iqr = ifelse(diferencial < lower_bound | diferencial > upper_bound, TRUE, FALSE))

# 4.2 Usando Boxplot para visualizar los outliers
ggplot(trades, aes(x = tipo_operacion, y = diferencial, color = anomalia_iqr)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  labs(title = "Boxplot de Diferenciales por Tipo de Operación",
       x = "Tipo de Operación",
       y = "Diferencial (Compra - Venta)")

# 4.3 Visualización de la tendencia de los diferenciales a lo largo del tiempo
ggplot(trades, aes(x = fecha_contrato, y = diferencial, color = anomalia_iqr)) +
  geom_line() +
  geom_point() +
  labs(title = "Tendencia de Diferenciales a lo largo del tiempo",
       x = "Fecha del Contrato",
       y = "Diferencial (Compra - Venta)")

# 5. Análisis de Anomalías - Métodos Avanzados
# 5.1 Usando Isolation Forest
if (!require("isotree")) install.packages("isotree")
library(isotree)

# Isolation Forest para detectar anomalías
iso_forest <- isolation.forest(trades$diferencial, ntrees = 100)
trades$anomalia_iso <- predict(iso_forest, trades$diferencial) > 0.5

# Visualización de anomalías detectadas por Isolation Forest
ggplot(trades, aes(x = fecha_contrato, y = diferencial, color = anomalia_iso)) +
  geom_point() +
  labs(title = "Análisis de Anomalías usando Isolation Forest",
       x = "Fecha del Contrato",
       y = "Diferencial (Compra - Venta)")

# 5.2 Usando Local Outlier Factor (LOF)
lof_scores <- lof(trades$diferencial, k = 5)
trades$anomalia_lof <- lof_scores > quantile(lof_scores, 0.95)

# Visualización de anomalías detectadas por LOF
ggplot(trades, aes(x = fecha_contrato, y = diferencial, color = anomalia_lof)) +
  geom_point() +
  labs(title = "Análisis de Anomalías usando Local Outlier Factor",
       x = "Fecha del Contrato",
       y = "Diferencial (Compra - Venta)")

# 6. Análisis Adicional: Clustering con k-means
# Selección del número óptimo de clusters
set.seed(123)
fviz_nbclust(trades %>% select(diferencial), kmeans, method = "wss")

# Aplicación de k-means con el número óptimo de clusters
kmeans_result <- kmeans(trades %>% select(diferencial), centers = 3)
trades$cluster <- as.factor(kmeans_result$cluster)

# Visualización de clusters
ggplot(trades, aes(x = fecha_contrato, y = diferencial, color = cluster)) +
  geom_point() +
  labs(title = "Clustering de Diferenciales usando k-means",
       x = "Fecha del Contrato",
       y = "Diferencial (Compra - Venta)")

# 7. Resultados Finales
# Unir todas las anomalías detectadas en una columna
trades <- trades %>%
  mutate(anomalia_final = anomalia_iqr | anomalia_iso | anomalia_lof)

# Visualización final de todas las anomalías detectadas
ggplot(trades, aes(x = fecha_contrato, y = diferencial, color = anomalia_final)) +
  geom_point() +
  labs(title = "Análisis Combinado de Anomalías en Diferenciales",
       x = "Fecha del Contrato",
       y = "Diferencial (Compra - Venta)")
```

### Explicación de cada sección del código:

1. **Carga de archivo Excel**: El código comienza cargando los datos desde un archivo Excel y convierte las fechas a formato adecuado.
   
2. **Transformación de variables**: Calcula el diferencial entre los precios de compra y venta.
   
3. **Análisis de anomalías - Métodos básicos**: Identifica y visualiza anomalías utilizando el método de IQR (rango intercuartílico) y un gráfico de boxplot.

4. **Análisis de anomalías - Métodos avanzados**: Incluye técnicas más sofisticadas como Isolation Forest y Local Outlier Factor (LOF) para identificar anomalías en los diferenciales.

5. **Análisis adicional: Clustering con k-means**: Realiza un análisis de clustering para agrupar los diferenciales en clusters, ayudando a detectar patrones en los datos.

6. **Resultados finales**: Combina los resultados de todas las técnicas de detección de anomalías y visualiza las anomalías identificadas en un gráfico.

Este código te proporcionará una visión integral de posibles anomalías en los diferenciales de compra y venta y ayudará a identificar patrones inusuales en las transacciones de los traders.
