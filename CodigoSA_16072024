Hola, tengo actualmente el siguiente codigo para determinar mediante simulaciones la suma asegurada, para esto he hecho una aplicacion flask en python, pero necesito porfa me ayudes con algunas cosas:
1. quiero lograr que la grafica de curva de percentiles y la de distribución sean interactivan, es decir por ejemplo para la curva de percentiles pueda visualizar el valor de la suma asegurada para cada percentil.
2. mejorar el diseño de la pagina results.html y sensitivity.hmtl para que se vea bonita y agradable
3. tener una ventana adicional (quizas llamada reportes.html) en donde este el menú de descarga de los reportes.

este es mi codigo:

1. app.py

from flask import Flask, request, render_template, send_file, make_response
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import io
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import base64
from scipy.stats import triang

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['file']
    df = pd.read_excel(file)
    return render_template('form.html', columns=df.columns.tolist(), data=df.to_dict(orient='records'))

@app.route('/simulate', methods=['POST'])
def simulate():
    df_data = request.form.getlist('data')
    df = pd.DataFrame(eval(df_data[0]))
    
    num_expuestos = int(request.form['num_expuestos'])
    #num_expuestos=1
    # presupuesto = float(request.form['presupuesto'])
    factor_riesgo = 1 + float(request.form['factor_riesgo']) / 100
    factor_gastos = 1 + float(request.form['factor_gastos']) / 100
    factor_legal = 1 + float(request.form['factor_legal']) / 100
    n_sim = int(request.form['n_sim'])
    seed = int(request.form['seed'])
    
    np.random.seed(seed)
    
    def triangular_simulation(row):
        P_min, P_esp, P_max = float(row['P_min']), float(row['P_esp']), float(row['P_max'])
        I_min, I_esp, I_max = float(row['I_min']), float(row['I_esp']), float(row['I_max'])
        Frecuencia = float(row['Frecuencia'])
        prob_sim = triang.rvs((P_esp - P_min) / (P_max - P_min), loc=P_min, scale=P_max - P_min, size=n_sim)
        impact_sim = triang.rvs((I_esp - I_min) / (I_max - I_min), loc=I_min * Frecuencia, scale=I_max * Frecuencia - I_min * Frecuencia, size=n_sim)
        return prob_sim * impact_sim

    suma_asegurada_total = np.sum([triangular_simulation(row) for idx, row in df.iterrows()], axis=0)
    suma_asegurada_final = suma_asegurada_total * num_expuestos
    suma_asegurada_ajustada = suma_asegurada_final * factor_riesgo * factor_gastos * factor_legal
    
    percentiles = np.percentile(suma_asegurada_ajustada, np.arange(0, 101))
    percentiles_df = np.percentile(suma_asegurada_ajustada, np.arange(0, 101,5))
    mean_suma_asegurada = np.mean(suma_asegurada_ajustada)
    median_suma_asegurada = np.median(suma_asegurada_ajustada)
    sd_suma_asegurada = np.std(suma_asegurada_ajustada)
    percentil_90 = np.percentile(suma_asegurada_ajustada, 90)

    # Gráfico de la distribución de la suma asegurada ajustada
    plt.figure(figsize=(10, 6))
    sns.histplot(suma_asegurada_ajustada, bins=50, kde=True)
    plt.axvline(mean_suma_asegurada, color='r', linestyle='--', label=f'Mean: {mean_suma_asegurada:.2f}')
    plt.axvline(median_suma_asegurada, color='g', linestyle='--', label=f'Median: {median_suma_asegurada:.2f}')
    plt.title('Distribución de la Suma Asegurada Ajustada')
    plt.xlabel('Suma Asegurada Ajustada')
    plt.ylabel('Frecuencia')
    plt.legend()
    fig = plt.gcf()
    img = io.BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode()

    # Gráfico de percentiles
    plt.figure(figsize=(10, 6))
    sns.lineplot(x=np.arange(0, 101), y=percentiles)
    plt.title('Percentiles de la Suma Asegurada Ajustada')
    plt.xlabel('Percentiles')
    plt.ylabel('Suma Asegurada Ajustada')
    plt.axhline(y=percentil_90,color='red')
    fig = plt.gcf()
    img = io.BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    percentiles_plot_url = base64.b64encode(img.getvalue()).decode()
   
    percentiles_table = pd.DataFrame({'Percentil': np.arange(0, 101,5), 'Value': percentiles_df})

    # Convertir tablas a HTML
    percentiles_table_html = percentiles_table.to_html(index=False)
    df_table_html = pd.DataFrame(suma_asegurada_ajustada, columns=['Simulaciones']).to_html(index=False)

    return render_template('results.html', mean_suma_asegurada=mean_suma_asegurada,
                           median_suma_asegurada=median_suma_asegurada, sd_suma_asegurada=sd_suma_asegurada,
                           plot_url=plot_url, percentiles_plot_url=percentiles_plot_url,
                           percentiles_table=percentiles_table_html, df_table=df_table_html,
                           data=df.to_dict(orient='records'), percentiles_table_data=percentiles_table.to_dict(orient='records'),suma_asegurada_ajustada_data=suma_asegurada_ajustada.tolist())


@app.route('/sensitivity', methods=['POST'])
def sensitivity():
    df_data = request.form.getlist('data')
    df = pd.DataFrame(eval(df_data[0]))
    
    num_expuestos = int(request.form['num_expuestos'])
    #num_expuestos=1
    n_sim = int(request.form['n_sim'])
    seed = int(request.form['seed'])

    np.random.seed(seed)
    
    def triangular_simulation(row):
        P_min, P_esp, P_max = float(row['P_min']), float(row['P_esp']), float(row['P_max'])
        I_min, I_esp, I_max = float(row['I_min']), float(row['I_esp']), float(row['I_max'])
        Frecuencia = float(row['Frecuencia'])
        prob_sim = triang.rvs((P_esp - P_min) / (P_max - P_min), loc=P_min, scale=P_max - P_min, size=n_sim)
        impact_sim = triang.rvs((I_esp - I_min) / (I_max - I_min), loc=I_min * Frecuencia, scale=I_max * Frecuencia - I_min * Frecuencia, size=n_sim)
        return prob_sim * impact_sim

    suma_asegurada_total = np.sum([triangular_simulation(row) for idx, row in df.iterrows()], axis=0)
    suma_asegurada_final = suma_asegurada_total * num_expuestos

    factor_ranges = {
        'factor_riesgo': np.arange(1.0, 1.4, 0.1),
        'factor_gastos': np.arange(1.0, 1.2, 0.05),
        'factor_legal': np.arange(1.0, 1.1, 0.02)
    }
    
    results = []
    
    for factor_riesgo in factor_ranges['factor_riesgo']:
        for factor_gastos in factor_ranges['factor_gastos']:
            for factor_legal in factor_ranges['factor_legal']:
                suma_asegurada_ajustada = suma_asegurada_final * factor_riesgo * factor_gastos * factor_legal
                mean_suma_asegurada = np.mean(suma_asegurada_ajustada)
                results.append((factor_riesgo, factor_gastos, factor_legal, mean_suma_asegurada))
    
    results_df = pd.DataFrame(results, columns=['FactorRiesgo', 'FactorGastos', 'FactorLegal', 'Promedio'])
    fig = px.scatter_3d(results_df, x='FactorRiesgo', y='FactorGastos', z='Promedio', color='FactorLegal')
    graph_json = fig.to_json()

    return render_template('sensitivity.html', graph_json=graph_json, table=results_df.to_html(index=False),sensibilidad_table_data=results_df.to_dict(orient='records'))

@app.route('/download', methods=['POST'])
def download_file():
    df_data = request.form.getlist('data')
    percentiles_table_data = request.form.getlist('percentiles_table_data')
    suma_asegurada_ajustada_data = request.form.getlist('suma_asegurada_ajustada_data')
    # sensibilidad_table_data = request.form.getlist('sensibilidad_table_data')

    df = pd.DataFrame(eval(df_data[0]))
    percentiles_table = pd.DataFrame(eval(percentiles_table_data[0]))
    suma_asegurada_ajustada = pd.DataFrame(eval(suma_asegurada_ajustada_data[0]), columns=['Suma Asegurada Ajustada'])
    # sensibilidad_table = pd.DataFrame(eval(sensibilidad_table_data[0]))

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Input Data')
        percentiles_table.to_excel(writer, index=False, sheet_name='Percentiles')
        suma_asegurada_ajustada.to_excel(writer, index=False, sheet_name='Simulaciones')
        # sensibilidad_table.to_excel(writer, index=False, sheet_name='Analisis_sensibilidad')

    output.seek(0)
    response = make_response(output.read())
    response.headers['Content-Disposition'] = 'attachment; filename=simulation_results.xlsx'
    response.headers['Content-type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    return response

if __name__ == '__main__':
    app.run(debug=True)

2. index.html (el diseño de esta pagina me gusta)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <title>Simulación de Suma Asegurada</title>
</head>

<body>
    <div class="container mt-5">
        <h1 class="mb-4">Simulación de Suma Asegurada</h1>
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">Cargar archivo de riesgos</h4>
        </div>
        <div class="card-body"></div>
        <form action="/upload" method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="file" class="form-label">Subir archivo Excel</label>
                <input class="form-control" type="file" name="file" id="file" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Cargar archivo</button>
        </form>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

3. form.html (el diseño de esta pagina me gusta, no me lo cambies)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parametros-Simulación Monte Carlo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center align-items-center h-100">
            <div class="col-md-8">
                <div class="card shadow-lg">
                    <div class="card-header bg-primary text-white">
                        <h2>Parametros de simulación</h2>
                        <!-- <h3>LRC</h3> -->
                    </div>
                    <div class="card-body">
                        <form action="/simulate" method="post">
                            <div class="form-group">
                                <label for="num_expuestos">Número de Expuestos:</label>
                                <input type="number" class="form-control" id="num_expuestos" name="num_expuestos" value="10" required>
                            </div>
                            <!-- <div class="form-group">
                                <label for="presupuesto">Presupuesto:</label>
                                <input type="number" class="form-control" id="presupuesto" name="presupuesto" step="0.01" required>
                            </div> -->
                            <div class="form-group">
                                <label for="factor_riesgo">Factor de Riesgo (%):</label>
                                <input type="number" class="form-control" id="factor_riesgo" name="factor_riesgo" value="5" step="0.01" required>
                            </div>
                            <div class="form-group">
                                <label for="factor_gastos">Factor de Gastos (%):</label>
                                <input type="number" class="form-control" id="factor_gastos" name="factor_gastos" value="0" step="0.01" required>
                            </div>
                            <div class="form-group">
                                <label for="factor_legal">Factor Legal (%):</label>
                                <input type="number" class="form-control" id="factor_legal" name="factor_legal" value="0" step="0.01" required>
                            </div>
                            <div class="form-group">
                                <label for="n_sim">Número de Simulaciones:</label>
                                <input type="number" class="form-control" id="n_sim" name="n_sim" value="10000" required>
                            </div>
                            <div class="form-group">
                                <label for="seed">Semilla (Seed):</label>
                                <input type="number" class="form-control" id="seed" name="seed" value="1234" required>
                            </div>
                            <input type="hidden" name="data" value="{{ data }}">
                            <br>
                            <button type="submit" class="btn btn-success btn-block">Simular</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

4. results.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monte Carlo Simulation - Results</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}" rel="stylesheet">
</head>
<body>
    <div class="card-header bg-primary text-white">
    <h1>Resultados Simulación Suma Asegurada</h1>
    </div>
    
    <div class="col-md-6">
        <h3>Parámetros ingresados</h3>
        <label for="num_expuestos">Número de Expuestos:</label>
        <input type="number" id="num_expuestos" name="num_expuestos" value="{{ request.form['num_expuestos'] }}" disabled><br>
        <label for="n_sim">Número de Simulaciones:</label>
        <input type="number" id="n_sim" name="n_sim" value="{{ request.form['n_sim'] }}" disabled><br>
        <label for="seed">Semilla (Seed):</label>
        <input type="number" id="seed" name="seed" value="{{ request.form['seed'] }}" disabled><br>
    </div>
    <br>
    <div class="col-md-6">
        <h3>Estadísticas</h3>
        <p><strong>Suma Asegurada Min Esperada:</strong> {{ "{:,.2f}".format(mean_suma_asegurada) }}</p>
        <p><strong>Mediana:</strong> {{ "{:,.2f}".format(median_suma_asegurada) }}</p>
        <p><strong>Desviación Estándar:</strong> {{ "{:,.2f}".format(sd_suma_asegurada) }}</p>
    </div>
    <br>
    <div class="col-md-6">
        <h3>Curva de percentiles de la Suma Asegurada</h3>
        <div><table class="table-secondary">{{ percentiles_table|safe }}</table></div>
    </div> 
    <br>

    <div class="row mt-4">
        <div class="col-md-6">
            <h3>Distribución Suma Asegurada simulada</h3>
            <<img src="data:image/png;base64,{{ plot_url }}" class="img-fluid">
        </div>
        <div class="col-md-6">
            <h3>Percentiles de la Suma Asegurada</h3>
            <img src="data:image/png;base64,{{ percentiles_plot_url }}" class="img-fluid">
        </div>

    </div>
    <!-- <img src="data:image/png;base64,{{ plot_url }}" alt="Suma Asegurada Distribution">
    <h2>Percentiles</h2>
    <img src="data:image/png;base64,{{ percentiles_plot_url }}" alt="Percentiles Plot"> -->
    
    <h2>Simulaciones</h2>
    <!-- <div>{{ df_table|safe }}</div> -->
    <form action="/sensitivity" method="post">
        <input type="hidden" name="data" value="{{ data }}">
        <label for="num_expuestos">Número de Expuestos:</label>
        <input type="number" id="num_expuestos" name="num_expuestos" value="{{ request.form['num_expuestos'] }}" required><br>
        <label for="n_sim">Número de Simulaciones:</label>
        <input type="number" id="n_sim" name="n_sim" value="{{ request.form['n_sim'] }}" required><br>
        <label for="seed">Semilla (Seed):</label>
        <input type="number" id="seed" name="seed" value="{{ request.form['seed'] }}" required><br>
        <input type="submit" value="Análisis de Sensibilidad">
    </form>
    <form action="/download" method="post">
        <input type="hidden" name="data" value="{{ data }}">
        <input type="hidden" name="percentiles_table_data" value="{{ percentiles_table_data }}">
        <input type="hidden" name="suma_asegurada_ajustada_data" value="{{ suma_asegurada_ajustada_data }}">
        <!-- <input type="hidden" name="Sensibilidad_table_data" value="{{ Sensibilidad_table_data}}"> -->
        <input type="submit" value="Descargar Resultados">
    </form>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

5. sensitivity.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <title>Tabla de Sensibilidad</title>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Tabla de Sensibilidad</h1>
        <div id="graph" style="width:100%; height:600px;"></div>
        <script>
            var graph_json = {{ graph_json | safe }};
            Plotly.newPlot('graph', graph_json.data, graph_json.layout);
        </script>
        <div class="row mt-4">
            <div class="col-md-12">
                <h3>Resultados de Sensibilidad</h3>
                {{ table|safe }}
            </div>
        </div>
    </div>

</body>
</html>

5. style.css

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Estiliza el cuerpo con un fondo claro y una tipografía agradable */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f8f9fa;
    color: #343a40;
}

/* Mejora el aspecto de los formularios */
form {
    background: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Agrega un margen inferior a todos los inputs y selects dentro de un formulario */
form input,
form select {
    margin-bottom: 15px;
}

/* Estiliza los botones */
button {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}

/* Mejora la apariencia de las tablas */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table th,
table td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #dee2e6;
}

table th {
    background-color: #007bff;
    color: #fff;
}

table tr:nth-child(even) {
    background-color: #f2f2f2;
}

/* Mejora el aspecto de los gráficos */
img {
    max-width: 100%;
    height: auto;
}

/* Centra el contenedor principal */
.container {
    max-width: 900px;
    margin: 50px auto;
    padding: 20px;
}

/* Estiliza los encabezados */
h1 {
    margin-bottom: 20px;
    font-size: 2em;
    color: #007bff;
}

h3 {
    margin-bottom: 15px;
    font-size: 1.5em;
}

/* Espaciado adicional para las filas */
.row {
    margin-bottom: 20px;
}

/* Ajusta la imagen del gráfico para ser responsiva */
.img-fluid {
    max-width: 100%;
    height: auto;
}

/* Estiliza las alertas */
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}

.alert-success {
    color: #155724;
    background-color: #d4edda;
    border-color: #c3e6cb;
}

.alert-danger {
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
}

/* Personalización adicional */
.custom-file-label::after {
    content: 'Buscar';
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 0 0.25rem 0.25rem 0;
    padding: 0.375rem 0.75rem;
}
