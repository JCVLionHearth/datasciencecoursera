Para reflejar el idioma de cada consulta en tu tabla dinámica, puedes extraer el idioma directamente del DataFrame donde ya está registrado para cada búsqueda. A continuación te muestro cómo puedes agregar esta información al código.

### Actualización del Código:

1. **Idioma de la consulta**: Extraerás el idioma directamente del DataFrame para cada búsqueda.
2. **Modificar la función**: Incluirás el idioma dentro de la función `tabla_resumen` para generar dinámicamente esta información.

### Código Modificado:

```r
library(dplyr)
library(knitr)

# Genera el índice único de las búsquedas
indices <- unique(Noticias$index)

# Define una función para generar las filas dinámicas
tabla_resumen <- function(indice) {
  # Extrae la búsqueda y el idioma asociado
  busqueda <- unique(Noticias$Busqueda[Noticias$index == indice])
  idioma <- unique(Noticias$Idioma[Noticias$index == indice])  # Asume que tienes una columna "Idioma"
  
  noticias_hoy <- Num_Noticias %>%
    filter(Busqueda == busqueda & Fecha == as.Date(Sys.Date())) %>%
    select(Conteo) %>%
    pull() %>%
    ifelse(is.na(.), 0, .)
  
  noticias_ayer <- Num_Noticias %>%
    filter(Busqueda == busqueda & Fecha == as.Date(Sys.Date() - 1)) %>%
    select(Conteo) %>%
    pull() %>%
    ifelse(is.na(.), 0, .)
  
  noticias_mes <- Num_Noticias2 %>%
    filter(Busqueda == busqueda & AM == mes_hoy) %>%
    select(Conteo2) %>%
    pull()
  
  noticias_ano <- Num_Noticias2 %>%
    filter(Busqueda == busqueda & AY == ano_hoy) %>%
    select(Conteo2) %>%
    pull()
  
  # Retorna los datos incluyendo el idioma
  return(c(busqueda, idioma, noticias_hoy, noticias_ayer, noticias_mes, noticias_ano))
}

# Aplica la función a todos los índices
tabla <- do.call(rbind, lapply(indices, tabla_resumen))

# Genera la tabla con kable
colnames(tabla) <- c("Consulta", "Idioma de consulta", "Noticias hoy", "Noticias ayer", "Noticias Mes", "Noticias Año")

kable(tabla, align = 'c', caption = "Resumen de Búsquedas de Noticias")
```

### Explicación Adicional:
1. **Idioma**: Se asume que tienes una columna `Idioma` en tu DataFrame `Noticias`, que contiene el idioma de cada búsqueda. Esto puede ser "ES", "EN", o ambos (por ejemplo, "ES, EN").
2. **`Idioma` en la tabla**: Al agregar la columna `Idioma` a la función `tabla_resumen`, ahora la tabla reflejará correctamente si una búsqueda fue realizada en español, inglés, o ambos idiomas.

Este enfoque asegurará que las consultas se muestren junto con el idioma correspondiente sin que tengas que modificar manualmente el código cada vez que haya una búsqueda nueva o un cambio de idioma.

library(dplyr)
library(knitr)

# Supongamos que tienes los siguientes DataFrames
# Noticias contiene las búsquedas y fechas
# Num_Noticias y Num_Noticias2 contienen los conteos de noticias

# Genera el índice único de las búsquedas
indices <- unique(Noticias$index)

# Define una función para generar las filas dinámicas
tabla_resumen <- function(indice) {
  busqueda <- unique(Noticias$Busqueda[Noticias$index == indice])
  
  noticias_hoy <- Num_Noticias %>%
    filter(Busqueda == busqueda & Fecha == as.Date(Sys.Date())) %>%
    select(Conteo) %>%
    pull() %>%
    ifelse(is.na(.), 0, .)
  
  noticias_ayer <- Num_Noticias %>%
    filter(Busqueda == busqueda & Fecha == as.Date(Sys.Date() - 1)) %>%
    select(Conteo) %>%
    pull() %>%
    ifelse(is.na(.), 0, .)
  
  noticias_mes <- Num_Noticias2 %>%
    filter(Busqueda == busqueda & AM == mes_hoy) %>%
    select(Conteo2) %>%
    pull()
  
  noticias_ano <- Num_Noticias2 %>%
    filter(Busqueda == busqueda & AY == ano_hoy) %>%
    select(Conteo2) %>%
    pull()
  
  return(c(busqueda, "ES", noticias_hoy, noticias_ayer, noticias_mes, noticias_ano))
}

# Aplica la función a todos los índices
tabla <- do.call(rbind, lapply(indices, tabla_resumen))

# Genera la tabla con kable
colnames(tabla) <- c("Consulta", "Idioma de consulta", "Noticias hoy", "Noticias ayer", "Noticias Mes", "Noticias Año")

kable(tabla, align = 'c', caption = "Resumen de Búsquedas de Noticias")

Hola, actualmente en Rmarkadown estoy haciendo un informe en el que presento una tabla con las búsquedas de notcias, muestra las noticias de hoy, ayer y del mes. pero actualmente considero que el codigo es tedioso, ya que si agrego una nueva búsqueda me toca agregar una nueva linea y demás...este es el codigo de mi actual tabla:

|**Consulta**|**Idioma de consulta**|**Noticias hoy[^1]**|**Noticias ayer**|**Noticias Mes**|
|:-------:|:-------:|:-------:|:-------:|:-------:|
|`r (unique(Noticias$Busqueda)[1])`|ES, EN|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[1]) & Fecha ==as.Date(Sys.Date())) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[1]) & Fecha ==as.Date(Sys.Date()-days(1))) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias2 %>% filter(Busqueda==(unique(Noticias$Busqueda)[1]) & AM ==mes_hoy) %>% select(Conteo2) %>% pull()`|
|`r (unique(Noticias$Busqueda)[2])`|ES|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[2]) & Fecha ==as.Date(Sys.Date())) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[2]) & Fecha ==as.Date(Sys.Date()-days(1))) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias2 %>% filter(Busqueda==(unique(Noticias$Busqueda)[2]) & AM ==mes_hoy) %>% select(Conteo2) %>% pull()`|
|`r (unique(Noticias$Busqueda)[3])`|ES|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[3]) & Fecha ==as.Date(Sys.Date())) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[3]) & Fecha ==as.Date(Sys.Date()-days(1))) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias2 %>% filter(Busqueda==(unique(Noticias$Busqueda)[3]) & AM ==mes_hoy) %>% select(Conteo2) %>% pull()`|
|`r (unique(Noticias$Busqueda)[4])`|ES|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[4]) & Fecha ==as.Date(Sys.Date())) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[4]) & Fecha ==as.Date(Sys.Date()-days(1))) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias2 %>% filter(Busqueda==(unique(Noticias$Busqueda)[4]) & AM ==mes_hoy) %>% select(Conteo2) %>% pull()`|
|`r (unique(Noticias$Busqueda)[5])`|ES, EN|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[5]) & Fecha ==as.Date(Sys.Date())) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias %>% filter(Busqueda==(unique(Noticias$Busqueda)[5]) & Fecha ==as.Date(Sys.Date()-days(1))) %>% select(Conteo) %>% pull() %>% ifelse(is.na(.),0,.)`|`r Num_Noticias2 %>% filter(Busqueda==(unique(Noticias$Busqueda)[5]) & AM ==mes_hoy) %>% select(Conteo2) %>% pull()`|


[^1]: Informe generado el día `r format(Sys.time(),"%A, %d de %B de %Y")` a las `r format(Sys.time(),"%I:%M %p")`

quiero que la tabla sea más dinámica, actualmente agregué a mi data frame un campo llamado index, en el que este pone un numero a la consulta especifica, en mi data frame hay un listado de notcias y titulos asociados a la busqueda, por ejemplo si hice 7 consultas habrá un listado de noticias asociadas a cada consulta, pero el index será 1 a 7. ayudame a crear una mejor forma de presentar esta tabla, que sin importar el numero de noticias que agregue me haga el resumen deseado, adicional agregando un resumen de las noticias tambien del año.
