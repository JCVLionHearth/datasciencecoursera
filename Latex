Latexmk: Missing input file 'listings.sty' (or dependence on it) from following:
  ! LaTeX Error: File `listings.sty' not found.
Latexmk: Sometimes, the -f option can be used to get latexmk
  to try to force complete processing.
  But normally, you will need to correct the file(s) that caused the
  error, and then rerun latexmk.
  In some cases, it is best to clean out generated files before rerunning
  latexmk after you've corrected the files.

Entendido. Puedes usar Python para ejecutar el código y luego insertar los resultados en un archivo LaTeX, generando así un PDF. Aquí tienes una guía paso a paso para lograrlo desde Visual Studio Code.

### Paso 1: Crear el Código Python

Crea un archivo Python (`main.py`) que contenga las funciones para los métodos de Gauss-Simple y Gauss-Seidel, ejecuta los ejemplos y guarda los resultados en un archivo de texto.

```python
import numpy as np

def gauss_simple(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    Ab = np.hstack([A, b.reshape(-1, 1)])

    for i in range(n-1):
        max_row = np.argmax(np.abs(Ab[i:n, i])) + i
        Ab[[i, max_row], :] = Ab[[max_row, i], :]

        for j in range(i+1, n):
            m = Ab[j, i] / Ab[i, i]
            Ab[j, :] -= m * Ab[i, :]

    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]

    return x

def gauss_seidel(A, b, tol=1e-10, max_iter=1000):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    x = np.zeros(n)
    iter_count = 0

    for k in range(max_iter):
        x_new = np.copy(x)
        for i in range(n):
            s1 = np.dot(A[i, :i], x_new[:i])
            s2 = np.dot(A[i, i+1:], x[i+1:])
            x_new[i] = (b[i] - s1 - s2) / A[i, i]
        if np.linalg.norm(x_new - x) < tol:
            return x_new
        x = x_new
        iter_count += 1

    return x

# Ejemplo Gauss-Simple
A1 = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])
b1 = np.array([8, -11, -3])
sol1 = gauss_simple(A1, b1)

# Ejemplo Gauss-Seidel
A2 = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]])
b2 = np.array([4, 7, 3])
sol2 = gauss_seidel(A2, b2)

# Guardar los resultados en un archivo de texto
with open("resultados.txt", "w") as f:
    f.write("Resultados del método Gauss-Simple:\n")
    f.write(f"Solución: {sol1}\n\n")
    f.write("Resultados del método Gauss-Seidel:\n")
    f.write(f"Solución: {sol2}\n")
```

### Paso 2: Crear el Documento LaTeX

Crea un archivo LaTeX (`document.tex`) que incluya el código Python y los resultados obtenidos. 

```latex
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{listings}
\usepackage{color}

\definecolor{codebackground}{rgb}{0.95,0.95,0.95}
\lstset{
  backgroundcolor=\color{codebackground},
  basicstyle=\ttfamily,
  breaklines=true
}

\title{Resolución de Ecuaciones Lineales}
\author{}
\date{}

\begin{document}

\maketitle

\section{Introducción}

En este documento, resolveremos sistemas de ecuaciones lineales utilizando los métodos de Gauss-Simple y Gauss-Seidel con Python.

\section{Método de Gauss-Simple}

\begin{lstlisting}[language=Python]
import numpy as np

def gauss_simple(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    Ab = np.hstack([A, b.reshape(-1, 1)])

    for i in range(n-1):
        max_row = np.argmax(np.abs(Ab[i:n, i])) + i
        Ab[[i, max_row], :] = Ab[[max_row, i], :]

        for j in range(i+1, n):
            m = Ab[j, i] / Ab[i, i]
            Ab[j, :] -= m * Ab[i, :]

    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]

    return x

# Ejemplo
A = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])
b = np.array([8, -11, -3])
sol = gauss_simple(A, b)
print(sol)
\end{lstlisting}

\section{Método de Gauss-Seidel}

\begin{lstlisting}[language=Python]
def gauss_seidel(A, b, tol=1e-10, max_iter=1000):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    x = np.zeros(n)
    iter_count = 0

    for k in range(max_iter):
        x_new = np.copy(x)
        for i in range(n):
            s1 = np.dot(A[i, :i], x_new[:i])
            s2 = np.dot(A[i, i+1:], x[i+1:])
            x_new[i] = (b[i] - s1 - s2) / A[i, i]
        if np.linalg.norm(x_new - x) < tol:
            return x_new
        x = x_new
        iter_count += 1

    return x

# Ejemplo
A = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]])
b = np.array([4, 7, 3])
sol = gauss_seidel(A, b)
print(sol)
\end{lstlisting}

\section{Resultados}

\input{resultados.txt}

\end{document}
```

### Paso 3: Ejecutar el Código Python

Ejecuta el archivo Python (`main.py`) desde Visual Studio Code para generar el archivo `resultados.txt` con los resultados de las ejecuciones.

```bash
python main.py
```

### Paso 4: Compilar el Documento LaTeX

Compila el archivo LaTeX (`document.tex`) para generar el PDF.

```bash
pdflatex document.tex
```

Esto generará un documento PDF que incluye tanto el código Python como los resultados obtenidos.

### Resumen

Este proceso te permite ejecutar tu código Python desde un archivo, guardar los resultados en un archivo de texto, y luego incluir ese archivo de texto en un documento LaTeX para generar un PDF. Todo esto se puede hacer desde Visual Studio Code sin necesidad de usar Jupyter Notebook.

\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{verbatim}  % Reemplaza listings por verbatim

\title{Resolución de Ecuaciones Lineales}
\author{}
\date{}

\begin{document}

\maketitle

\section{Introducción}

En este documento, resolveremos sistemas de ecuaciones lineales utilizando los métodos de Gauss-Simple y Gauss-Seidel con Python.

\section{Método de Gauss-Simple}

\begin{verbatim}
import numpy as np

def gauss_simple(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    # Formar la matriz aumentada
    Ab = np.hstack([A, b.reshape(-1, 1)])

    for i in range(n-1):
        # Pivoteo parcial
        max_row = np.argmax(np.abs(Ab[i:n, i])) + i
        Ab[[i, max_row], :] = Ab[[max_row, i], :]

        for j in range(i+1, n):
            m = Ab[j, i] / Ab[i, i]
            Ab[j, :] -= m * Ab[i, :]

    # Sustitución regresiva
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]

    return x

# Ejemplo
A = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])
b = np.array([8, -11, -3])
sol = gauss_simple(A, b)
print(sol)
\end{verbatim}

\section{Método de Gauss-Seidel}

\begin{verbatim}
def gauss_seidel(A, b, tol=1e-10, max_iter=1000):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    x = np.zeros(n)
    iter_count = 0

    for k in range(max_iter):
        x_new = np.copy(x)
        for i in range(n):
            s1 = np.dot(A[i, :i], x_new[:i])
            s2 = np.dot(A[i, i+1:], x[i+1:])
            x_new[i] = (b[i] - s1 - s2) / A[i, i]
        if np.linalg.norm(x_new - x) < tol:
            return x_new
        x = x_new
        iter_count += 1

    return x

# Ejemplo
A = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]])
b = np.array([4, 7, 3])
sol = gauss_seidel(A, b)
print(sol)
\end{verbatim}

\end{document}
