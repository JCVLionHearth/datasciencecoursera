\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{hyperref}
\usepackage{verbatim}  % Reemplaza listings por verbatim

\title{Resolución de Ecuaciones Lineales}
\author{}
\date{}

\begin{document}

\maketitle

\section{Introducción}

En este documento, resolveremos sistemas de ecuaciones lineales utilizando los métodos de Gauss-Simple y Gauss-Seidel con Python.

\section{Método de Gauss-Simple}

\begin{verbatim}
import numpy as np

def gauss_simple(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    # Formar la matriz aumentada
    Ab = np.hstack([A, b.reshape(-1, 1)])

    for i in range(n-1):
        # Pivoteo parcial
        max_row = np.argmax(np.abs(Ab[i:n, i])) + i
        Ab[[i, max_row], :] = Ab[[max_row, i], :]

        for j in range(i+1, n):
            m = Ab[j, i] / Ab[i, i]
            Ab[j, :] -= m * Ab[i, :]

    # Sustitución regresiva
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]

    return x

# Ejemplo
A = np.array([[2, 1, -1], [-3, -1, 2], [-2, 1, 2]])
b = np.array([8, -11, -3])
sol = gauss_simple(A, b)
print(sol)
\end{verbatim}

\section{Método de Gauss-Seidel}

\begin{verbatim}
def gauss_seidel(A, b, tol=1e-10, max_iter=1000):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)
    x = np.zeros(n)
    iter_count = 0

    for k in range(max_iter):
        x_new = np.copy(x)
        for i in range(n):
            s1 = np.dot(A[i, :i], x_new[:i])
            s2 = np.dot(A[i, i+1:], x[i+1:])
            x_new[i] = (b[i] - s1 - s2) / A[i, i]
        if np.linalg.norm(x_new - x) < tol:
            return x_new
        x = x_new
        iter_count += 1

    return x

# Ejemplo
A = np.array([[4, 1, 2], [3, 5, 1], [1, 1, 3]])
b = np.array([4, 7, 3])
sol = gauss_seidel(A, b)
print(sol)
\end{verbatim}

\end{document}
