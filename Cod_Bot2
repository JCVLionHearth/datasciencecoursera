voy a compartirte mi codigo actual para un ChatBot. Actualmente mi chatBot guarda las interacciones en una base de datos, la tabla se llama interaction. Quiero que me ayudes con lo siguiente, pero necesito que seas muy detallado:
1. quiero crear en mi index.html un pequeño enlace que diga "adminitrador"
2. una vez se de clic se abra una ventana que solicite un usuario y contraseña, esto nombres y contraseñas deben estar creados en la tabla User, supon que hay tres usuarios.
3. Necesito que me ayudes a crear estos tres usuarios y se queden alojados en la tabla.
4. en la ventana que se abre al ingresar los datos del usuario administrador y la contraseña,se debe abrir una ventana que permita descargar la tabla de interacciones en csv y otra opción que limpie la tabla de interacciones (aqui se debe pedir una contraseña adicional)
5. ayudame con las rutas y demás configuraciones necesarias.
6. por ultimo: el username de la tabla de interaction deberia hacer referencia al usuario del chatBot que se solicita en el modal de personalizacion, y el username de la tabla User, son los usuarios administradores, estas dos tablas no se relacionarian estrictamente

te comparto los codigos actuales:

# app.py

from flask import Flask, render_template, request, jsonify, send_file, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import json
import datetime
import re
import unicodedata
import io
from io import BytesIO, StringIO
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import utils
import csv

app = Flask(__name__)

## Creación de base de datos
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///interactions.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False


db = SQLAlchemy(app)

# Definición del modelo de interacción
class Interaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), nullable=False)
    user_input = db.Column(db.String(500), nullable=False)
    # response = db.Column(db.String(500), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)

    def __repr__(self):
        return f'<Interaction {self.username} - {self.user_input}>'
    

# Definición del modelo para el usuario
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)

with app.app_context():
    db.create_all()

# Load intents
with open('intents.json', 'r', encoding='utf-8') as file:
    intents = json.load(file)

# Initialize chat history
chat_history = []

# Define patterns for greetings and farewells (normalized)
greeting_patterns = re.compile(r'\b(hola|hi|buenos dias|buenas tardes|buenas noches|saludos)\b', re.IGNORECASE)
farewell_patterns = re.compile(r'\b(adios|hasta luego|nos vemos|chau|bye|hasta pronto|gracias|muchas gracias)\b', re.IGNORECASE)

def normalize_text(text):
    # Normalize text to remove accents and convert to lowercase
    return ''.join(
        c for c in unicodedata.normalize('NFD', text)
        if unicodedata.category(c) != 'Mn'
    ).lower()

# def save_interaction(username, user_input, response):
def save_interaction(username, user_input):
    if username is None:
        username='Unknown'
    #interaction = Interaction(username=username, user_input=user_input, response=response)
    interaction = Interaction(username=username, user_input=user_input)
    db.session.add(interaction)
    db.session.commit()

def get_bot_response(user_input, user_name):
    global chat_history
    # Normalize user input
    normalized_input = normalize_text(user_input)
    
    # Check for greeting patterns
    if greeting_patterns.search(normalized_input):
        initial_greeting = (f"😊Hola!!, con ¿Cuál opción puedo ayudarte? "
                            "<button class='option-button' onclick=\"sendMessage('Tengo una consulta')\">Consulta</button>"
                            "<button class='option-button' onclick=\"sendMessage('Tengo un dilema')\">Dilema</button>"
                            "<button class='option-button' onclick=\"sendMessage('Con quienes me puedo contactar')\">Contactos</button>")
        chat_history.append(('Bot', initial_greeting))
        save_interaction(user_name, user_input)
        #save_interaction(user_name, user_input, initial_greeting)
        return initial_greeting
    
    # Check for farewell patterns
    if farewell_patterns.search(normalized_input):
        farewell_message = "Fue un gusto servirte!!👍, ¡que tengas un buen día! Si necesitas más ayuda, estaré aquí para asistirte.👨‍💻 <br> Para más información consulta La 💻<a href='https://ecopetrol.sharepoint.com/sites/emasdigital/Paginas/L%C3%ADnea-%C3%A9tica.aspx' target='_blank'>Línea Ética<a>"
        chat_history.append(('Bot', farewell_message))
        #save_interaction(user_name, user_input, farewell_message)
        save_interaction(user_name, user_input)
        return farewell_message
    
    # Check for specific response that requires sending an Excel file
    if normalized_input == normalize_text('No conozco el nivel de riesgo de la jurisdicción de la contraparte'):
        response = "Aquí está el listado con el nivel de riesgo de la jurisdicción de la contraparte: " \
                   "<a href='/download_excel' target='_blank'>Descargar listado</a>"
        chat_history.append(('Bot', response))
        #save_interaction(user_name, user_input, response)
        save_interaction(user_name, user_input)
        return response
    
    # Check for yes/no responses
    if normalized_input == 'si':
        response = get_initial_greeting(user_name)
        #save_interaction(user_name, user_input, response)
        save_interaction(user_name, user_input)
        return response
    if normalized_input == 'no':
        response = get_farewell_message()
        save_interaction(user_name, user_input)
        #save_interaction(user_name, user_input, response)
        return response
    
    for intent in intents['intents']:
        if normalized_input == normalize_text(intent['tag']):
            responses = intent.get('responses', [])
            if responses:
                response = responses[0]
            else:
                response = ""
            
            options = intent.get('options', [])
            if options:
                response += "<br><br>👨‍🏫Encontré estas opciones: " + "".join(
                    f'<button class="option-button" onclick="sendMessage(\'{opt}\')">{opt}</button>' for opt in options)
            else:
                response += "<br><br> ¿Puedo ayudarte con algo más? " \
                            "<br><button class='option-button green' onclick=\"sendMessage('SI')\">SI</button> " \
                            "<button class='option-button green' onclick=\"sendMessage('NO')\">NO</button>"
            chat_history.append(('Bot', response))
            save_interaction(user_name, user_input)
            #save_interaction(user_name, user_input, response)
            return response
    
    response = "Lo siento, No te entiendo. 😅"
    chat_history.append(('Bot', response))
    #save_interaction(user_name, user_input, response)
    save_interaction(user_name, user_input)
    return response

def get_initial_greeting(user_name):
    initial_greeting = (f"¿Con cuál opción puedo ayudarte? 👩‍💻"
                        "<button class='option-button' onclick=\"sendMessage('Tengo una consulta')\">Consultas</button>"
                        "<button class='option-button' onclick=\"sendMessage('Tengo un dilema')\">Dilemas</button>"
                        "<button class='option-button' onclick=\"sendMessage('Con quienes me puedo contactar')\">Contactos</button>")
    chat_history.append(('Bot', initial_greeting))
    return initial_greeting

def get_farewell_message():
    farewell_message = "Fue un gusto servirte!!👍, ¡que tengas un buen día! Si necesitas más ayuda, estaré aquí para asistirte.👨‍💻 <br> Para más información consulta La 💻<a href='https://ecopetrol.sharepoint.com/sites/emasdigital/Paginas/L%C3%ADnea-%C3%A9tica.aspx' target='_blank'>Línea Ética<a>"
    chat_history.append(('Bot', farewell_message))
    return farewell_message

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/get")
def get_bot_response_endpoint():
    user_text = request.args.get('msg')
    user_name = request.args.get('user','Unknown')
    chat_history.append(('User', user_text))
    return jsonify(get_bot_response(user_text, user_name))

@app.route('/download_excel')
def download_excel():
    return send_file('static/listado_pais.xlsx', as_attachment=True, download_name='listado_pais.xlsx')

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    c.setFont("Helvetica", 12)
    c.drawString(200, height - 40, "Historia del Chat")
    c.drawString(200, height - 60, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    y = height - 100
    max_width = width - 60  # Reduce the width to avoid cutting off the text
    def draw_text(text_object, text, max_width):
        lines = utils.simpleSplit(text, text_object._fontname, text_object._fontsize, max_width)
        for line in lines:
            text_object.textLine(line)
    text_object = c.beginText(30, y)
    text_object.setFont("Helvetica", 12)
    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)
    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        if text_object.getY() < 40:
            c.drawText(text_object)
            c.showPage()
            text_object = c.beginText(30, height - 40)
            text_object.setFont("Helvetica", 12)
        draw_text(text_object, text, max_width)
        text_object.moveCursor(0, 14)
    c.drawText(text_object)
    c.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")


if __name__ == "__main__":
    app.run(debug=True)

# index.html

<!DOCTYPE html>
<html>
<head>
<title>Chatbot</title>
<meta charset="UTF-8">
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
<div class="chat-container">
<div class="chat-header">
           Pregúntale a Ethos
</div>
<div id="chatbox">
<div id="chatlog"></div>
<div class="typing-indicator" id="typingIndicator">
<i class="fas fa-robot"></i>
<span>Escribiendo...</span>
</div>
</div>
<input id="userInput" type="text" name="msg" placeholder="Escribe tu mensaje aquí..." autofocus>
<button id="sendButton" onclick="sendMessage()">Enviar</button>
<button id="downloadButton" onclick="downloadChat()">Descargar PDF</button>
<!-- <button id="emailButton" onclick="showEmailModal()">Enviar por correo</button> -->
</div>
<!-- Modal de Configuración -->
<div id="settingsModal" class="modal">
<div class="modal-content">
<h2>Personaliza tu experiencia</h2>
<label for="userName">Nombre:</label>
<input type="text" id="userName">
<label for="userAvatar">Selecciona un avatar:</label>
<div id="avatarSelection">
<i class="fas fa-user-circle avatar-option" onclick="selectAvatar('fa-user-circle')"></i>
<i class="fas fa-user-ninja avatar-option" onclick="selectAvatar('fa-user-ninja')"></i>
<i class="fas fa-user-astronaut avatar-option" onclick="selectAvatar('fa-user-astronaut')"></i>
<i class="fas fa-user-tie avatar-option" onclick="selectAvatar('fa-user-tie')"></i>
<i class="fas fa-user-secret avatar-option" onclick="selectAvatar('fa-user-secret')"></i>
<i class="fas fa-mars avatar-option" onclick="selectAvatar('fa-mars')"></i>
<i class="fas fa-venus avatar-option" onclick="selectAvatar('fa-venus')"></i>
<!-- Añade más íconos de Font Awesome aquí -->
</div>
<button onclick="saveSettings()" id="saveSettings">Guardar</button>
</div>
</div>

    <!-- Modal de Configuración -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h2>Personaliza tu experiencia</h2>
            <label for="userName">Nombre:</label>
            <input type="text" id="userName">
            <label for="userAvatar">Selecciona un avatar:</label>
            <div id="avatarSelection">
                <i class="fas fa-user-circle avatar-option" onclick="selectAvatar('fa-user-circle')"></i>
                <i class="fas fa-user-ninja avatar-option" onclick="selectAvatar('fa-user-ninja')"></i>
                <i class="fas fa-user-astronaut avatar-option" onclick="selectAvatar('fa-user-astronaut')"></i>
                <i class="fas fa-user-tie avatar-option" onclick="selectAvatar('fa-user-tie')"></i>
                <i class="fas fa-user-secret avatar-option" onclick="selectAvatar('fa-user-secret')"></i>
                <i class="fas fa-mars avatar-option" onclick="selectAvatar('fa-mars')"></i>
                <i class="fas fa-venus avatar-option" onclick="selectAvatar('fa-venus')"></i>
                <!-- Añade más íconos de Font Awesome aquí -->
            </div>
            <button onclick="saveSettings()">Guardar</button>
        </div>
    </div>
    <!-- Modal para enviar correo -->
    <!-- <div id="emailModal" class="modal">
        <div class="modal-content">
            <h2>Enviar historial de chat por correo</h2>
            <label for="email">Correo electrónico:</label>
            <input type="email" id="email" name="email">
            <button onclick="sendEmail()">Enviar</button>
        </div>
    </div> -->

<script>
    var userName = localStorage.getItem('userName') || 'User';
    var userAvatar = 'fa-user-circle';
    
    function appendMessage(role, message) {
        var messageClass = role === 'User' ? 'user-message' : 'bot-message';
        var avatarClass = role === 'User' ? userAvatar : 'fa-robot';
        $("#chatlog").append('<div class="' + messageClass + '"><i class="fas ' + avatarClass + '"></i> <span>' + message + '</span></div>');
        $("#chatbox").scrollTop($("#chatbox")[0].scrollHeight);
    }
    function displayTypingIndicator() {
        $("#typingIndicator").show();
        $("#chatbox").scrollTop($("#chatbox")[0].scrollHeight);
    }
    function hideTypingIndicator() {
        $("#typingIndicator").hide();
    }
    function sendMessage(userInput = null) {
        if (!userInput) {
            userInput = $("#userInput").val();
        }
        appendMessage('User', userInput);
        $("#userInput").val('');
        displayTypingIndicator();
        setTimeout(function() {
            $.get("/get", { msg: userInput }).done(function(data) {
                hideTypingIndicator();
                appendMessage('Bot', data);
            });
        }, 1000);  // Delay de 1 segundo para simular que el bot está escribiendo
    }
    function downloadChat() {
        window.location.href = "/download";
    }
    function openSettings() {
        document.getElementById('settingsModal').style.display = 'block';
    }
    function closeSettings() {
        document.getElementById('settingsModal').style.display = 'none';
    }
    function selectAvatar(avatarClass) {
        userAvatar = avatarClass;
        $('.avatar-option').removeClass('selected');
        $("." + avatarClass).addClass('selected');
    }
    function saveSettings() {
        userName = $("#userName").val() || 'Usuario';
        closeSettings();
        var initialGreeting = `Hola ${userName}, soy <b>Ethos</b> tu asistente Virtual de consultas y dilemas 👨‍💻. ¿En qué puedo ayudarte? <button class='option-button' onclick="sendMessage('Tengo una consulta')">Tengo una Consulta</button> <button class='option-button' onclick="sendMessage('Tengo un dilema')">Tengo un Dilema</button> <button class='option-button' onclick="sendMessage('Con quienes me puedo contactar')">Con quienes me puedo contactar</button>`;
        appendMessage('Bot', initialGreeting);
    }

    // function showEmailModal() {
    //         $('#emailModal').show();
    // }

    // function sendEmail() {
    //     let email = $('#email').val();
    //     $.post('/send_email', { email: email }).done(function (data) {
    //         alert(data.message);
    //         $('#emailModal').hide();
    // });
    // }


    $(document).ready(function() {
        // Mostrar modal de configuración al cargar la página
        openSettings();
        $("#userInput").keypress(function(event) {
            if (event.which == 13) {
                event.preventDefault();
                sendMessage();
            }
        });
    });
</script>

</body>
</html>
