El archivo `render.yaml` se utiliza para configurar c√≥mo se debe desplegar tu aplicaci√≥n en Render. Aqu√≠ te doy una gu√≠a de c√≥mo crear y configurar este archivo en Visual Studio Code:

### 1. Crear el archivo `render.yaml`

1. **Abrir tu proyecto en Visual Studio Code**:
   - Aseg√∫rate de tener tu proyecto abierto en Visual Studio Code.

2. **Crear el archivo `render.yaml`**:
   - En el explorador de archivos de Visual Studio Code, haz clic derecho en la carpeta ra√≠z de tu proyecto.
   - Selecciona "Nuevo archivo" y n√≥mbralo `render.yaml`.

### 2. Configurar el archivo `render.yaml`

Aqu√≠ tienes un ejemplo de c√≥mo podr√≠as configurar tu archivo `render.yaml` para una aplicaci√≥n Flask:

```yaml
services:
  - type: web
    name: flask-app
    env: python
    region: oregon
    plan: free
    buildCommand: "pip install -r requirements.txt"
    startCommand: "flask run --host=0.0.0.0 --port=10000"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: DATABASE_URL
        value: your-database-url
    mounts:
      - type: persistent
        name: my-data
        path: /persistent-data
```

### 3. Descripci√≥n de las claves en el archivo `render.yaml`:

- `services`: Lista de servicios que se van a desplegar.
  - `type`: Tipo de servicio, en este caso, `web`.
  - `name`: Nombre del servicio.
  - `env`: Entorno de ejecuci√≥n, en este caso, `python`.
  - `region`: Regi√≥n del servidor, por ejemplo, `oregon`.
  - `plan`: Plan de Render, en este caso, `free`.
  - `buildCommand`: Comando para instalar las dependencias.
  - `startCommand`: Comando para iniciar la aplicaci√≥n Flask.
  - `envVars`: Variables de entorno necesarias para la aplicaci√≥n.
  - `mounts`: Configuraci√≥n de montajes persistentes para que los datos no se pierdan entre despliegues.

### 4. Montar una base de datos persistente

En la clave `mounts`, estamos indicando que queremos montar un volumen persistente en `/persistent-data`. Esto es √∫til para asegurarse de que los datos no se pierdan entre despliegues.

### 5. Desplegar en Render

1. **Sube tu proyecto a GitHub**: Aseg√∫rate de que tu proyecto, incluido el archivo `render.yaml`, est√© en un repositorio de GitHub.

2. **Conecta tu repositorio a Render**:
   - Ve a [Render.com](https://render.com/) y crea una cuenta o inicia sesi√≥n.
   - Selecciona "New" y luego "Web Service".
   - Conecta tu cuenta de GitHub y selecciona el repositorio de tu proyecto.
   - Render detectar√° autom√°ticamente el archivo `render.yaml` y usar√° la configuraci√≥n para desplegar tu aplicaci√≥n.

### 6. Verificar la persistencia

1. **Prueba tu aplicaci√≥n**: Despu√©s de desplegar tu aplicaci√≥n, realiza algunas operaciones para modificar los datos en la base de datos.

2. **Reinicia la aplicaci√≥n**: Puedes reiniciar la aplicaci√≥n desde el panel de Render o realizando un nuevo despliegue.

3. **Verifica que los datos persisten**: Aseg√∫rate de que los datos modificados sigan estando presentes despu√©s del reinicio o nuevo despliegue.

Con esta configuraci√≥n, deber√≠as poder mantener la persistencia de tus datos en Render.


function validateAndSaveSettings() {
    var userName = $("#userName").val().trim();
    var userEmail = $("#userEmail").val().trim();
    var emailDomain = "@tu-compania.com"; // Reemplaza con la extensi√≥n de correo de tu compa√±√≠a

    var valid = true;

    if (!userName) {
        $("#nameError").show();
        valid = false;
    } else {
        $("#nameError").hide();
    }

    if (!userEmail.endsWith(emailDomain)) {
        $("#emailError").show();
        valid = false;
    } else {
        $("#emailError").hide();
    }

    if (valid) {
        // Guardar el nombre y el correo si son v√°lidos
        localStorage.setItem('userName', userName);
        localStorage.setItem('userEmail', userEmail);

        // Mostrar el mensaje de bienvenida
        var initialGreeting = `Hola ${userName}, soy <b>Ethos</b> tu asistente Virtual de consultas y dilemas üë®‚Äçüíª. ¬øEn qu√© puedo ayudarte? 
        <button class='option-button' onclick="sendMessage('Tengo una consulta')">Tengo una Consulta</button> 
        <button class='option-button' onclick="sendMessage('Tengo un dilema')">Tengo un Dilema</button> 
        <button class='option-button' onclick=\"sendMessage('Quiero consultar la normativa')\">Quiero consultar la normativa</button> 
        <button class='option-button' onclick=\"sendMessage('Quiero recordar algunas definiciones')\">Quiero recordar algunas definiciones</button> 
        <button class='option-button' onclick="sendMessage('Con quienes me puedo contactar')">Con quienes me puedo contactar</button>`;
        appendMessage('Bot', initialGreeting);

        // Cerrar el modal
        closeSettings();
    }
}

$(document).ready(function() {
    // Mostrar modal de configuraci√≥n al cargar la p√°gina
    openSettings();

    $("#userInput").keypress(function(event) {
        if (event.which == 13) {
            event.preventDefault();
            sendMessage();
        }
    });
});

from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
import datetime
import re
from flask import Flask, send_file

app = Flask(__name__)

chat_history = [("User1", "Este es un mensaje muy largo que puede necesitar ser dividido en m√∫ltiples l√≠neas en el PDF para asegurarse de que no se corta y se muestra correctamente." * 5)]

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=50, leftMargin=50,
                            topMargin=80, bottomMargin=50)  # M√°rgenes ajustados

    Story = []
    styles = getSampleStyleSheet()
    
    # Estilos personalizados
    normal_style = styles["Normal"]
    company_style = ParagraphStyle(
        'CompanyStyle',
        parent=normal_style,
        fontName='Helvetica-Bold',
        fontSize=14,
        leading=18,
        textColor="#4B4B4B",
        spaceAfter=10,
    )
    
    message_style = ParagraphStyle(
        'MessageStyle',
        parent=normal_style,
        fontName='Helvetica',
        fontSize=12,
        leading=14,
        textColor="#333333",
        spaceAfter=12,
    )

    disclaimer_style = ParagraphStyle(
        'DisclaimerStyle',
        parent=normal_style,
        fontName='Helvetica-Oblique',
        fontSize=10,
        leading=12,
        textColor="#777777",
        spaceAfter=20,
    )

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    # Encabezado con logo y detalles de la compa√±√≠a
    company_logo = "static/images/logo.png"  # Ruta al logo de la empresa
    if company_logo:
        im = Image(company_logo, 2*inch, 2*inch)
        Story.append(im)
    
    company_info = Paragraph("Nombre de la Empresa<br/>Direcci√≥n de la Empresa<br/>Tel√©fono: (123) 456-7890<br/>Email: contacto@empresa.com", company_style)
    Story.append(company_info)
    Story.append(Spacer(1, 12))

    # A√±adir el disclaimer
    disclaimer_text = "Las respuestas dadas por el bot son orientativas frente a aspectos com√∫nmente consultados. Para una respuesta con mayor detalle a un caso espec√≠fico, consulte a trav√©s de la l√≠nea √©tica."
    disclaimer = Paragraph(disclaimer_text, disclaimer_style)
    Story.append(disclaimer)
    Story.append(Spacer(1, 20))

    # A√±adir los mensajes del chat
    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"<b>{sender}:</b> {clean_message}"
        p = Paragraph(text, message_style)
        Story.append(p)

    # A√±adir pie de p√°gina personalizado
    def header_footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Helvetica", 12)
        header_text = "Historia del Chat"
        date_text = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        page_text = f"P√°gina {doc.page}"

        canvas.drawString(50, 750, header_text)
        canvas.drawString(450, 750, date_text)
        canvas.setFont("Helvetica", 10)
        canvas.drawString(50, 30, page_text)
        canvas.drawString(50, 15, "Confidencial - Solo para uso interno")
        canvas.restoreState()

    doc.build(Story, onFirstPage=header_footer, onLaterPages=header_footer)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")

if __name__ == "__main__":
    app.run(debug=True)

Para darle m√°s personalidad y profesionalismo a tu documento PDF, puedes considerar varios aspectos:

1. **Dise√±o del encabezado y pie de p√°gina:** A√±adir logos, informaci√≥n de la empresa, y estilizar el texto.
2. **Estilo de texto:** Usar diferentes estilos de p√°rrafo, fuentes y colores.
3. **Formato del contenido:** Organizar el contenido en secciones claras y a√±adir elementos visuales como l√≠neas divisorias.
4. **Marca de agua o fondo:** A√±adir una marca de agua o un fondo que refleje la identidad de la compa√±√≠a.

A continuaci√≥n, te presento un ejemplo de c√≥mo puedes lograr esto utilizando `reportlab.platypus` y algunas de sus funcionalidades avanzadas:

```python
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
import datetime
import re
from flask import Flask, send_file

app = Flask(__name__)

chat_history = [("User1", "Este es un mensaje muy largo que puede necesitar ser dividido en m√∫ltiples l√≠neas en el PDF para asegurarse de que no se corta y se muestra correctamente." * 5)]

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=50, leftMargin=50,
                            topMargin=80, bottomMargin=50)  # M√°rgenes ajustados

    Story = []
    styles = getSampleStyleSheet()
    
    # Estilos personalizados
    normal_style = styles["Normal"]
    company_style = ParagraphStyle(
        'CompanyStyle',
        parent=normal_style,
        fontName='Helvetica-Bold',
        fontSize=14,
        leading=18,
        textColor="#4B4B4B",
        spaceAfter=10,
    )
    
    message_style = ParagraphStyle(
        'MessageStyle',
        parent=normal_style,
        fontName='Helvetica',
        fontSize=12,
        leading=14,
        textColor="#333333",
        spaceAfter=12,
    )

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    # Encabezado con logo y detalles de la compa√±√≠a
    company_logo = "path_to_company_logo.png"  # Ruta al logo de la empresa
    if company_logo:
        im = Image(company_logo, 2*inch, 2*inch)
        Story.append(im)
    
    company_info = Paragraph("Nombre de la Empresa<br/>Direcci√≥n de la Empresa<br/>Tel√©fono: (123) 456-7890<br/>Email: contacto@empresa.com", company_style)
    Story.append(company_info)
    Story.append(Spacer(1, 20))

    # A√±adir los mensajes del chat
    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"<b>{sender}:</b> {clean_message}"
        p = Paragraph(text, message_style)
        Story.append(p)

    # A√±adir pie de p√°gina personalizado
    def header_footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Helvetica", 12)
        header_text = "Historia del Chat"
        date_text = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        page_text = f"P√°gina {doc.page}"

        canvas.drawString(50, 750, header_text)
        canvas.drawString(450, 750, date_text)
        canvas.setFont("Helvetica", 10)
        canvas.drawString(50, 30, page_text)
        canvas.drawString(50, 15, "Confidencial - Solo para uso interno")
        canvas.restoreState()

    doc.build(Story, onFirstPage=header_footer, onLaterPages=header_footer)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")

if __name__ == "__main__":
    app.run(debug=True)
```

### Mejoras aplicadas:
1. **Encabezado y pie de p√°gina:** A√±ad√≠ un encabezado con un logo y detalles de la empresa, y un pie de p√°gina con un mensaje de confidencialidad.
2. **Estilos personalizados:** Utilic√© `ParagraphStyle` para definir estilos de texto personalizados para la informaci√≥n de la empresa y los mensajes.
3. **Imagen de logo:** A√±ad√≠ la opci√≥n de incluir el logo de la empresa al inicio del documento.

### Recomendaciones adicionales:
1. **Im√°genes y Gr√°ficos:** Considera a√±adir gr√°ficos, diagramas o ilustraciones que puedan mejorar la presentaci√≥n del documento.
2. **Tablas:** Si es necesario, usa tablas para estructurar la informaci√≥n de manera m√°s clara.
3. **Colores y Tipograf√≠a:** Usa una paleta de colores y tipograf√≠a consistente con la identidad de la empresa para reforzar el branding.

Aseg√∫rate de ajustar las rutas a los archivos de imagen y otros detalles espec√≠ficos de tu empresa para personalizar completamente el documento.

Para resolver el problema de texto que se corta y sobresale del margen inferior, podemos revisar la l√≥gica de paginaci√≥n y manejo del texto en el documento PDF. Asegur√©monos de que cuando se detecta que el texto est√° cerca del margen inferior, se cree una nueva p√°gina y el texto contin√∫e correctamente desde el punto en que se qued√≥.

Vamos a utilizar `reportlab.platypus` que ofrece mejores herramientas para manejar flujos de texto y paginaci√≥n. Con `Paragraph` y `SimpleDocTemplate`, podemos manejar mejor los saltos de p√°gina y los m√°rgenes.

Aqu√≠ tienes una versi√≥n mejorada utilizando `reportlab.platypus`:

```python
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.units import inch
import datetime
import re
from flask import Flask, send_file

app = Flask(__name__)

chat_history = [("User1", "Este es un mensaje muy largo que puede necesitar ser dividido en m√∫ltiples l√≠neas en el PDF para asegurarse de que no se corta y se muestra correctamente." * 5)]

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=50, leftMargin=50,
                            topMargin=50, bottomMargin=50)

    Story = []
    styles = getSampleStyleSheet()
    style = styles["Normal"]

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        p = Paragraph(text, style)
        Story.append(p)
        Story.append(Spacer(1, 12))  # Espacio entre mensajes

    # A√±adir encabezado y pie de p√°gina personalizado
    def header_footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Helvetica", 12)
        header_text = "Historia del Chat"
        date_text = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        page_text = f"P√°gina {doc.page}"

        canvas.drawString(50, 770, header_text)
        canvas.drawString(450, 770, date_text)
        canvas.setFont("Helvetica", 10)
        canvas.drawString(50, 30, page_text)
        canvas.restoreState()

    doc.build(Story, onFirstPage=header_footer, onLaterPages=header_footer)
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")

if __name__ == "__main__":
    app.run(debug=True)
```

### Desglose de la soluci√≥n:
1. **Uso de `SimpleDocTemplate`:** Esto permite manejar mejor la creaci√≥n de documentos con m√∫ltiples p√°ginas.
2. **Manejo de texto con `Paragraph` y `Spacer`:** `Paragraph` se encarga de la distribuci√≥n de texto, mientras que `Spacer` a√±ade espacio entre los mensajes.
3. **Encabezado y pie de p√°gina:** La funci√≥n `header_footer` agrega un encabezado y un pie de p√°gina personalizado en cada p√°gina.

Esta soluci√≥n debe garantizar que el texto no se corte y que los m√°rgenes se respeten correctamente en el PDF generado.

Para asegurar que el texto se maneje correctamente cuando llega al final de la p√°gina y respetar el margen inferior, debemos ajustar la l√≥gica que maneja la inserci√≥n del texto y la creaci√≥n de nuevas p√°ginas.

Aqu√≠ tienes una versi√≥n corregida y detallada:

```python
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import utils
from reportlab.pdfgen import canvas
import datetime
import re
from flask import Flask, send_file

app = Flask(__name__)

chat_history = [("User1", "Este es un mensaje muy largo que puede necesitar ser dividido en m√∫ltiples l√≠neas en el PDF para asegurarse de que no se corta y se muestra correctamente." * 5)]

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Definir m√°rgenes
    margin_left = 50
    margin_right = 50
    margin_top = 50
    margin_bottom = 50
    max_width = width - margin_left - margin_right
    page_count = 1

    # Definir funciones para encabezado y pie de p√°gina
    def draw_header_footer(canvas, page_count):
        canvas.setFont("Helvetica", 12)
        canvas.drawString(margin_left, height - margin_top + 10, "Historia del Chat")
        canvas.drawString(width - margin_right - 100, height - margin_top + 10, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        canvas.setFont("Helvetica", 10)
        canvas.drawString(margin_left, margin_bottom - 30, f"P√°gina {page_count}")

    # Iniciar la primera p√°gina
    draw_header_footer(c, page_count)
    y = height - margin_top - 20
    c.setFont("Helvetica", 12)
    
    def draw_text(text_object, text, max_width, canvas, page_count):
        lines = utils.simpleSplit(text, text_object._fontname, text_object._fontsize, max_width)
        for line in lines:
            if text_object.getY() < margin_bottom:
                canvas.drawText(text_object)
                canvas.showPage()
                page_count += 1
                draw_header_footer(canvas, page_count)
                text_object = canvas.beginText(margin_left, height - margin_top - 20)
                text_object.setFont("Helvetica", 12)
            text_object.textLine(line)
        return text_object, page_count

    text_object = c.beginText(margin_left, y)
    text_object.setFont("Helvetica", 12)

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        text_object, page_count = draw_text(text_object, text, max_width, c, page_count)
        text_object.moveCursor(0, 14)

    c.drawText(text_object)
    c.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")

if __name__ == "__main__":
    app.run(debug=True)
```

### Cambios realizados:
1. **Reinicio de `text_object` al cambiar de p√°gina:** Ahora la funci√≥n `draw_text` devuelve `text_object` y `page_count`, permitiendo actualizar estos valores en cada iteraci√≥n.
2. **M√°rgenes:** Asegurarse de que el texto respete los m√°rgenes definidos.

Con estas modificaciones, el texto deber√≠a manejarse correctamente al final de la p√°gina y respetar el margen inferior.

El error se debe a que el objeto `canvas.Canvas` de ReportLab no tiene el atributo `page`. Para solucionar esto, necesitamos mantener un contador de p√°ginas manualmente.

Aqu√≠ tienes la versi√≥n corregida del c√≥digo:

```python
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import utils
from reportlab.pdfgen import canvas
import datetime
import re
from flask import Flask, send_file

app = Flask(__name__)

chat_history = [("User1", "Este es un mensaje muy largo que puede necesitar ser dividido en m√∫ltiples l√≠neas en el PDF para asegurarse de que no se corta y se muestra correctamente." * 5)]

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Definir m√°rgenes
    margin_left = 50
    margin_right = 50
    margin_top = 50
    margin_bottom = 50
    max_width = width - margin_left - margin_right
    page_count = 1

    # Definir funciones para encabezado y pie de p√°gina
    def draw_header_footer(canvas, page_count):
        canvas.setFont("Helvetica", 12)
        canvas.drawString(margin_left, height - margin_top + 10, "Historia del Chat")
        canvas.drawString(width - margin_right - 100, height - margin_top + 10, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        canvas.setFont("Helvetica", 10)
        canvas.drawString(margin_left, margin_bottom - 30, f"P√°gina {page_count}")

    # Iniciar la primera p√°gina
    draw_header_footer(c, page_count)
    y = height - margin_top - 20
    c.setFont("Helvetica", 12)
    
    def draw_text(text_object, text, max_width):
        nonlocal page_count
        lines = utils.simpleSplit(text, text_object._fontname, text_object._fontsize, max_width)
        for line in lines:
            if text_object.getY() < margin_bottom:
                c.drawText(text_object)
                c.showPage()
                page_count += 1
                draw_header_footer(c, page_count)
                text_object = c.beginText(margin_left, height - margin_top - 20)
                text_object.setFont("Helvetica", 12)
            text_object.textLine(line)
        return text_object

    text_object = c.beginText(margin_left, y)
    text_object.setFont("Helvetica", 12)

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        text_object = draw_text(text_object, text, max_width)
        text_object.moveCursor(0, 14)

    c.drawText(text_object)
    c.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")

if __name__ == "__main__":
    app.run(debug=True)
```

### Cambios realizados:
1. **Contador de p√°ginas:** A√±ad√≠ una variable `page_count` para llevar el control manual del n√∫mero de p√°ginas.
2. **Encabezado y pie de p√°gina:** Ahora se pasa `page_count` a la funci√≥n `draw_header_footer` para actualizar el n√∫mero de p√°gina.

Con estos ajustes, deber√≠as poder generar el PDF sin cortar el texto y con encabezados y pies de p√°gina correctamente numerados.

Para resolver el problema del texto cortado y a√±adir m√°rgenes, pies de p√°gina y encabezados, puedes mejorar tu funci√≥n de la siguiente manera:

1. **M√°rgenes:** Ajustar los m√°rgenes del documento.
2. **Paginaci√≥n:** Asegurarse de que el texto que no cabe en una p√°gina se contin√∫e en la siguiente.
3. **Encabezado y pie de p√°gina:** A√±adir encabezado y pie de p√°gina personalizados.

Aqu√≠ tienes una versi√≥n mejorada:

```python
from io import BytesIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import utils
from reportlab.pdfgen import canvas
import datetime
import re
from flask import send_file

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Definir m√°rgenes
    margin_left = 50
    margin_right = 50
    margin_top = 50
    margin_bottom = 50
    max_width = width - margin_left - margin_right

    # Definir funciones para encabezado y pie de p√°gina
    def draw_header_footer(canvas, doc):
        canvas.setFont("Helvetica", 12)
        canvas.drawString(margin_left, height - margin_top + 10, "Historia del Chat")
        canvas.drawString(width - margin_right - 100, height - margin_top + 10, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        canvas.setFont("Helvetica", 10)
        canvas.drawString(margin_left, margin_bottom - 30, f"P√°gina {doc.page}")

    # Iniciar la primera p√°gina
    draw_header_footer(c, c)
    y = height - margin_top - 20
    c.setFont("Helvetica", 12)
    
    def draw_text(text_object, text, max_width):
        lines = utils.simpleSplit(text, text_object._fontname, text_object._fontsize, max_width)
        for line in lines:
            if text_object.getY() < margin_bottom:
                c.drawText(text_object)
                c.showPage()
                draw_header_footer(c, c)
                text_object = c.beginText(margin_left, height - margin_top - 20)
                text_object.setFont("Helvetica", 12)
            text_object.textLine(line)
        return text_object

    text_object = c.beginText(margin_left, y)
    text_object.setFont("Helvetica", 12)

    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)

    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        text_object = draw_text(text_object, text, max_width)
        text_object.moveCursor(0, 14)

    c.drawText(text_object)
    c.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")
```

### Desglose de la soluci√≥n:
1. **M√°rgenes:** He definido m√°rgenes ajustables (`margin_left`, `margin_right`, `margin_top`, `margin_bottom`) para controlar la posici√≥n del texto en la p√°gina.
2. **Paginaci√≥n:** La funci√≥n `draw_text` ahora verifica si el cursor est√° cerca del margen inferior y, si es as√≠, crea una nueva p√°gina y contin√∫a el texto.
3. **Encabezado y pie de p√°gina:** La funci√≥n `draw_header_footer` a√±ade un encabezado y un pie de p√°gina personalizados en cada p√°gina.

Con estas modificaciones, el PDF deber√≠a gestionar correctamente los textos largos y mantener un formato coherente y estilizado en todas las p√°ginas.

@app.route('/download')
def download_chat():
    global chat_history
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    c.setFont("Helvetica", 12)
    c.drawString(200, height - 40, "Historia del Chat")
    c.drawString(200, height - 60, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    y = height - 100
    max_width = width - 60  # Reduce the width to avoid cutting off the text
    def draw_text(text_object, text, max_width):
        lines = utils.simpleSplit(text, text_object._fontname, text_object._fontsize, max_width)
        for line in lines:
            text_object.textLine(line)
    text_object = c.beginText(30, y)
    text_object.setFont("Helvetica", 12)
    def clean_html(text):
        clean = re.compile('<.*?>')
        return re.sub(clean, ' / ', text)
    for sender, message in chat_history:
        clean_message = clean_html(message).replace('\n', ' ')
        text = f"{sender}: {clean_message}"
        if text_object.getY() < 40:
            c.drawText(text_object)
            c.showPage()
            text_object = c.beginText(30, height - 40)
            text_object.setFont("Helvetica", 12)
        draw_text(text_object, text, max_width)
        text_object.moveCursor(0, 14)
    c.drawText(text_object)
    c.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="chat_history.pdf")


# Gr√°fico de percentiles
    plt.figure(figsize=(10, 6))
    sns.lineplot(x=np.arange(0, 101), y=percentiles)
    plt.title('Percentiles del % LRC')
    plt.xlabel('Percentiles')
    plt.ylabel('% LRC')
    plt.axhline(y=percentil_90,color='red')

\lrc_env\Lib\site-packages\scipy\stats\_distn_infrastructure.py", line 1096, in rvs  
    raise ValueError(message)
ValueError: Domain error in arguments. The `scale` parameter must be positive for all distributions, and many distributions have restrictions on shape parameters. Please see the `scipy.stats.triang` documentation for details.

Hola quiero hacer una aplicacion en python, pero tengo el siguiente codigo en R, ayudame con lo siguiente:
1. la idea es que desde la aplicaci√≥n se pueda cargar el archivo excel llamado Riesgos.xlsx, solcite el n√∫mero de expuestos y este valor por defecto tenga el valor 1, solicite el valor del presupuesto.
2. tambien debe solicitar como entrada el factor de riesgos (factor_riesgo), factor de gastos (factor_gastos), factor legal (factor_legal), estos factores deben ser porcentajes, pero al momento de utilizarlos deben estar sumados con el 100% es decir si ingresan %5 para el factor de riesgos, el factor_riesgo ser√° 1.05.
3. La aplicaci√≥n debe utilizar simulaci√≥n montecarlo de una distribuci√≥n triangular para determinar la suma asegurada o limite de responsabilidad a partir de un escenario pesimista, probable y optimista (tal como se hizo en R); entonces se debe solicitar tambien el numero de simulaciones (por defecto 10000) y tambien solicitar la semilla
4. quiero que la aplicaci√≥n muestre los valores mas relevantes (valor esperado, mediana...etc), muestre la curva de percentiles indicando los valores de sumas aseguradas para cada percentil y que estos se muestren de manera dinamica.
5. Adicionalmente se hace un an√°lisis de sensibilidad a partir de modificaciones de los tre factores de riesgo, gastos y legal, dise√±a una opcion en la que esta posibilidad se pueda visualizar en otra ventaja u hoja, yo hice un grafico en plotly para mostrar en 3d las variaciones de la suma asegurada a partir de las combinaciones de los factores.
6. Quiero que analices este codigo y lo reinterprtes en python, utiliza flask, y diferentes paginas html para que el dise√±o, resultados y formularios se vean de manera profesional y util.
7. al final poder descargar un pdf con los resultados mas importantes, curva de percentiles, numero de simulaciones hechas, semilla utilizada, un reporte ejecutivo.

if(!require(triangle)) install.packages("triangle", dependencies=TRUE)
if(!require(ggplot2)) install.packages("ggplot2", dependencies=TRUE)
library(triangle)
library(ggplot2)
library('xlsx')
library('writexl')
library("readxl")
library(dplyr)
# Establecer la semilla para la reproducibilidad
set.seed(12345)
# Definir par√°metros para cada cobertura
# coberturas <- list(
#   list(P_min = 0.01, P_esp = 0.05, P_max = 0.10, I_min = 10000, I_prob = 50000, I_max = 100000,Frecuencia=2),
#   list(P_min = 0.02, P_esp = 0.06, P_max = 0.12, I_min = 20000, I_prob = 60000, I_max = 120000,Frecuencia=1),
#   list(P_min = 0.03, P_esp = 0.07, P_max = 0.14, I_min = 30000, I_prob = 70000, I_max = 140000,Frecuencia=3),
#   list(P_min = 0.04, P_esp = 0.08, P_max = 0.16, I_min = 40000, I_prob = 80000, I_max = 160000,Frecuencia=2),
#   list(P_min = 0.05, P_esp = 0.09, P_max = 0.18, I_min = 50000, I_prob = 90000, I_max = 180000,Frecuencia=4)
# )

setwd('/Users/E0305878/OneDrive - Ecopetrol S.A/Documentos/Proyectos Analitica/Limite_Responsabilidad')

coberturas_df <- read_excel("Riesgos.xlsx")
coberturas_df <- coberturas_df %>% dplyr::select(colnames(coberturas_df)[2:8])
coberturas<-apply(coberturas_df,1,as.list)

# N√∫mero de expuestos
num_expuestos <- 1
Presupuesto<-1000000
# N√∫mero de simulaciones
n_sim <- 10000
# Factores adicionales
factor_riesgo <- 1.2  # Por ejemplo, un 20% adicional por riesgo
factor_gastos <- 1.1  # Por ejemplo, un 10% adicional por gastos
factor_legal <- 1.05  # Por ejemplo, un 5% adicional por implicaciones legales
# Funci√≥n para generar sumas aseguradas por cobertura
generar_sumas_aseguradas <- function(cobertura) {
  prob_sim <- rtriangle(n_sim, cobertura$P_min, cobertura$P_max, cobertura$P_esp)
  impact_sim <- rtriangle(n_sim, cobertura$I_min*cobertura$Frecuencia, cobertura$I_max*cobertura$Frecuencia, cobertura$I_esp*cobertura$Frecuencia)
  return(prob_sim * impact_sim)
}
# Generar sumas aseguradas para cada cobertura y sumar
suma_asegurada_total <- rowSums(sapply(coberturas, generar_sumas_aseguradas))
# Multiplicar por el n√∫mero de expuestos
suma_asegurada_final <- suma_asegurada_total * num_expuestos
# Aplicar factores adicionales
suma_asegurada_ajustada <- suma_asegurada_final * factor_riesgo * factor_gastos * factor_legal
# Generar percentiles
percentiles <- quantile(suma_asegurada_ajustada, probs = seq(0, 1, 0.01))
# An√°lisis adicional
mean_suma_asegurada <- mean(suma_asegurada_ajustada)
median_suma_asegurada <- median(suma_asegurada_ajustada)
sd_suma_asegurada <- sd(suma_asegurada_ajustada)
# Percentiles espec√≠ficos para las l√≠neas horizontales
percentil_75 <- quantile(suma_asegurada_ajustada, 0.75)
percentil_90 <- quantile(suma_asegurada_ajustada, 0.90)
# Mostrar resultados de an√°lisis
print(paste("Promedio de la Suma Asegurada Ajustada: ", mean_suma_asegurada))
print(paste("Mediana de la Suma Asegurada Ajustada: ", median_suma_asegurada))
print(paste("Desviaci√≥n Est√°ndar de la Suma Asegurada Ajustada: ", sd_suma_asegurada))
print(paste("Porcentaje aceptable: ", mean_suma_asegurada/Presupuesto))
# Gr√°fica de la distribuci√≥n de la suma asegurada ajustada con l√≠neas verticales y leyenda
ggplot(data.frame(suma_asegurada_ajustada), aes(x=suma_asegurada_ajustada)) +
  geom_histogram(binwidth=1000, fill="blue", color="black", alpha=0.7) +
  geom_vline(aes(xintercept=mean_suma_asegurada), color="red", linetype="dashed", size=1, show.legend=TRUE) +
  #geom_vline(aes(xintercept=median_suma_asegurada), color="green", linetype="dashed", size=1, show.legend=TRUE) +
  labs(title="Distribuci√≥n de la Suma Asegurada Ajustada",
       x="Suma Asegurada Ajustada",
       y="Frecuencia") +
  theme_minimal() +
  theme(legend.position="top") +
  scale_color_manual(name="L√≠neas de Referencia", values=c("Promedio"="red", "Mediana"="green")) +
  guides(color=guide_legend(override.aes=list(linetype=c("dashed", "dashed"), size=c(1, 1))))

# Gr√°fica de los percentiles con l√≠nea horizontal en el percentil 50 (mediana)
percentiles_df <- data.frame(Percentiles = seq(0, 100, 1), Suma_Asegurada = percentiles)
ggplot(percentiles_df, aes(x=Percentiles, y=Suma_Asegurada)) +
  geom_line(color="blue") +
  #geom_hline(aes(yintercept=median_suma_asegurada), color="red", linetype="dashed", size=1, show.legend=TRUE) +
  geom_hline(aes(yintercept=percentil_75), color="green", linetype="dashed", size=1, show.legend=TRUE) +
  geom_hline(aes(yintercept=percentil_90), color="purple", linetype="dashed", size=1, show.legend=TRUE) +
  labs(title="Curva de Percentiles de la Suma Asegurada Ajustada",
       x="Percentil",
       y="Suma Asegurada") +
  theme_minimal() +
  theme(legend.position="top") +
  scale_color_manual(name="L√≠neas de Referencia", values=c("Mediana"="red", "Percentil 25"="green", "Percentil 75"="purple")) +
  guides(color=guide_legend(override.aes=list(linetype=c("dashed", "dashed", "dashed"), size=c(1, 1, 1))))

# Boxplot para visualizar la dispersi√≥n de la suma asegurada ajustada con l√≠nea horizontal en el promedio
ggplot(data.frame(suma_asegurada_ajustada), aes(x="", y=suma_asegurada_ajustada)) +
  geom_boxplot(fill="blue", alpha=0.7) +
  #geom_hline(aes(yintercept=mean_suma_asegurada), color="red", linetype="dashed", size=1, show.legend=TRUE) +
  labs(title="Boxplot de la Suma Asegurada Ajustada",
       y="Suma Asegurada Ajustada") +
  theme_minimal() +
  theme(legend.position="top") +
  scale_color_manual(name="L√≠neas de Referencia", values=c("Promedio"="red")) +
  guides(color=guide_legend(override.aes=list(linetype="dashed", size=1)))

# Analisis sensibilidad de los factores
########################

# Definir rangos para los factores de sensibilidad
factor_riesgo_rango <- seq(1.0, 1.4, by=0.1)
factor_gastos_rango <- seq(1.0, 1.2, by=0.05)
factor_legal_rango <- seq(1.0, 1.1, by=0.02)
# Crear una combinaci√≥n de todos los factores
combinaciones <- expand.grid(factor_riesgo_rango, factor_gastos_rango, factor_legal_rango)
colnames(combinaciones) <- c("FactorRiesgo", "FactorGastos", "FactorLegal")
# Funci√≥n para calcular la suma asegurada ajustada para una combinaci√≥n de factores
calcular_suma_asegurada_ajustada <- function(factor_riesgo, factor_gastos, factor_legal) {
  suma_asegurada_ajustada <- suma_asegurada_final * factor_riesgo * factor_gastos * factor_legal
  mean_suma <- mean(suma_asegurada_ajustada)
  median_suma <- median(suma_asegurada_ajustada)
  sd_suma <- sd(suma_asegurada_ajustada)
  percentiles <- quantile(suma_asegurada_ajustada, probs = c(0.75,0.8,0.9,0.95))
  return(c(mean_suma, median_suma, sd_suma, percentiles[1], percentiles[2],percentiles[3],percentiles[4]))
}


# Aplicar la funci√≥n a cada combinaci√≥n de factores y almacenar los resultados
resultados <- t(apply(combinaciones, 1, function(x) calcular_suma_asegurada_ajustada(x[1], x[2], x[3])))
# A√±adir los resultados al DataFrame de combinaciones
resultados_df <- cbind(combinaciones, resultados)
colnames(resultados_df) <- c("FactorRiesgo", "FactorGastos", "FactorLegal", "Promedio", "Mediana", "DesviacionEstandar", "Percentil_75", "Percentil_80","Percentil_90","Percentil_95")
# Mostrar el DataFrame de resultados
print(resultados_df)

# **Gr√°ficas 3D:** Para una visualizaci√≥n m√°s completa de la relaci√≥n entre los tres factores y los resultados.
library(plotly)
plot_ly(data = resultados_df, x = ~FactorRiesgo, y = ~FactorGastos, z = ~Promedio, color = ~FactorLegal, colors = colorRamp(c("blue", "red")),
        type = "scatter3d", mode = "markers") %>%
  layout(title = "An√°lisis de Sensibilidad 3D del Promedio",
         scene = list(xaxis = list(title = "Factor Riesgo"),
                      yaxis = list(title = "Factor Gastos"),
                      zaxis = list(title = "Promedio")))
