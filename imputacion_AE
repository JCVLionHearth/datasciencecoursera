> # Limpiamos texto del objeto del contrato
> contratacion_clean <- contratacion_ciiu_riesgo %>%
+   mutate(
+     objeto_limpio = str_to_upper(str_trim(Objeto_contrato))
+   )
> # Imputaci√≥n textual usando distancia de Jaro-Winkler
> imputaciones_texto <- contratacion_clean %>%
+   filter(is.na(ciiu_final)) %>%
+   mutate(id_fila = row_number()) %>%
+   crossing(Riesgo_AE) %>%
+   mutate(distancia = stringdist(objeto_limpio, Descripci√≥n, method = "jw")) %>%
+   group_by(id_fila) %>%
+   slice_min(order_by = distancia, n = 1) %>%  # Toma la mejor coincidencia
+   ungroup() %>%
+   filter(distancia < 0.20) %>%  # Umbral ajustable: 0.20 = 80% de similitud
+   select(id_fila, categoria_imputada = `Valor Riesgo`)
Error in `expand_grid()`:
! Names must be unique.
‚úñ These names are duplicated:
  * "Riesgo_AE" at locations 13 and 17.
‚Ñπ Use argument `.name_repair` to specify repair strategy.
Run `rlang::last_trace()` to see where the error occurred.



S√≠, absolutamente. Cuando el 90% de los registros no cruzan por NIT y por tanto no tienen c√≥digo CIIU, una imputaci√≥n basada en el texto del ‚ÄúObjeto del contrato‚Äù y/o la ‚ÄúCategor√≠a del contrato‚Äù es una muy buena alternativa. Te propongo una estrategia factible y automatizable en R, sin necesidad de usar deep learning, pero con l√≥gica sem√°ntica y categ√≥rica √∫til.

‚∏ª

‚úÖ ESTRATEGIA: Imputar Descripci√≥n y Categor√≠a de Riesgo_AE con NLP ligero

Enfoque:
	1.	Usar la columna Objeto_contrato (texto libre) para buscar coincidencias aproximadas con la columna Descripci√≥n del archivo Riesgo_AE.
	2.	Luego imputar la Categor√≠a correspondiente (ej. ‚ÄúAlto‚Äù, ‚ÄúMedio‚Äù, ‚ÄúBajo‚Äù).
	3.	Si no hay coincidencia fuerte, usar la columna Categoria_contrato (m√°s estructurada) para empatar con alguna categor√≠a del riesgo.

‚∏ª

‚úÖ IMPLEMENTACI√ìN EN R

library(stringdist)
library(tidyverse)

# Asumimos que Riesgo_AE ya est√° cargado as√≠:
# Columnas: Clase (num√©rico), Descripci√≥n (texto), Categor√≠a (riesgo cualitativo)
Riesgo_AE <- read_excel(file.path(ruta_riesgos, "Riesgo_actividad_economica.xlsx")) %>%
  clean_names() %>%
  select(descripcion, categoria) %>%
  mutate(descripcion = str_to_upper(str_trim(descripcion)))

# Limpiamos texto del objeto del contrato
contratacion_clean <- contratacion_ciiu_riesgo %>%
  mutate(
    objeto_limpio = str_to_upper(str_trim(Objeto_contrato))
  )

# Imputaci√≥n textual usando distancia de Jaro-Winkler
imputaciones_texto <- contratacion_clean %>%
  filter(is.na(ciiu_final)) %>%
  mutate(id_fila = row_number()) %>%
  crossing(Riesgo_AE) %>%
  mutate(distancia = stringdist(objeto_limpio, descripcion, method = "jw")) %>%
  group_by(id_fila) %>%
  slice_min(order_by = distancia, n = 1) %>%  # Toma la mejor coincidencia
  ungroup() %>%
  filter(distancia < 0.20) %>%  # Umbral ajustable: 0.20 = 80% de similitud
  select(id_fila, categoria_imputada = categoria)

# Asignamos la categor√≠a de riesgo donde aplique
contratacion_imputada <- contratacion_clean %>%
  mutate(id_fila = row_number()) %>%
  left_join(imputaciones_texto, by = "id_fila") %>%
  mutate(
    Categoria_RAE = coalesce(Categoria_RAE, categoria_imputada),
    Riesgo_AE = case_when(
      is.na(Riesgo_AE) & Categoria_RAE == "ALTO" ~ 3,
      is.na(Riesgo_AE) & Categoria_RAE == "MEDIO" ~ 2,
      is.na(Riesgo_AE) & Categoria_RAE == "BAJO" ~ 1,
      TRUE ~ Riesgo_AE
    )
  ) %>%
  select(-id_fila, -categoria_imputada)


‚∏ª

‚úÖ Explicaci√≥n:
	‚Ä¢	Se usa stringdist con m√©todo "jw" (Jaro-Winkler), √∫til para texto corto y ruidoso.
	‚Ä¢	Se permite empatar cualquier texto del objeto contractual con alguna descripci√≥n de actividad econ√≥mica.
	‚Ä¢	Se fija un umbral de similitud, que puedes ajustar:
	‚Ä¢	0.15 ‚Üí m√°s estricto (solo empata si es muy similar)
	‚Ä¢	0.25 ‚Üí m√°s permisivo (puede haber errores)

‚∏ª

üß† Alternativas avanzadas:

Si deseas mejorar a√∫n m√°s la imputaci√≥n textual:

Opci√≥n A: TF-IDF + Cosine Similarity (m√°s sem√°ntico que stringdist)
	‚Ä¢	Usas tm o text2vec para vectorizar Objeto_contrato y Descripci√≥n
	‚Ä¢	Calculas similitud de coseno
	‚Ä¢	Empatas la descripci√≥n m√°s parecida

Opci√≥n B: Embeddings tipo SBERT en Python
	‚Ä¢	Usar sentence-transformers y comparar con cosine_similarity

‚∏ª

¬øQuieres que te prepare una versi√≥n con TF-IDF + cosine o te basta con esta por ahora? Tambi√©n podemos incluir como √∫ltima alternativa empatar por Categoria_contrato con una categor√≠a fija de riesgo si todo lo dem√°s falla.


hay varios registros el 90% de estos que no cruzaron con algun nit, por lo que no tienen codigo ciiu, si en el listado de Riesgo_AE hay dos campos descripci√≥n y categor√≠a, los cuales son textos, podria hacer una imputaci√≥n adicional de contrataci√≥n_ciiu_riesgo por medio del texto o descripcion del objeto del contrato y categoria del contrato?


Perfecto, con esa aclaraci√≥n, haremos lo siguiente:

‚úÖ Objetivo resumido:

Imputar el CIIU faltante en contratacion_suscrita_df a trav√©s de tres pasos:
	1.	Cruces por NIT con lfb1_final y listadoCIIU para obtener ciiucode y ciiu_ppal.
	2.	Imputaci√≥n del CIIU faltante por la modalidad predominante (moda/Pareto) considerando:
	‚Ä¢	Subcategor√≠a del contrato
	‚Ä¢	Categor√≠a
	‚Ä¢	Objeto del contrato
	3.	Asociar el riesgo de actividad econ√≥mica (RAE) desde Riesgo_AE a trav√©s del c√≥digo CIIU.
	4.	Agregar una agregaci√≥n final por:
	‚Ä¢	Nit_Proveedor, Tipo_Industria, Subcategoria_contrato
	‚Ä¢	Fecha m√°xima
	‚Ä¢	√önico CIIU
	‚Ä¢	Riesgo m√°ximo

‚∏ª

‚úÖ C√≥digo completo en R

library(dplyr)
library(stringr)
library(janitor)
library(lubridate)
library(readxl)
library(tidyr)
library(purrr)
library(forcats)

# Limpieza y estandarizaci√≥n
contratacion_suscrita_df <- contratacion_suscrita %>%
  mutate(
    Nombre_Proveedor = str_trim(str_to_upper(`Nombre Proveedor`)),
    Nit_Proveedor = str_trim(str_to_upper(`Nit Proveedor`)),
    Nemonico_Proveedor = str_trim(str_to_upper(`Nemonico Proveedor Mdte 500`)),
    Tipo_Industria = str_trim(str_to_upper(`Tipo De Industria`)),
    Fecha_Suscripcion = ymd(`Fecha Final`),
    Objeto_contrato = str_trim(str_to_upper(`Objeto Contrato`)),
    Categoria_contrato = str_trim(str_to_upper(`Categor√≠a Nombre`)),
    Subcategoria_contrato = str_trim(str_to_upper(`Subcategoria Contrato Nombre`)),
    Numero_contrato_central = str_trim(str_to_upper(`Contrato Central`))
  )

lfb1_final <- LFB1 %>%
  clean_names() %>%
  mutate(across(everything(), ~ toupper(stri_trans_general(str_trim(as.character(.)), "Latin-ASCII")))) %>%
  select(lifnr, ciiucode) %>%
  mutate(ciiucode = as.numeric(ciiucode))

listadoCIIU <- listadoCIIU %>%
  clean_names() %>%
  mutate(nit = str_trim(toupper(nit)))

# Paso 1: Cruces con fuentes CIIU
contratacion_ciiu <- contratacion_suscrita_df %>%
  # Cruce 1: con LFB1
  left_join(lfb1_final, by = c("Nit_Proveedor" = "lifnr")) %>%
  rename(ciiu_codigo_lfb1 = ciiucode) %>%
  
  # Cruce 2: con listadoCIIU
  left_join(listadoCIIU, by = c("Nit_Proveedor" = "nit")) %>%
  rename(ciiu_codigo_listado = ciiu_ppal) %>%
  
  # Selecci√≥n final de CIIU: prioriza LFB1, luego listadoCIIU
  mutate(
    ciiu_final = coalesce(ciiu_codigo_lfb1, as.numeric(ciiu_codigo_listado))
  )

# Paso 2: Imputaci√≥n de CIIU faltante por moda/Pareto

# C√°lculo de moda CIIU por categor√≠a/subcategor√≠a/objeto
moda_ciiu <- contratacion_ciiu %>%
  filter(!is.na(ciiu_final)) %>%
  count(Categoria_contrato, Subcategoria_contrato, Objeto_contrato, ciiu_final, sort = TRUE) %>%
  group_by(Categoria_contrato, Subcategoria_contrato, Objeto_contrato) %>%
  slice_max(order_by = n, n = 1, with_ties = FALSE) %>%
  ungroup()

# Imputaci√≥n de valores NA
contratacion_ciiu_imputado <- contratacion_ciiu %>%
  left_join(moda_ciiu, by = c("Categoria_contrato", "Subcategoria_contrato", "Objeto_contrato"), suffix = c("", "_moda")) %>%
  mutate(
    ciiu_final = if_else(is.na(ciiu_final), ciiu_final_moda, ciiu_final)
  ) %>%
  select(-ciiu_codigo_lfb1, -ciiu_codigo_listado, -ciiu_final_moda)

# Paso 3: Riesgo AE
Riesgo_AE <- read_excel(file.path(ruta_riesgos, "Riesgo_actividad_economica.xlsx")) %>%
  rename(ciiu_final = Clase) %>%
  select(ciiu_final, `Valor Riesgo`, Categor√≠a) %>%
  mutate(ciiu_final = as.numeric(ciiu_final))

contratacion_ciiu_riesgo <- contratacion_ciiu_imputado %>%
  left_join(Riesgo_AE, by = "ciiu_final") %>%
  rename(Riesgo_AE = `Valor Riesgo`, Categoria_RAE = Categor√≠a)

# Paso 4: Agregaci√≥n final por proveedor
resultado_final <- contratacion_ciiu_riesgo %>%
  group_by(Nit_Proveedor, Tipo_Industria, Subcategoria_contrato) %>%
  summarise(
    Fecha_Suscripcion = max(Fecha_Suscripcion, na.rm = TRUE),
    ciiu_final = first(na.omit(unique(ciiu_final))),
    Riesgo_AE = max(Riesgo_AE, na.rm = TRUE),
    .groups = "drop"
  )


‚∏ª

‚úÖ Otras opciones de imputaci√≥n m√°s avanzadas:

Si quieres ir m√°s all√° de la moda/pareto (estad√≠stica cl√°sica), aqu√≠ hay opciones m√°s sofisticadas:
	1.	Modelos de machine learning supervisados (si tienes suficientes datos ya etiquetados):
	‚Ä¢	randomForest o xgboost con entrada: Categoria_contrato, Subcategoria_contrato, Objeto_contrato
	‚Ä¢	Salida: ciiucode
	2.	Modelos NLP tipo BERT sobre el campo Objeto_contrato:
	‚Ä¢	Tokenizar descripciones, reducir dimensiones (TF-IDF o embeddings), y predecir la clase m√°s probable (ciiucode).
	3.	Clustering + imputaci√≥n:
	‚Ä¢	Clusterizar registros por similitud sem√°ntica en Objeto_contrato y usar la moda del cluster.

¬øDeseas que te implemente alguna de estas ideas avanzadas con c√≥digo tambi√©n?

‚∏ª

Te dejo listo este flujo b√°sico robusto, y t√∫ me dices si quieres refinarlo a√∫n m√°s.


####

Perfecto. El objetivo es asignar un c√≥digo CIIU a cada registro de contratacion_suscrita_df para luego evaluar el riesgo asociado a la actividad econ√≥mica.

A continuaci√≥n te presento un flujo completo y modular, con diferentes enfoques:

‚∏ª

üß≠ PASO 1: Asignar CIIU directamente por NIT/LIFNR

1.1 Cruce con lfb1_final (por LIFNR)

contratacion_suscrita_df <- contratacion_suscrita_df %>%
  left_join(lfb1_final, by = c("Nit_Proveedor" = "lifnr")) %>%
  rename(CIIU_LFB1 = ciiucode)

1.2 Cruce con listadoCIIU (por NIT)

listadoCIIU <- listadoCIIU %>%
  mutate(across(everything(), ~ toupper(stri_trans_general(str_trim(as.character(.)), "Latin-ASCII"))))

contratacion_suscrita_df <- contratacion_suscrita_df %>%
  left_join(listadoCIIU, by = c("Nit_Proveedor" = "nit")) %>%
  rename(CIIU_LISTADO = ciiu_ppal)

1.3 Consolidar campo CIIU_final seg√∫n prioridad

contratacion_suscrita_df <- contratacion_suscrita_df %>%
  mutate(
    CIIU_final = case_when(
      !is.na(CIIU_LFB1) & CIIU_LFB1 != 0 ~ as.character(CIIU_LFB1),
      !is.na(CIIU_LISTADO) & CIIU_LISTADO != "0" ~ as.character(CIIU_LISTADO),
      TRUE ~ NA_character_
    )
  )


‚∏ª

üß≠ PASO 2: Imputar CIIU cuando est√° faltante

Opci√≥n 1Ô∏è‚É£: Moda por Subcategor√≠a ‚Üí Categor√≠a ‚Üí Objeto

# Funci√≥n auxiliar para calcular la moda (Pareto)
moda <- function(x) {
  ux <- na.omit(unique(x))
  ux[which.max(tabulate(match(x, ux)))]
}

# 1. Moda por Subcategor√≠a
moda_sub <- contratacion_suscrita_df %>%
  filter(!is.na(CIIU_final)) %>%
  group_by(Subcategoria_contrato) %>%
  summarise(CIIU_moda_sub = moda(CIIU_final), .groups = "drop")

# 2. Moda por Categor√≠a
moda_cat <- contratacion_suscrita_df %>%
  filter(!is.na(CIIU_final)) %>%
  group_by(Categoria_contrato) %>%
  summarise(CIIU_moda_cat = moda(CIIU_final), .groups = "drop")

# 3. Moda por Objeto contrato (si lo necesitas)
moda_obj <- contratacion_suscrita_df %>%
  filter(!is.na(CIIU_final)) %>%
  group_by(Objeto_contrato) %>%
  summarise(CIIU_moda_obj = moda(CIIU_final), .groups = "drop")

# Join de las modas
contratacion_suscrita_df <- contratacion_suscrita_df %>%
  left_join(moda_sub, by = "Subcategoria_contrato") %>%
  left_join(moda_cat, by = "Categoria_contrato") %>%
  left_join(moda_obj, by = "Objeto_contrato")

# Imputar CIIU donde falta
contratacion_suscrita_df <- contratacion_suscrita_df %>%
  mutate(
    CIIU_imputado = case_when(
      is.na(CIIU_final) & !is.na(CIIU_moda_sub) ~ CIIU_moda_sub,
      is.na(CIIU_final) & !is.na(CIIU_moda_cat) ~ CIIU_moda_cat,
      is.na(CIIU_final) & !is.na(CIIU_moda_obj) ~ CIIU_moda_obj,
      TRUE ~ CIIU_final
    )
  )


‚∏ª

üß† Opci√≥n 2Ô∏è‚É£: Modelo de Clasificaci√≥n (ML)

Si quieres una opci√≥n m√°s robusta, puedes entrenar un modelo supervisado (√°rbol de decisi√≥n, random forest, etc.) para predecir el CIIU usando como entrada:
	‚Ä¢	Categoria_contrato
	‚Ä¢	Subcategoria_contrato
	‚Ä¢	Objeto_contrato (puede requerir vectorizaci√≥n de texto)

C√≥digo base para Random Forest (ejemplo)

library(randomForest)

# Crear dataset con CIIU conocidos
modelo_df <- contratacion_suscrita_df %>%
  filter(!is.na(CIIU_final)) %>%
  select(CIIU_final, Categoria_contrato, Subcategoria_contrato, Objeto_contrato) %>%
  mutate(CIIU_final = as.factor(CIIU_final))

# Convertir variables categ√≥ricas a factor
modelo_df <- modelo_df %>%
  mutate(across(c(Categoria_contrato, Subcategoria_contrato), as.factor))

# Entrenar modelo
modelo_rf <- randomForest(
  CIIU_final ~ Categoria_contrato + Subcategoria_contrato + Objeto_contrato,
  data = modelo_df,
  ntree = 100
)

# Predecir CIIU en registros sin asignar
sin_ciiu_df <- contratacion_suscrita_df %>%
  filter(is.na(CIIU_final)) %>%
  select(Categoria_contrato, Subcategoria_contrato, Objeto_contrato) %>%
  mutate(across(c(Categoria_contrato, Subcategoria_contrato), as.factor))

predicciones <- predict(modelo_rf, sin_ciiu_df)

# Imputar predicciones
contratacion_suscrita_df$CIIU_imputado[is.na(contratacion_suscrita_df$CIIU_final)] <- as.character(predicciones)


‚∏ª

‚úÖ PASO 3: Asignar riesgo por actividad econ√≥mica

# Preparar Riesgo_AE
Riesgo_AE <- Riesgo_AE %>%
  rename(CIIU = Clase) %>%
  mutate(CIIU = as.character(CIIU))

# Unir riesgo
contratacion_suscrita_df <- contratacion_suscrita_df %>%
  left_join(Riesgo_AE, by = c("CIIU_imputado" = "CIIU")) %>%
  rename(
    RIESGO_ACTIVIDAD_ECONOMICA = `Valor Riesgo`,
    RIESGO_ACTIVIDAD_ECONOMICA_CATEGORIA = Categor√≠a
  )


‚∏ª

‚úÖ Resultado Final

Ahora tienes un dataframe contratacion_suscrita_df con:
	‚Ä¢	CIIU_final: obtenido por cruce directo
	‚Ä¢	CIIU_imputado: incluyendo imputaciones por moda o ML
	‚Ä¢	RIESGO_ACTIVIDAD_ECONOMICA: valor del riesgo
	‚Ä¢	RIESGO_ACTIVIDAD_ECONOMICA_CATEGORIA: categor√≠a del riesgo

‚∏ª

¬øDeseas que empaquete esto como una funci√≥n general? ¬øO que cree un script final en formato .R listo para correr?




Necesito lo siguiente, de la base de contrataci√≥n suscrita necesito "imputar" el cod√≠go CIIU, el cual es un c√≥digo de referencia de actividad econ√≥mica y con esto se pretende identificar el riesgo por actividad econ√≥mica, para esto se debe cruzar la base contratacion_suscrita_df con la base lfb1_final las llaves son Nit_proveedor y lifnr respectivamente y traer el campo ciiucode de la segunda base, luego de nuevo con la base de contratacion_suscrita_df se cruza con la base listadoCIIU, la llave de cruce de esta ultima base es nit y traer el campo ciiu_ppal, ahora para los registros de la base contratacion_suscrita_df sin cruce con el c√≥digo ciiu es donde debo hacer alguna imputaci√≥n, con los campos Objeto_contrato (Campo descriptivo del contrato), Categoria_contrato (campo que describe la categor√≠a del contrato aprox 25 categor√≠as), Subcategoria_contrato (campo con subcategor√≠as derivadas de la categoria_contrato)...una idea es imputar con el Pareto (o moda) de ciiu encontrados por categor√≠a, subcategoria y objeto del contrato.

¬øQu√© otras opciones o modelos podr√≠as indicarme y mostrar el c√≥digo?

# Base 1

contratacion_suscrita_df <- contratacion_suscrita %>%
  mutate(
    Nombre_Proveedor = str_trim(str_to_upper(`Nombre Proveedor`)),
    Nit_Proveedor = str_trim(str_to_upper(`Nit Proveedor`)),
    Nemonico_Proveedor = str_trim(str_to_upper(`Nemonico Proveedor Mdte 500`)),
    Tipo_Industria = str_trim(str_to_upper(`Tipo De Industria`)),
    Fecha_Suscripcion = ymd(`Fecha Final`),
    Objeto_contrato=str_trim(str_to_upper(`Objeto Contrato`)),
    Categoria_contrato = str_trim(str_to_upper(`Categor√≠a Nombre`)),
    Subcategoria_contrato = str_trim(str_to_upper(`Subcategoria Contrato Nombre`)),
    Numero_contrato_central=str_trim(str_to_upper(`Contrato Central`))
  )

# Base 2

LFB1 <- LFB1 %>% clean_names()
LFB1 %>% glimpse()

lfb1_final <- LFB1 %>% 
  mutate(across(everything(), ~ toupper(stri_trans_general(str_trim(as.character(.)), "Latin-ASCII")))) %>%
  select(lifnr,ciiucode) %>%
  mutate(ciiucode=as.numeric(ciiucode))

# Base 3
listadoCIIU <- listadoCIIU %>% clean_names()
listadoCIIU %>% glimpse()

campos de esta base nit y ciiu_ppal

# Base 4 Riesgo de Actividad econ√≥mica
> Riesgo_AE<-read_excel(file.path(ruta_riesgos, "Riesgo_actividad_economica.xlsx"))
> Riesgo_AE %>% glimpse()

el campo Clase es el c√≥digo CIIU
Rows: 495
Columns: 4
$ Clase          <dbl> 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 142, 143, 144, 145, 1‚Ä¶
$ Descripci√≥n    <chr> "Cultivo de cereales (excepto arroz), legumbres y semillas oleaginosas", "Cultivo de arroz", "Cultivo de h‚Ä¶
$ `Valor Riesgo` <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1‚Ä¶
$ Categor√≠a      <chr> "Compa√±√≠as Agroindustriales", "Compa√±√≠as Agroindustriales", "Compa√±√≠as Agroindustriales",

