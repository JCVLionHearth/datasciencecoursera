Desde una mirada actuarial, quiero implementar modelos para pricing, en particular para el ramo de automÃ³viles. Actualmente las tÃ©cnicas mas utilizadas son los modelos lineales generalizado (glm), para identificar la severidad y la probabilidad, por lo que se estima cada una mendiante una modelaciÃ³n de acuerdo con el comportamiento de los datos y al final se obtiene un producto probabilidad por severidad, pero el precio va a depender de las caracterÃ­sticas del auto, del conductor y otras, tambiÃ©n del histÃ³rico de siniestros.

Necesito me ayudes a crear un proyecto e visual studio code para que haga lo siguiente:
1. Un script en Python completo que permita generar una base de siniestros ficticia de automÃ³viles, la cual incluya la suma asegurada por tipo de daÃ±o, el valor del siniestro, el tipo de daÃ±o (perdida parcial, robo, perdida total), las caracterÃ­sticas del auto (color, peso, cilindraje, puestos, modelo y las demÃ¡s necesarias), las caracterÃ­sticas del conductor (edad, genero, estado civil y las demÃ¡s necesarias para este ejercicio). la base debe abordar todo lo necesario para realizar el ejercicio de pricing.
2. otro script en Python completo que permita realizar la modelaciÃ³n de la severidad y de la probabilidad y ademÃ¡s que permita establecer las variables optimas de cada modelo, graficos, definiciones de funciones link y todo lo necesario que consideres para el desarrollo completo del ejercicio de pricing.
3. otro script tipo cotizador en el que se pueda ingresar datos para cotizar la prima de riesgo, de acuerdo con la suma asegurada del cliente

El ejercicio debe ser lo mÃ¡s parecido con la realidad, es decir el objetivo es que yo como actuario mediante la modelaciÃ³n pueda estimar la probabilidad y la severidad mediante los valores estimados del modelo glm

Perfecto, Juan. Vamos a estructurar este proyecto actuarial de pricing en Python con enfoque realista, utilizando modelos lineales generalizados (GLM), dividido en tres scripts:

â¸»

ðŸ—‚ Estructura del Proyecto en Visual Studio Code

auto_insurance_pricing/
â”‚
â”œâ”€â”€ data/
â”‚   â””â”€â”€ siniestros_ficticios.csv         # Datos sintÃ©ticos generados
â”‚
â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ 1_generar_datos.py               # Generador de datos ficticios
â”‚   â”œâ”€â”€ 2_modelos_glm.py                 # Modelos GLM de severidad y frecuencia
â”‚   â””â”€â”€ 3_cotizador_prima.py            # Cotizador de prima de riesgo
â”‚
â”œâ”€â”€ requirements.txt                     # Paquetes necesarios
â””â”€â”€ README.md                            # DescripciÃ³n del proyecto


â¸»

ðŸ“Œ 1. 1_generar_datos.py: Generador de datos ficticios

Generaremos una base realista de siniestros. IncluirÃ¡ caracterÃ­sticas del vehÃ­culo, conductor, tipo de daÃ±o, suma asegurada y valor del siniestro.

ðŸ§© Variables clave
	â€¢	tipo_danio: perdida parcial, total, robo
	â€¢	valor_siniestro: severidad
	â€¢	frecuencia: se infiere luego por modelado de eventos
	â€¢	auto: marca, modelo, peso, cilindraje, color, puestos, valor comercial
	â€¢	conductor: edad, gÃ©nero, estado civil, experiencia, historial
	â€¢	suma_asegurada: por tipo de daÃ±o

âœ… CÃ³digo

import pandas as pd
import numpy as np
import random
from faker import Faker

fake = Faker()
np.random.seed(42)

def generar_datos(n=5000):
    tipo_danio = ['perdida parcial', 'robo', 'perdida total']
    colores = ['rojo', 'azul', 'blanco', 'negro', 'gris', 'plateado']
    marcas = ['Toyota', 'Mazda', 'Chevrolet', 'Renault', 'Ford']
    modelos = list(range(2005, 2024))

    datos = []
    for _ in range(n):
        marca = random.choice(marcas)
        modelo = random.choice(modelos)
        valor_comercial = np.random.randint(20_000_000, 100_000_000)
        peso = np.random.randint(900, 2500)
        cilindraje = np.random.randint(1000, 3500)
        puestos = random.choice([2, 4, 5, 7])
        color = random.choice(colores)

        edad = np.random.randint(18, 80)
        genero = random.choice(['M', 'F'])
        estado_civil = random.choice(['soltero', 'casado', 'divorciado'])
        experiencia = np.random.randint(0, max(edad - 16, 1))
        historial = np.random.poisson(0.3)

        tipo = random.choice(tipo_danio)
        suma_asegurada = valor_comercial * random.uniform(0.7, 1.1)
        prob_siniestro = 0.1 + 0.01 * historial + 0.005 * (80 - edad)  # mayor riesgo jÃ³venes y con historial
        hubo_siniestro = np.random.binomial(1, min(prob_siniestro, 1))

        valor_siniestro = 0
        if hubo_siniestro:
            if tipo == 'perdida parcial':
                valor_siniestro = np.random.uniform(0.1, 0.5) * suma_asegurada
            elif tipo == 'robo':
                valor_siniestro = np.random.uniform(0.5, 1.0) * suma_asegurada
            else:
                valor_siniestro = suma_asegurada

        datos.append({
            'marca': marca,
            'modelo': modelo,
            'valor_comercial': valor_comercial,
            'peso': peso,
            'cilindraje': cilindraje,
            'puestos': puestos,
            'color': color,
            'edad': edad,
            'genero': genero,
            'estado_civil': estado_civil,
            'experiencia': experiencia,
            'historial': historial,
            'tipo_danio': tipo if hubo_siniestro else 'sin_siniestro',
            'suma_asegurada': suma_asegurada,
            'valor_siniestro': valor_siniestro,
            'hubo_siniestro': hubo_siniestro
        })

    return pd.DataFrame(datos)

if __name__ == "__main__":
    df = generar_datos()
    df.to_csv("../data/siniestros_ficticios.csv", index=False)
    print("âœ… Datos ficticios guardados.")


â¸»

ðŸ“Œ 2. 2_modelos_glm.py: Modelos GLM

Utilizaremos statsmodels para modelar:
	â€¢	Frecuencia (probabilidad de siniestro): GLM binomial
	â€¢	Severidad (monto del siniestro): GLM Gamma (con link log)

âœ… CÃ³digo

import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("../data/siniestros_ficticios.csv")

# Preprocesamiento
df['genero'] = df['genero'].astype('category')
df['estado_civil'] = df['estado_civil'].astype('category')
df['color'] = df['color'].astype('category')
df['marca'] = df['marca'].astype('category')

# ----------------------------
# MODELO DE FRECUENCIA
# ----------------------------
formula_frecuencia = "hubo_siniestro ~ edad + C(genero) + experiencia + historial + valor_comercial + cilindraje + peso"
modelo_frec = smf.glm(formula=formula_frecuencia, data=df, family=sm.families.Binomial()).fit()
print("\n--- Modelo Frecuencia (GLM Binomial) ---\n")
print(modelo_frec.summary())

# ----------------------------
# MODELO DE SEVERIDAD
# ----------------------------
df_severos = df[df["hubo_siniestro"] == 1].copy()
formula_severidad = "valor_siniestro ~ edad + C(genero) + experiencia + valor_comercial + cilindraje + peso + historial"
modelo_sev = smf.glm(formula=formula_severidad, data=df_severos,
                     family=sm.families.Gamma(link=sm.genmod.families.links.log())).fit()

print("\n--- Modelo Severidad (GLM Gamma) ---\n")
print(modelo_sev.summary())

# ----------------------------
# GRAFICOS
# ----------------------------
def graficar_residuos(modelo, titulo):
    plt.figure()
    plt.scatter(modelo.fittedvalues, modelo.resid_response)
    plt.axhline(0, color='red', linestyle='--')
    plt.xlabel("Valores ajustados")
    plt.ylabel("Residuos")
    plt.title(titulo)
    plt.show()

graficar_residuos(modelo_frec, "Residuos Frecuencia")
graficar_residuos(modelo_sev, "Residuos Severidad")

# Guardar modelos si se desea usar en el cotizador
modelo_frec.save("../scripts/modelo_frecuencia.pickle")
modelo_sev.save("../scripts/modelo_severidad.pickle")


â¸»

ðŸ“Œ 3. 3_cotizador_prima.py: Cotizador

âœ… CÃ³digo

import pandas as pd
import statsmodels.api as sm
import numpy as np

# Cargar modelos entrenados
modelo_frec = sm.load("modelo_frecuencia.pickle")
modelo_sev = sm.load("modelo_severidad.pickle")

# Datos de entrada
nuevo = pd.DataFrame([{
    'edad': 30,
    'genero': 'M',
    'experiencia': 10,
    'historial': 1,
    'valor_comercial': 60000000,
    'cilindraje': 1600,
    'peso': 1200
}])

# Deben coincidir las dummies con el modelo
nuevo['genero'] = nuevo['genero'].astype('category')

# Estimaciones
prob = modelo_frec.predict(nuevo)[0]
severidad = modelo_sev.predict(nuevo)[0]

prima_riesgo = prob * severidad

print(f"ðŸ§® Probabilidad estimada de siniestro: {prob:.3f}")
print(f"ðŸ’¥ Severidad estimada: ${severidad:,.0f}")
print(f"ðŸ’° Prima de riesgo sugerida: ${prima_riesgo:,.0f}")


â¸»

ðŸ“¦ requirements.txt

pandas
numpy
faker
matplotlib
seaborn
statsmodels


â¸»

Â¿Quieres que te empaquete esto como ZIP listo para descargar? Â¿O deseas agregar validaciones adicionales como scoring de riesgo o segmentaciones por clÃºsteres?
