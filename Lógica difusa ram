import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt

# Definimos los universos de las variables
x_impacto = np.arange(0, 151, 1)
x_probabilidad = np.arange(0, 101, 1)

# Creamos las funciones de membresía para el impacto
impacto_insignificante = fuzz.trapmf(x_impacto, [0, 0, 1, 1])
impacto_menor = fuzz.trimf(x_impacto, [1, 10, 10])
impacto_moderado = fuzz.trimf(x_impacto, [10, 50, 50])
impacto_mayor = fuzz.trimf(x_impacto, [50, 150, 150])
impacto_catastrofico = fuzz.trapmf(x_impacto, [150, 150, 151, 151])

# Graficamos las funciones de membresía para el impacto
plt.figure(figsize=(10, 6))
plt.plot(x_impacto, impacto_insignificante, label='Insignificante')
plt.plot(x_impacto, impacto_menor, label='Menor')
plt.plot(x_impacto, impacto_moderado, label='Moderado')
plt.plot(x_impacto, impacto_mayor, label='Mayor')
plt.plot(x_impacto, impacto_catastrofico, label='Catastrófico')

plt.title('Funciones de membresía para Impacto')
plt.xlabel('Impacto económico (millones)')
plt.ylabel('Membresía')
plt.legend()
plt.grid(True)
plt.show()

# Asumamos que ya hicimos la inferencia, ahora graficamos el resultado
risgo_valores = np.arange(0, 101, 1)
riesgo_bajo = fuzz.trapmf(risgo_valores, [0, 0, 20, 40])
riesgo_medio = fuzz.trimf(risgo_valores, [20, 50, 80])
riesgo_alto = fuzz.trapmf(risgo_valores, [60, 80, 100, 100])

plt.figure(figsize=(10, 6))
plt.plot(risgo_valores, riesgo_bajo, label='Bajo')
plt.plot(risgo_valores, riesgo_medio, label='Medio')
plt.plot(risgo_valores, riesgo_alto, label='Alto')

plt.title('Funciones de membresía para el Riesgo')
plt.xlabel('Riesgo (%)')
plt.ylabel('Membresía')
plt.legend()
plt.grid(True)
plt.show()

import plotly.graph_objs as go

# Definimos las funciones de membresía de impacto para graficar
x_impacto = np.arange(0, 151, 1)
impacto_insignificante = fuzz.trapmf(x_impacto, [0, 0, 1, 1])
impacto_menor = fuzz.trimf(x_impacto, [1, 10, 10])
impacto_moderado = fuzz.trimf(x_impacto, [10, 50, 50])
impacto_mayor = fuzz.trimf(x_impacto, [50, 150, 150])
impacto_catastrofico = fuzz.trapmf(x_impacto, [150, 150, 151, 151])

# Crear las trazas de las curvas de membresía
traces = [
    go.Scatter(x=x_impacto, y=impacto_insignificante, mode='lines', name='Insignificante'),
    go.Scatter(x=x_impacto, y=impacto_menor, mode='lines', name='Menor'),
    go.Scatter(x=x_impacto, y=impacto_moderado, mode='lines', name='Moderado'),
    go.Scatter(x=x_impacto, y=impacto_mayor, mode='lines', name='Mayor'),
    go.Scatter(x=x_impacto, y=impacto_catastrofico, mode='lines', name='Catastrófico')
]

# Configuramos la gráfica interactiva
layout = go.Layout(title='Funciones de membresía para Impacto', xaxis=dict(title='Impacto (millones)'),
                   yaxis=dict(title='Membresía'))

fig = go.Figure(data=traces, layout=layout)
fig.show()

from mpl_toolkits.mplot3d import Axes3D

# Creamos un grid para graficar en 3D el impacto y la probabilidad
x_impacto = np.arange(0, 151, 1)
x_probabilidad = np.arange(0, 101, 1)
X, Y = np.meshgrid(x_impacto, x_probabilidad)

# Generamos una función simulada para el riesgo
Z = (X * Y) / 10000  # Ejemplo de fórmula simple para riesgo

# Graficamos en 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')

ax.set_xlabel('Impacto')
ax.set_ylabel('Probabilidad')
ax.set_zlabel('Riesgo')
plt.title('Superficie de Riesgo')
plt.show()

Para definir las funciones de membresía de la variable **riesgo**, que depende tanto del impacto como de la probabilidad, y establecer las reglas de inferencia entre estas dos categorías, podemos estructurarlo de la siguiente manera:

### 1. Definir las categorías de riesgo
Como mencionaste, el riesgo se clasifica en cinco niveles:
- **Muy bajo**: Se da cuando el impacto y la probabilidad son muy bajos.
- **Bajo**: Se da en escenarios con probabilidades y/o impactos bajos o moderados.
- **Medio**: Ocurre en situaciones donde el impacto es considerable, incluso con probabilidades bajas o intermedias.
- **Alto** y **Muy alto**: Las definirás tú, pero seguramente estarán relacionadas con altos niveles de probabilidad y/o impacto significativo.

### 2. Funciones de membresía para el **riesgo**
Dado que ya hemos definido las funciones de membresía para el impacto y la probabilidad, ahora podemos definir las funciones para el riesgo utilizando combinaciones de estas dos variables. Las funciones de riesgo serán afectadas por las reglas de inferencia que describen cómo interactúan las categorías de impacto y probabilidad.

#### Funciones de membresía para **riesgo**
Las funciones de membresía del riesgo se podrían definir con un enfoque similar al del impacto y la probabilidad, utilizando funciones trapezoidales o triangulares.

Un posible rango para las categorías de riesgo puede ser:
- **Muy bajo**: De 0 a 20%
- **Bajo**: De 10 a 40%
- **Medio**: De 30 a 60%
- **Alto**: De 50 a 80%
- **Muy alto**: De 70 a 100%

### 3. Reglas de inferencia

Con base en tu descripción, las reglas se definen como una combinación de los niveles de impacto y probabilidad. Aquí te dejo algunos ejemplos:

1. **Muy bajo**:
   - Si la **probabilidad** es **raro** o **improbable** y el **impacto** es **insignificante** o **menor**, el **riesgo** es **muy bajo**.
   
2. **Bajo**:
   - Si la **probabilidad** es **raro** y el **impacto** es **moderado** o **mayor**, el **riesgo** es **bajo**.
   - Si la **probabilidad** es **improbable** y el **impacto** es **moderado** o **menor**, el **riesgo** es **bajo**.
   - Si la **probabilidad** es **posible** y el **impacto** es **menor** o **insignificante**, el **riesgo** es **bajo**.

3. **Medio**:
   - Si la **probabilidad** es **raro** y el **impacto** es **catastrófico**, el **riesgo** es **medio**.
   - Si la **probabilidad** es **improbable** y el **impacto** es **mayor**, el **riesgo** es **medio**.
   - Si la **probabilidad** es **posible** y el **impacto** es **mayor** o **moderado**, el **riesgo** es **medio**.
   - Si la **probabilidad** es **probable** y el **impacto** es **moderado**, el **riesgo** es **medio**.

### Implementación en Python

Te dejo una estructura de cómo podrías implementar las reglas de inferencia para el riesgo en Python, utilizando la lógica difusa:

```python
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Variables difusas
impacto = ctrl.Antecedent(np.arange(0, 151, 1), 'impacto')
probabilidad = ctrl.Antecedent(np.arange(0, 101, 1), 'probabilidad')
riesgo = ctrl.Consequent(np.arange(0, 101, 1), 'riesgo')

# Definir las funciones de membresía para impacto
impacto['insignificante'] = fuzz.trapmf(impacto.universe, [0, 0, 1, 1])
impacto['menor'] = fuzz.trimf(impacto.universe, [1, 5, 10])
impacto['moderado'] = fuzz.trimf(impacto.universe, [10, 25, 50])
impacto['mayor'] = fuzz.trimf(impacto.universe, [50, 100, 150])
impacto['catastrófico'] = fuzz.trapmf(impacto.universe, [150, 200, 200, 200])

# Definir las funciones de membresía para probabilidad
probabilidad['raro'] = fuzz.trapmf(probabilidad.universe, [0, 0, 2, 5])
probabilidad['improbable'] = fuzz.trimf(probabilidad.universe, [5, 10, 15])
probabilidad['posible'] = fuzz.trimf(probabilidad.universe, [15, 25, 40])
probabilidad['probable'] = fuzz.trimf(probabilidad.universe, [40, 60, 75])
probabilidad['con certeza'] = fuzz.trapmf(probabilidad.universe, [75, 90, 100, 100])

# Definir las funciones de membresía para riesgo
riesgo['muy bajo'] = fuzz.trapmf(riesgo.universe, [0, 0, 10, 20])
riesgo['bajo'] = fuzz.trimf(riesgo.universe, [10, 20, 40])
riesgo['medio'] = fuzz.trimf(riesgo.universe, [30, 45, 60])
riesgo['alto'] = fuzz.trimf(riesgo.universe, [50, 70, 80])
riesgo['muy alto'] = fuzz.trapmf(riesgo.universe, [70, 90, 100, 100])

# Reglas de inferencia
rule1 = ctrl.Rule(probabilidad['raro'] & impacto['insignificante'], riesgo['muy bajo'])
rule2 = ctrl.Rule(probabilidad['improbable'] & impacto['menor'], riesgo['bajo'])
rule3 = ctrl.Rule(probabilidad['posible'] & impacto['moderado'], riesgo['medio'])
rule4 = ctrl.Rule(probabilidad['probable'] & impacto['mayor'], riesgo['alto'])
rule5 = ctrl.Rule(probabilidad['con certeza'] & impacto['catastrófico'], riesgo['muy alto'])

# Crear el sistema de control difuso
control_riesgo = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5])
simulador_riesgo = ctrl.ControlSystemSimulation(control_riesgo)

# Probar con un ejemplo
simulador_riesgo.input['impacto'] = 30
simulador_riesgo.input['probabilidad'] = 20
simulador_riesgo.compute()

# Resultado
print(simulador_riesgo.output['riesgo'])
```

### Explicación:
- Hemos definido las funciones de membresía para impacto, probabilidad y riesgo.
- Las reglas de inferencia son una combinación de las categorías de impacto y probabilidad.
- Finalmente, se ejecuta una simulación para calcular el riesgo.

¿Te gustaría que ajustemos o profundicemos en alguna otra parte del análisis?
