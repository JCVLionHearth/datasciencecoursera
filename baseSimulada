¬°Perfecto! Vamos a mejorar el contenido del campo RESUMEN_DE_LOS_HECHOS para que tenga m√°s sentido y aporte valor al ejercicio.

‚∏ª

üéØ Objetivo:

Simular descripciones coherentes de casos, que podr√≠an pertenecer a un entorno laboral relacionado con √©tica, conflictos de inter√©s, denuncias o alertas.

üì¶ Soluci√≥n:

Crear una funci√≥n que genere textos semisint√©ticos a partir de estructuras comunes de reportes reales. Usaremos plantillas con variables aleatorias como nombres, √°reas, hechos y fechas.

‚∏ª

‚úÖ Paso 1: Crear una funci√≥n coherente para RESUMEN_DE_LOS_HECHOS

Agrega esta funci√≥n al script antes del bucle que genera los casos:

def generar_resumen_hechos(nombre, tipo_caso):
    hechos = {
        'ALERTA': [
            f"Se recibi√≥ una alerta an√≥nima en la que se reporta una posible irregularidad cometida por {nombre} relacionada con procedimientos de contrataci√≥n.",
            f"Durante un control rutinario, se identific√≥ una alerta interna que involucra a {nombre} por presunto incumplimiento de pol√≠ticas de seguridad.",
            f"El sistema de auditor√≠a autom√°tica gener√≥ una alerta por accesos inusuales realizados por {nombre} en horarios no laborables."
        ],
        'DILEMA': [
            f"{nombre} consult√≥ al √°rea de √©tica sobre un posible conflicto de inter√©s al participar en un proceso donde est√° involucrado un familiar cercano.",
            f"Se report√≥ un dilema √©tico por parte de {nombre} al recibir obsequios de un proveedor con el que actualmente negocia condiciones contractuales.",
            f"{nombre} expres√≥ dudas sobre su participaci√≥n en decisiones que pueden generar beneficios personales indirectos."
        ],
        'FALTA DE TERCEROS': [
            f"{nombre} report√≥ que un contratista incurri√≥ en comportamientos inadecuados con otros empleados durante una reuni√≥n.",
            f"Seg√∫n {nombre}, un proveedor incurri√≥ en pr√°cticas que contravienen el c√≥digo de √©tica durante la ejecuci√≥n de un proyecto.",
            f"Se recibi√≥ reporte de {nombre} donde manifiesta que un cliente realiz√≥ insinuaciones indebidas hacia su equipo de trabajo."
        ],
        'DENUNCIA': [
            f"{nombre} present√≥ una denuncia formal contra un compa√±ero por acoso laboral reiterado desde el mes de abril.",
            f"Se recibi√≥ denuncia de {nombre} en la que se indica que su jefe inmediato ha manipulado resultados para favorecer decisiones personales.",
            f"{nombre} interpuso una denuncia por actos de corrupci√≥n en el proceso de selecci√≥n de contratistas, con evidencia documental."
        ]
    }
    return random.choice(hechos[tipo_caso])


‚∏ª

‚úÖ Paso 2: Reemplazar la l√≠nea del resumen en tu bucle de generaci√≥n

Reemplaza esta l√≠nea:

fake.sentence(nb_words=20),

Por esta:

generar_resumen_hechos(nombre, tipo_caso),

Pero primero aseg√∫rate de capturar el tipo_caso antes en la iteraci√≥n:

tipo_caso = random.choice(case_types)

Y luego reemplaza "random.choice(case_types)" por tipo_caso en la fila.

‚∏ª

üîÅ Ejemplo actualizado del bucle de generaci√≥n de casos:

for i in range(n):
    id_random = random.choice(ids)
    nombre = df_ident[df_ident['NUMERO_IDENTIFICACION_COND'] == id_random]['NOMBRE_COMPLETO_COND'].values[0]
    tipo_caso = random.choice(case_types)

    fila = [
        f"{random.choice(['ECO', 'OCENSA', 'CENIT', 'HOCOL'])}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        tipo_caso,
        nombre,
        id_random,
        random.choice(relaciones),
        random.choice(resultados),
        generar_resumen_hechos(nombre, tipo_caso),
        fecha_sucia()
    ]
    data_casos.append(fila)


‚∏ª

üß† Beneficios de este cambio
	‚Ä¢	Simula casos con narrativas veros√≠miles.
	‚Ä¢	Enriquece el an√°lisis cualitativo (pueden usar Excel para detectar palabras clave).
	‚Ä¢	Se puede pedir que clasifiquen los textos seg√∫n palabras clave o gravedad.
	‚Ä¢	Facilita ejercicios de limpieza y tokenizaci√≥n si luego deseas integrarlo con Python.

‚∏ª

¬øQuieres que prepare tambi√©n una versi√≥n .xlsx con hojas separadas para entregar como caso pr√°ctico o un PDF gu√≠a para candidatos?



import pandas as pd
import random
from faker import Faker
import os

fake = Faker('es_CO')

# Crear carpeta si no existe
os.makedirs("datos_simulados", exist_ok=True)

# ---------- PARTE 1: Crear base de identificaciones ----------
num_personas = 2000
ids = set()
while len(ids) < num_personas:
    ids.add(fake.random_int(min=10000000, max=99999999))
ids = list(ids)

ciudades_colombia = [
    'Bogot√°', 'Medell√≠n', 'Cali', 'Barranquilla', 'Cartagena', 'C√∫cuta',
    'Bucaramanga', 'Pereira', 'Santa Marta', 'Ibagu√©', 'Manizales', 'Villavicencio',
    'Neiva', 'Armenia', 'Pasto', 'Monter√≠a', 'Sincelejo', 'Valledupar', 'Tunja', 'Popay√°n'
]

# Crear datos de identificaci√≥n
data_ident = []
for id_num in ids:
    fila = [
        id_num,
        fake.date_of_birth(minimum_age=18, maximum_age=70).strftime('%Y-%m-%d'),
        random.choice(ciudades_colombia),
        fake.name()
    ]
    data_ident.append(fila)

df_ident = pd.DataFrame(data_ident, columns=[
    'NUMERO_IDENTIFICACION_COND', 'FECHA_NACIMIENTO', 'CIUDAD_RESIDENCIA', 'NOMBRE_COMPLETO_COND'
])
df_ident.to_csv("datos_simulados/base_identificaciones.csv", index=False, encoding='utf-8-sig')

# ---------- PARTE 2: Crear base de casos ----------
n = 5000  # N√∫mero de casos a simular
case_types = ['ALERTA', 'DILEMA', 'FALTA DE TERCEROS', 'DENUNCIA']
resultados = ['CORROBORADO', 'NO CORROBORADO', 'EN INVESTIGACI√ìN']
relaciones = ['JEFE', 'COMPA√ëERO', 'SUBORDINADO', 'CLIENTE', 'OTRO']
roles = ['DENUNCIANTE', 'IMPLICADO', '']

def fecha_sucia():
    date = fake.date_between(start_date='-2y', end_date='today')
    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m-%d-%Y', '%d-%b-%Y', '%Y/%m/%d']
    return date.strftime(random.choice(formatos))

# Generar datos de casos
data_casos = []
for i in range(n):
    id_random = random.choice(ids)
    nombre = df_ident[df_ident['NUMERO_IDENTIFICACION_COND'] == id_random]['NOMBRE_COMPLETO_COND'].values[0]

    fila = [
        f"{random.choice(['ECO', 'OCENSA', 'CENIT', 'HOCOL'])}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        random.choice(case_types),
        nombre,
        id_random,
        random.choice(relaciones),
        random.choice(resultados),
        fake.sentence(nb_words=20),
        fecha_sucia()
    ]
    data_casos.append(fila)

df_casos = pd.DataFrame(data_casos, columns=[
    'CASE_NUMBER', 'ROL', 'CASE_TYPE', 'NOMBRE_COMPLETO_COND',
    'NUMERO_IDENTIFICACION_COND', 'RELACIONAMIENTO', 'RESULTADO_VERIFICACION',
    'RESUMEN_DE_LOS_HECHOS', 'FECHA_REPORTE'
])

# Introducir duplicados y errores tipogr√°ficos (opcional)
df_casos = pd.concat([df_casos, df_casos.sample(40, random_state=1)], ignore_index=True)
errores = df_casos.sample(frac=0.05, random_state=2).index
df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'] = df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'].apply(lambda x: x.replace('a', '@', 1))

# Guardar
df_casos.to_csv("datos_simulados/simulacion_datos_excel.csv", index=False, encoding='utf-8-sig')



quiero garantizar que los 5000 registros o los n que pueda hacer de esta primera base:

import pandas as pd
import random
from faker import Faker
import os

fake = Faker('es_CO')

# Crear carpeta si no existe
os.makedirs("datos_simulados", exist_ok=True)

# Par√°metros
n = 5000  # N√∫mero de registros
case_types = ['ALERTA', 'DILEMA', 'FALTA DE TERCEROS', 'DENUNCIA']
resultados = ['CORROBORADO', 'NO CORROBORADO', 'EN INVESTIGACI√ìN']
relaciones = ['JEFE', 'COMPA√ëERO', 'SUBORDINADO', 'CLIENTE', 'OTRO']
roles = ['DENUNCIANTE', 'IMPLICADO','']

# Funci√≥n para fechas sucias
def fecha_sucia():
    date = fake.date_between(start_date='-2y', end_date='today')
    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m-%d-%Y', '%d-%b-%Y', '%Y/%m/%d']
    return date.strftime(random.choice(formatos))

# Lista de nombres que se repetir√°n
nombres_repetidos = [fake.name() for _ in range(30)]

# Generar datos
data = []
for i in range(n):
    nombre = random.choice(nombres_repetidos) if i < 200 else fake.name()
    fila = [
        f"{random.choice(['ECO', 'OCENSA', 'CENIT', 'HOCOL'])}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        random.choice(case_types),
        nombre,
        fake.random_int(min=10000000, max=99999999) if random.random() > 0.1 else '',
        random.choice(relaciones),
        random.choice(resultados),
        fake.sentence(nb_words=20),
        fecha_sucia()
    ]
    data.append(fila)

# Crear DataFrame
df = pd.DataFrame(data, columns=[
    'CASE NUMBER', 'ROL', 'CASE_TYPE', 'NOMBRE_COMPLETO_COND',
    'NUMERO_IDENTIFICACION_COND', 'RELACIONAMIENTO', 'RESULTADO VERIFICACION',
    'RESUMEN_DE_LOS_HECHOS', 'FECHA DE REPORTE'
])

# Introducir duplicados
df = pd.concat([df, df.sample(40, random_state=1)], ignore_index=True)

# Introducir errores tipogr√°ficos
errores = df.sample(frac=0.05, random_state=2).index
df.loc[errores, 'NOMBRE_COMPLETO_COND'] = df.loc[errores, 'NOMBRE_COMPLETO_COND'].apply(lambda x: x.replace('a', '@', 1))

# Guardar archivo
df.to_csv("datos_simulados/simulacion_datos_excel.csv", index=False, encoding='utf-8-sig')


est√©n todos en estas identificaciones

import pandas as pd
import random
from faker import Faker
import os

fake = Faker('es_CO')

# Crear carpeta si no existe
os.makedirs("datos_simulados", exist_ok=True)

# Generar identificaciones √∫nicas
num_registros = 2000
ids = set()
while len(ids) < num_registros:
    ids.add(fake.random_int(min=10000000, max=99999999))
ids = list(ids)

# Lista de ciudades colombianas comunes
ciudades_colombia = [
    'Bogot√°', 'Medell√≠n', 'Cali', 'Barranquilla', 'Cartagena', 'C√∫cuta', 'Bucaramanga',
    'Pereira', 'Santa Marta', 'Ibagu√©', 'Manizales', 'Villavicencio', 'Neiva', 'Armenia',
    'Pasto', 'Monter√≠a', 'Sincelejo', 'Valledupar', 'Tunja', 'Popay√°n'
]

# Generar datos simulados
data = []
for id_num in ids:
    fila = [
        id_num,
        fake.date_of_birth(minimum_age=18, maximum_age=70).strftime('%Y-%m-%d'),
        random.choice(ciudades_colombia)
    ]
    data.append(fila)

# Crear DataFrame
df_info = pd.DataFrame(data, columns=[
    'NUMERO_IDENTIFICACION_COND', 'FECHA_NACIMIENTO', 'CIUDAD_RESIDENCIA'
])

# Guardar archivo CSV con codificaci√≥n UTF-8 con BOM
df_info.to_csv("datos_simulados/base_identificaciones.csv", index=False, encoding='utf-8-sig')

adem√°s quiero garantizar que pueda sacar un top 10 de personas que han hecho mas casos...


con esto como deber√≠a ser la logica
