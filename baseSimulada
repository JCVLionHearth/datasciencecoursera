Perfecto, Juan Carlos. Para garantizar que cada persona (identificaci√≥n + nombre) tenga siempre el mismo cargo y pertenezca a la misma compa√±√≠a en todos sus casos, debes asignar esas variables una sola vez por persona, y luego reutilizarlas en la generaci√≥n de los casos.

Aqu√≠ te dejo la versi√≥n corregida y mejorada de tu c√≥digo, aplicando esa l√≥gica:

‚∏ª

‚úÖ Cambios clave:
	1.	Se crea un diccionario que asocia cada ID con un CARGO y una COMPA√ë√çA.
	2.	En el loop de generaci√≥n de casos, se reutiliza esa informaci√≥n para cada registro correspondiente a esa persona.
	3.	El resultado no se vuelve a generar dos veces (tu c√≥digo original lo generaba y luego lo reemplazaba accidentalmente).

‚∏ª

üîß C√ìDIGO CORREGIDO

Reemplaza desde la secci√≥n "PARTE 2" as√≠:

# ---------- PARTE 2: Crear base de casos ----------
n = 10000
Tipolog√≠as = ['ACOSO LABORAL', 'ACOSO SEXUAL', 'CONFLICTO DE INTER√âS', 'CORRUPCI√ìN', 'FRAUDE', 'FINANCIACI√ìN DEL TERRORISMO', 'LAVADO DE ACTIVOS', 'INCUMPLIMIENTO DE NORMAS']
resultados = ['CORROBORADO', 'NO CORROBORADO', 'EN INVESTIGACI√ìN']
cargos_posibles = ['PROFESIONAL', 'GERENTE', 'COORDINADOR', 'CLIENTE', 'CONTRATISTA', 'VICEPRESIDENTE', 'TECNICO']
companias_posibles = ['COMPA√ëIA_AA', 'COMPA√ëIA_BB', 'COMPA√ëIA_CC', 'COMPA√ëIA_DD']
roles = ['DENUNCIANTE', 'IMPLICADO', '']

fecha_corte = datetime(2025, 6, 30).date()

def fecha_sucia(date_obj):
    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m-%d-%Y', '%d-%b-%Y', '%Y/%m/%d']
    return date_obj.strftime(random.choice(formatos))

# Diccionario: {identificaci√≥n: (cargo fijo, compa√±√≠a fija)}
persona_config = {
    id_: {
        'cargo': random.choice(cargos_posibles),
        'compania': random.choice(companias_posibles)
    }
    for id_ in ids
}

def generar_resumen_hechos(nombre, tipo_caso):
    hechos = {
        'ACOSO LABORAL': [...],  # (Tu lista original)
        'ACOSO SEXUAL': [...],
        'CONFLICTO DE INTER√âS': [...],
        'CORRUPCI√ìN': [...],
        'FRAUDE': [...],
        'FINANCIACI√ìN DEL TERRORISMO': [...],
        'LAVADO DE ACTIVOS': [...],
        'INCUMPLIMIENTO DE NORMAS': [...]
    }
    return random.choice(hechos.get(tipo_caso, [f"No hay ejemplos disponibles para la tipolog√≠a '{tipo_caso}'"]))

# Generar los casos
data_casos = []
for i in range(n):
    id_random = random.choice(ids)
    nombre = df_ident[df_ident['NUMERO_IDENTIFICACION_COND'] == id_random]['NOMBRE_COMPLETO_COND'].values[0]
    tipo_caso = random.choice(Tipolog√≠as)
    resultado = random.choice(resultados)

    fecha_inicio = fecha_corte - timedelta(days=730)
    fecha_reporte_dt = fake.date_between_dates(date_start=fecha_inicio, date_end=fecha_corte)
    fecha_reporte_str = fecha_sucia(fecha_reporte_dt)

    if resultado in ['CORROBORADO', 'NO CORROBORADO']:
        cierre_min = fecha_reporte_dt + timedelta(days=5)
        cierre_max = min(fecha_corte, fecha_reporte_dt + timedelta(days=90))
        if cierre_min >= cierre_max:
            fecha_cierre_str = ''
        else:
            fecha_cierre_dt = fake.date_between_dates(date_start=cierre_min, date_end=cierre_max)
            fecha_cierre_str = fecha_sucia(fecha_cierre_dt)
    else:
        fecha_cierre_str = ''

    cargo_fijo = persona_config[id_random]['cargo']
    compania_fija = persona_config[id_random]['compania']

    fila = [
        f"{compania_fija}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        tipo_caso,
        nombre,
        id_random,
        cargo_fijo,
        resultado,
        generar_resumen_hechos(nombre, tipo_caso),
        fecha_reporte_str,
        fecha_cierre_str
    ]
    data_casos.append(fila)

df_casos = pd.DataFrame(data_casos, columns=[
    'CASE_NUMBER', 'ROL', 'TIPOLOG√çAS', 'NOMBRE_COMPLETO_COND',
    'NUMERO_IDENTIFICACION_COND', 'CARGO', 'RESULTADO_VERIFICACION',
    'RESUMEN_DE_LOS_HECHOS', 'FECHA_REPORTE', 'FECHA_CIERRE'
])

# Introducir duplicados y errores tipogr√°ficos
df_casos = pd.concat([df_casos, df_casos.sample(100, random_state=1)], ignore_index=True)
errores = df_casos.sample(frac=0.05, random_state=2).index
df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'] = df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'].apply(lambda x: x.replace('a', '@', 1))

# Guardar
df_casos.to_csv("datos_simulados/simulacion_datos_excel.csv", index=False, encoding='utf-8-sig')


‚∏ª

‚úÖ Resultado garantizado:
	‚Ä¢	Una misma persona siempre tendr√° el mismo cargo y la misma compa√±√≠a.
	‚Ä¢	Cada caso tiene su propia CASE_NUMBER, resultado, fechas, resumen, etc.

¬øDeseas tambi√©n que agregue el campo "ESTADO_CASO" como "CERRADO" o "EN PROCESO" seg√∫n si tiene o no FECHA_CIERRE?



Tengo el siguiente c√≥digo para generar bases simuladas, sin embargo debo garantizar que la persona (identificaci√≥n + nombre) tenga un √∫nico cargo y aunque tenga varios casos, debe pertenecer a la misma compa√±√≠a

import pandas as pd
import random
from faker import Faker
import os
from datetime import datetime, timedelta

fake = Faker('es_CO')

# Crear carpeta si no existe
os.makedirs("datos_simulados", exist_ok=True)

# ---------- PARTE 1: Crear base de identificaciones ----------
num_personas = 2000
ids = set()
while len(ids) < num_personas:
    ids.add(fake.random_int(min=10000, max=99999))
ids = list(ids)

ciudades_colombia = [
    'Bogot√°', 'Barrancabermeja', 'Barranquilla', 'Cartagena', 'C√∫cuta',
    'Bucaramanga', 'Orito', 'Manizales', 'Villavicencio',
    'Neiva', 'Puerto Gait√°n','Acac√≠as','Tauramena','Yopal','Saravena','Apiay','Cali'
]

# Crear datos de identificaci√≥n
data_ident = []
for id_num in ids:
    fila = [
        id_num,
        fake.date_of_birth(minimum_age=18, maximum_age=70).strftime('%Y-%m-%d'),
        random.choice(ciudades_colombia),
        fake.name()
    ]
    data_ident.append(fila)

df_ident = pd.DataFrame(data_ident, columns=[
    'NUMERO_IDENTIFICACION_COND', 'FECHA_NACIMIENTO', 'CIUDAD_TRABAJO', 'NOMBRE_COMPLETO_COND'
])
df_ident.to_csv("datos_simulados/base_identificaciones.csv", index=False, encoding='utf-8-sig')

# ---------- PARTE 2: Crear base de casos ----------
n = 10000  # N√∫mero de casos a simular
Tipolog√≠as = ['ACOSO LABORAL', 'ACOSO SEXUAL', 'CONFLICTO DE INTER√âS', 'CORRUPCI√ìN','FRAUDE','FINANCIACI√ìN DEL TERRORISMO','LAVADO DE ACTIVOS','INCUMPLIMIENTO DE NORMAS']
resultados = ['CORROBORADO', 'NO CORROBORADO', 'EN INVESTIGACI√ìN']
cargo = ['PROFESIONAL', 'GERENTE', 'COORDINADOR', 'CLIENTE', 'CONTRATISTA','VICEPRESIDENTE','TECNICO']
roles = ['DENUNCIANTE', 'IMPLICADO', '']

# Definir fecha de corte
fecha_corte = datetime(2025, 6, 30).date()

# Funci√≥n para formatear fechas "sucias"
def fecha_sucia(date_obj):
    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m-%d-%Y', '%d-%b-%Y', '%Y/%m/%d']
    return date_obj.strftime(random.choice(formatos))

# Generar datos de casos

import random

def generar_resumen_hechos(nombre, tipo_caso):
    hechos = {
        'ACOSO LABORAL': [
            f"{nombre} present√≥ una denuncia formal por acoso laboral reiterado por parte de un compa√±ero desde el mes de abril.",
            f"Se recibi√≥ una alerta en la que se indica que {nombre} ha sido v√≠ctima de hostigamiento constante por parte de su jefe inmediato.",
            f"{nombre} manifest√≥ sentirse intimidado y excluido sistem√°ticamente en su entorno laboral."
        ],
        'ACOSO SEXUAL': [
            f"{nombre} report√≥ haber recibido comentarios y gestos inapropiados de car√°cter sexual por parte de un colega.",
            f"Se recibi√≥ una denuncia de {nombre} por insinuaciones sexuales no consentidas durante una reuni√≥n de trabajo.",
            f"{nombre} manifest√≥ haber sido objeto de contacto f√≠sico no deseado por parte de un superior jer√°rquico."
        ],
        'CONFLICTO DE INTER√âS': [
            f"{nombre} consult√≥ sobre un posible conflicto de inter√©s al participar en un proceso donde est√° involucrado un familiar.",
            f"Se identific√≥ que {nombre} aprob√≥ contratos con una empresa vinculada a un amigo cercano sin declararlo previamente.",
            f"{nombre} expres√≥ dudas sobre su participaci√≥n en decisiones que podr√≠an beneficiarle indirectamente."
        ],
        'CORRUPCI√ìN': [
            f"{nombre} fue se√±alado por presuntamente recibir beneficios econ√≥micos a cambio de favorecer a un proveedor.",
            f"Se recibi√≥ una denuncia en la que se indica que {nombre} manipul√≥ procesos de contrataci√≥n para beneficiar a terceros.",
            f"{nombre} est√° siendo investigado por presunta participaci√≥n en actos de corrupci√≥n relacionados con licitaciones internas."
        ],
        'FRAUDE': [
            f"Durante una auditor√≠a, se detectaron inconsistencias en los reportes financieros firmados por {nombre}.",
            f"{nombre} fue vinculado a la creaci√≥n de documentos falsos para justificar gastos inexistentes.",
            f"Se identific√≥ que {nombre} alter√≥ registros contables con el fin de ocultar desv√≠os de fondos."
        ],
        'FINANCIACI√ìN DEL TERRORISMO': [
            f"Se detectaron transferencias sospechosas realizadas por {nombre} hacia cuentas en jurisdicciones de alto riesgo.",
            f"{nombre} est√° siendo investigado por posibles v√≠nculos con organizaciones se√±aladas por actividades terroristas.",
            f"Un reporte de operaci√≥n sospechosa involucra a {nombre} en movimientos financieros inusuales sin justificaci√≥n clara."
        ],
        'LAVADO DE ACTIVOS': [
            f"{nombre} fue identificado como parte de una red que canaliza fondos a trav√©s de empresas fachada.",
            f"Se detectaron operaciones financieras realizadas por {nombre} que no corresponden con su perfil econ√≥mico.",
            f"{nombre} figura como beneficiario final de transacciones asociadas a actividades de lavado de activos."
        ],
        'INCUMPLIMIENTO DE NORMAS': [
            f"{nombre} fue reportado por no cumplir con los protocolos de seguridad establecidos en su √°rea de trabajo.",
            f"Se identific√≥ que {nombre} omiti√≥ la aplicaci√≥n de controles obligatorios en un procedimiento cr√≠tico.",
            f"{nombre} incurri√≥ en el uso indebido de recursos institucionales, contraviniendo las pol√≠ticas internas."
        ]
    }
    return random.choice(hechos.get(tipo_caso, [f"No hay ejemplos disponibles para la tipolog√≠a '{tipo_caso}'"]))


data_casos = []
for i in range(n):
    id_random = random.choice(ids)
    nombre = df_ident[df_ident['NUMERO_IDENTIFICACION_COND'] == id_random]['NOMBRE_COMPLETO_COND'].values[0]
    tipo_caso = random.choice(Tipolog√≠as)
    resultado = random.choice(resultados)
  
    # Generar fecha de reporte (m√°ximo hasta la fecha de corte)
    fecha_inicio = fecha_corte - timedelta(days=730)  # Hasta 2 a√±os antes
    fecha_reporte_dt = fake.date_between_dates(date_start=fecha_inicio, date_end=fecha_corte)
    fecha_reporte_str = fecha_sucia(fecha_reporte_dt)

    # Generar fecha de cierre solo si est√° cerrado
    if resultado in ['CORROBORADO', 'NO CORROBORADO']:
        cierre_min = fecha_reporte_dt + timedelta(days=5)
        cierre_max = min(fecha_corte, fecha_reporte_dt + timedelta(days=90))
        if cierre_min >= cierre_max:
            fecha_cierre_str = ''
        else:
            fecha_cierre_dt = fake.date_between_dates(date_start=cierre_min, date_end=cierre_max)
            fecha_cierre_str = fecha_sucia(fecha_cierre_dt)
    else:
        fecha_cierre_str = ''



    fila = [
        f"{random.choice(['COMPA√ëIA_AA', 'COMPA√ëIA_BB', 'COMPA√ëIA_CC', 'COMPA√ëIA_DD'])}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        tipo_caso,
        nombre,
        id_random,
        random.choice(cargo),
        random.choice(resultados),
        generar_resumen_hechos(nombre, tipo_caso),
        fecha_reporte_str,
        fecha_cierre_str
    ]
    data_casos.append(fila)

df_casos = pd.DataFrame(data_casos, columns=[
    'CASE_NUMBER', 'ROL', 'TIPOLOG√çAS', 'NOMBRE_COMPLETO_COND',
    'NUMERO_IDENTIFICACION_COND', 'CARGO', 'RESULTADO_VERIFICACION',
    'RESUMEN_DE_LOS_HECHOS', 'FECHA_REPORTE','FECHA_CIERRE'
])

# Introducir duplicados y errores tipogr√°ficos (opcional)
df_casos = pd.concat([df_casos, df_casos.sample(100, random_state=1)], ignore_index=True)
errores = df_casos.sample(frac=0.05, random_state=2).index
df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'] = df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'].apply(lambda x: x.replace('a', '@', 1))

# Guardar
df_casos.to_csv("datos_simulados/simulacion_datos_excel.csv", index=False, encoding='utf-8-sig')
