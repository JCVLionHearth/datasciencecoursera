para los casos que son corroborados y no corroborados, se condiseran casos cerrados, por lo que debo agregar un campo de fecha de cierre para estos casos y en donde el resultado diga "en investigación" esta fecha debe estar en blanco

import pandas as pd
import random
from faker import Faker
import os

fake = Faker('es_CO')

# Crear carpeta si no existe
os.makedirs("datos_simulados", exist_ok=True)

# ---------- PARTE 1: Crear base de identificaciones ----------
num_personas = 2000
ids = set()
while len(ids) < num_personas:
    ids.add(fake.random_int(min=10000, max=99999))
ids = list(ids)

ciudades_colombia = [
    'Bogotá', 'Barrancabermeja', 'Barranquilla', 'Cartagena', 'Cúcuta',
    'Bucaramanga', 'Orito', 'Manizales', 'Villavicencio',
    'Neiva', 'Puerto Gaitán','Acacías','Tauramena','Yopal','Saravena','Apiay','Cali'
]

# Crear datos de identificación
data_ident = []
for id_num in ids:
    fila = [
        id_num,
        fake.date_of_birth(minimum_age=18, maximum_age=70).strftime('%Y-%m-%d'),
        random.choice(ciudades_colombia),
        fake.name()
    ]
    data_ident.append(fila)

df_ident = pd.DataFrame(data_ident, columns=[
    'NUMERO_IDENTIFICACION_COND', 'FECHA_NACIMIENTO', 'CIUDAD_TRABAJO', 'NOMBRE_COMPLETO_COND'
])
df_ident.to_csv("datos_simulados/base_identificaciones.csv", index=False, encoding='utf-8-sig')

# ---------- PARTE 2: Crear base de casos ----------
n = 10000  # Número de casos a simular
case_types = ['ALERTA', 'DILEMA', 'FALTA DE TERCEROS', 'DENUNCIA']
resultados = ['CORROBORADO', 'NO CORROBORADO', 'EN INVESTIGACIÓN']
cargo = ['PROFESIONAL', 'GERENTE', 'COORDINADOR', 'CLIENTE', 'CONTRATISTA','VICEPRESIDENTE','TECNICO']
roles = ['DENUNCIANTE', 'IMPLICADO', '']

def fecha_sucia():
    date = fake.date_between(start_date='-2y', end_date='today')
    formatos = ['%Y-%m-%d', '%d/%m/%Y', '%m-%d-%Y', '%d-%b-%Y', '%Y/%m/%d']
    return date.strftime(random.choice(formatos))

# Generar datos de casos

def generar_resumen_hechos(nombre, tipo_caso):
    hechos = {
        'ALERTA': [
            f"Se recibió una alerta anónima en la que se reporta una posible irregularidad cometida por {nombre} relacionada con procedimientos de contratación.",
            f"Durante un control rutinario, se identificó una alerta interna que involucra a {nombre} por presunto incumplimiento de políticas de seguridad.",
            f"El sistema de auditoría automática generó una alerta por accesos inusuales realizados por {nombre} en horarios no laborables."
        ],
        'DILEMA': [
            f"{nombre} consultó al área de ética sobre un posible conflicto de interés al participar en un proceso donde está involucrado un familiar cercano.",
            f"Se reportó un dilema ético por parte de {nombre} al recibir obsequios de un proveedor con el que actualmente negocia condiciones contractuales.",
            f"{nombre} expresó dudas sobre su participación en decisiones que pueden generar beneficios personales indirectos."
        ],
        'FALTA DE TERCEROS': [
            f"{nombre} reportó que un contratista incurrió en comportamientos inadecuados con otros empleados durante una reunión.",
            f"Según {nombre}, un proveedor incurrió en prácticas que contravienen el código de ética durante la ejecución de un proyecto.",
            f"Se recibió reporte de {nombre} donde manifiesta que un cliente realizó insinuaciones indebidas hacia su equipo de trabajo."
        ],
        'DENUNCIA': [
            f"{nombre} presentó una denuncia formal contra un compañero por acoso laboral reiterado desde el mes de abril.",
            f"Se recibió denuncia de {nombre} en la que se indica que su jefe inmediato ha manipulado resultados para favorecer decisiones personales.",
            f"{nombre} interpuso una denuncia por actos de corrupción en el proceso de selección de contratistas, con evidencia documental."
        ]
    }
    return random.choice(hechos[tipo_caso])

data_casos = []
for i in range(n):
    id_random = random.choice(ids)
    nombre = df_ident[df_ident['NUMERO_IDENTIFICACION_COND'] == id_random]['NOMBRE_COMPLETO_COND'].values[0]
    tipo_caso = random.choice(case_types)

    fila = [
        f"{random.choice(['COMPAÑIA_AA', 'COMPAÑIA_BB', 'COMPAÑIA_CC', 'COMPAÑIA_DD'])}-{random.randint(2018, 2024)}-{random.randint(1, 12)}-{random.randint(20000, 29999)}",
        random.choice(roles),
        tipo_caso,
        nombre,
        id_random,
        random.choice(cargo),
        random.choice(resultados),
        generar_resumen_hechos(nombre, tipo_caso),
        fecha_sucia()
    ]
    data_casos.append(fila)

df_casos = pd.DataFrame(data_casos, columns=[
    'CASE_NUMBER', 'ROL', 'CASE_TYPE', 'NOMBRE_COMPLETO_COND',
    'NUMERO_IDENTIFICACION_COND', 'CARGO', 'RESULTADO_VERIFICACION',
    'RESUMEN_DE_LOS_HECHOS', 'FECHA_REPORTE'
])

# Introducir duplicados y errores tipográficos (opcional)
df_casos = pd.concat([df_casos, df_casos.sample(100, random_state=1)], ignore_index=True)
errores = df_casos.sample(frac=0.05, random_state=2).index
df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'] = df_casos.loc[errores, 'NOMBRE_COMPLETO_COND'].apply(lambda x: x.replace('a', '@', 1))

# Guardar
df_casos.to_csv("datos_simulados/simulacion_datos_excel.csv", index=False, encoding='utf-8-sig')
