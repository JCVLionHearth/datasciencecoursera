Para lograr lo que necesitas, podrías seguir estos pasos para contar las causas únicas asociadas a un riesgo y almacenarlas en un resumen de la base de datos de riesgos:

	1.	Estructura de las bases de datos:
	•	Riesgos: contiene la información principal de cada riesgo, incluyendo el campo causas_resumidas que actualizarás.
	•	Controles: incluye un campo causas (lista de causas) y un campo id_riesgo que asocia el control a un riesgo.
	•	Acciones: también contiene un campo causas y un campo id_riesgo para asociar la acción a un riesgo.
	2.	Algoritmo para contar las causas únicas:
	•	Primero, deberás consultar todos los controles y acciones asociadas a un riesgo particular, y extraer las causas de cada uno.
	•	Luego, unificar las listas de causas provenientes de controles y acciones, eliminando duplicados.
	•	Contar cuántas causas únicas quedan después de eliminar duplicados y almacenar ese valor en el campo causas_resumidas del riesgo correspondiente.
	3.	Código:
Suponiendo que usas SQLAlchemy para manejar las bases de datos, podrías implementar algo así:

from sqlalchemy import func
from models import Riesgo, Control, Accion  # Modelos de tus bases de datos

# Función para actualizar el campo de causas resumidas en la base de datos de riesgos
def actualizar_causas_resumidas(riesgo_id, session):
    # Obtener causas desde controles y acciones
    causas_controles = session.query(Control.causas).filter_by(id_riesgo=riesgo_id).all()
    causas_acciones = session.query(Accion.causas).filter_by(id_riesgo=riesgo_id).all()

    # Combinar todas las causas en una sola lista
    todas_causas = [causa for sublist in causas_controles for causa in sublist[0]] + \
                   [causa for sublist in causas_acciones for causa in sublist[0]]

    # Eliminar duplicados
    causas_unicas = set(todas_causas)

    # Contar el número de causas únicas
    num_causas = len(causas_unicas)

    # Actualizar el campo en la tabla de riesgos
    riesgo = session.query(Riesgo).filter_by(id=riesgo_id).first()
    riesgo.causas_resumidas = num_causas
    session.commit()

# Ejemplo de uso
# session es la conexión a la base de datos
actualizar_causas_resumidas(riesgo_id=1, session=session)

	4.	Explicación:
	•	Se extraen todas las causas de los controles y acciones asociados a un riesgo específico.
	•	Se combinan en una sola lista y se eliminan los duplicados utilizando set().
	•	Finalmente, se actualiza el campo causas_resumidas en la tabla de riesgos con el conteo de causas únicas.
	5.	Actualización del resumen:
Este mismo enfoque puede ser utilizado para generar un resumen de riesgos en tu aplicación o interfaz, mostrando el número de controles, acciones y causas únicas para cada riesgo.

Este flujo te permitirá consolidar las causas, evitando duplicados y reflejando la cantidad total de causas en tu resumen de riesgos.

#parte 2

Modificaciones en utils.py

Agreguemos una variable que indique si los archivos han sido cargados, y modifiquemos las funciones de carga para actualizar este estado:

import pandas as pd

# Variables para controlar si los archivos han sido cargados
archivos_cargados = {
    "controles": False,
    "acciones": False
}

def cargar_controles():
    try:
        df = pd.read_excel('Controles.xlsx')
        archivos_cargados['controles'] = True  # Actualiza el estado de controles cargados
        return df['Nombre_control'].tolist()
    except FileNotFoundError:
        archivos_cargados['controles'] = False  # No se encontró el archivo
        return []

def cargar_acciones():
    try:
        df = pd.read_excel('Acciones.xlsx')
        archivos_cargados['acciones'] = True  # Actualiza el estado de acciones cargadas
        return [(row['Puntaje_AT'], row['AT']) for index, row in df.iterrows()]
    except FileNotFoundError:
        archivos_cargados['acciones'] = False  # No se encontró el archivo
        return []

En estas funciones de carga, hemos añadido un manejo de excepciones para detectar si los archivos de Excel no existen o no se pueden cargar correctamente. Si esto sucede, las funciones retornarán una lista vacía y se actualizará la variable archivos_cargados para indicar que los archivos no se han cargado.

Modificaciones en forms.py

Ahora, podemos ajustar los formularios para verificar si los archivos han sido cargados antes de permitir que el usuario los use. En caso contrario, mostraremos un mensaje o deshabilitaremos los formularios:

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField, TextAreaField, ValidationError
from wtforms.validators import DataRequired
from app.utils import cargar_controles, cargar_acciones, archivos_cargados

controles = cargar_controles()
acciones = cargar_acciones()

class RiskForm(FlaskForm):
    # Campos del formulario de riesgos

    def validate(self):
        # Validación adicional para asegurarse de que los controles y acciones se han cargado
        if not archivos_cargados['controles'] or not archivos_cargados['acciones']:
            raise ValidationError('No se han cargado los archivos necesarios para completar el formulario.')
        return super().validate()

class ControlForm(FlaskForm):
    # Validación de controles cargados
    nombre_control = SelectField('Nombre del Control', choices=[(control, control) for control in controles])
    
    def validate(self):
        if not archivos_cargados['controles']:
            raise ValidationError('No se han cargado los controles. Por favor, cargue el archivo correspondiente.')
        return super().validate()

class AccionTratamientoForm(FlaskForm):
    # Validación de acciones cargadas
    categoria = SelectField('Categoría de la Acción', choices=acciones, coerce=int)
    
    def validate(self):
        if not archivos_cargados['acciones']:
            raise ValidationError('No se han cargado las acciones. Por favor, cargue el archivo correspondiente.')
        return super().validate()

Explicación de los cambios:

	1.	Carga inicial: Las variables archivos_cargados mantienen el estado de si los archivos se han cargado o no. Esto se actualiza en las funciones cargar_controles() y cargar_acciones().
	2.	Validaciones en los formularios: Se agrega una validación adicional en cada formulario (mediante la función validate) que asegura que si los archivos no han sido cargados, el formulario arrojará un error y no permitirá su envío.
	3.	Manejo de excepciones: Si no se encuentran los archivos de Excel, los formularios presentarán un error para que el usuario sepa que primero deben cargarse los archivos antes de proceder.

Una vez implementados estos cambios, lo siguiente será asegurarnos de que haya una interfaz o proceso que permita cargar los archivos de Excel nuevamente si se actualizan o cambian.

¿Te parece si seguimos con esa parte en la siguiente etapa?

Gracias por compartir el código completo. Hasta ahora, veo que has implementado rutas para la creación y valoración de riesgos, así como la gestión de controles y acciones de tratamiento. También has incluido la funcionalidad para cargar archivos de parámetros como controles y acciones.

Vamos a enfocarnos en lo siguiente:

	1.	Validación de la carga de archivos: Asegurarnos de que las rutas que dependen de los archivos de Excel (como controles y acciones) verifiquen si los archivos están disponibles antes de permitir la interacción con los formularios.
	2.	Validación de los formularios: Revisar que cada formulario haga una validación apropiada sobre la disponibilidad de los datos cargados antes de la interacción.

Para lograr esto, podemos agregar las siguientes modificaciones en routes.py y en la plantilla de la interfaz de usuario.

Modificaciones en routes.py

Primero, modificaremos la ruta de creación de riesgos y controles para verificar si los archivos de parámetros han sido cargados antes de permitir que se renderice el formulario. Para ello, aprovechamos las funciones cargar_controles() y cargar_acciones() para verificar si los archivos han sido cargados.

Modificamos el método crear_riesgo y las demás rutas dependientes de parámetros:

from app.utils import archivos_cargados  # Verificar archivos cargados

# Ruta para crear un nuevo riesgo
@main.route('/crear_riesgo', methods=['GET', 'POST'])
def crear_riesgo():
    if not archivos_cargados['controles'] or not archivos_cargados['acciones']:
        flash('Debe cargar los archivos de controles y acciones antes de continuar', 'warning')
        return redirect(url_for('main.parametros'))

    form = RiskForm()
    if form.validate_on_submit():
        # Lógica de creación de riesgo
        impacto_inherente = calcular_puntaje_inherente(
            form.impacto_personas.data, form.impacto_ambiente.data,
            form.impacto_recursos_economicos.data, form.impacto_reputacional.data,
            form.impacto_clientes.data)
        
        nuevo_riesgo = Risk(
            nombre=form.nombre.data,
            codigo=form.codigo.data,
            escenario=form.escenario.data,
            probabilidad_inherente=form.probabilidad_inherente.data,
            impacto_personas=form.impacto_personas.data,
            impacto_ambiente=form.impacto_ambiente.data,
            impacto_recursos_economicos=form.impacto_recursos_economicos.data,
            impacto_reputacional=form.impacto_reputacional.data,
            impacto_clientes=form.impacto_clientes.data,
            impacto_inherente=impacto_inherente
        )
        db.session.add(nuevo_riesgo)
        db.session.commit()
        flash('Riesgo creado con éxito', 'success')
        return redirect(url_for('main.index'))

    return render_template('crear_riesgo.html', form=form)

# Validación de controles y acciones antes de agregar
@main.route('/riesgo/<int:id>/agregar_control', methods=['GET', 'POST'])
def agregar_control(id):
    if not archivos_cargados['controles']:
        flash('Debe cargar el archivo de controles antes de agregar un control', 'warning')
        return redirect(url_for('main.parametros'))

    riesgo = Risk.query.get_or_404(id)
    form = ControlForm()

    if form.validate_on_submit():
        nuevo_control = Control(
            nombre_control=form.nombre_control.data,
            tipo=form.tipo.data,
            clase=form.clase.data,
            efectividad=form.efectividad.data,
            cubrimiento_causa=form.cubrimiento_causa.data,
            cubrimiento_consecuencia=form.cubrimiento_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nuevo_control)
        db.session.commit()
        flash('Control añadido con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_control.html', form=form, riesgo=riesgo)

@main.route('/riesgo/<int:id>/agregar_accion', methods=['GET', 'POST'])
def agregar_accion(id):
    if not archivos_cargados['acciones']:
        flash('Debe cargar el archivo de acciones antes de agregar una acción de tratamiento', 'warning')
        return redirect(url_for('main.parametros'))

    riesgo = Risk.query.get_or_404(id)
    form = AccionTratamientoForm()

    if form.validate_on_submit():
        at = dict(form.categoria.choices).get(form.categoria.data)
        nueva_accion = AccionTratamiento(
            at=at,
            categoria=form.categoria.data,
            puntos_causa=form.puntos_causa.data,
            puntos_consecuencia=form.puntos_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nueva_accion)
        db.session.commit()
        flash('Acción de tratamiento añadida con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_accion.html', form=form, riesgo=riesgo)

Explicación

	•	Verificación de archivos cargados: Antes de permitir al usuario crear un riesgo o agregar controles/acciones, verificamos que los archivos de parámetros (controles y acciones) hayan sido cargados.
	•	Redirección a la página de parámetros: Si los archivos no han sido cargados, redirigimos al usuario a la página de parámetros y mostramos un mensaje de advertencia.

Interfaz de Usuario (Plantilla HTML)

En las plantillas crear_riesgo.html, agregar_control.html y agregar_accion.html, puedes agregar una validación condicional que también muestre un mensaje si los archivos no han sido cargados.

{% if not archivos_cargados['controles'] or not archivos_cargados['acciones'] %}
    <div class="alert alert-warning">
        Debe cargar los archivos de parámetros antes de continuar.
    </div>
{% endif %}

Con estos cambios, el sistema asegura que los archivos de parámetros estén disponibles antes de permitir que el usuario interactúe con los formularios.

¿Te gustaría avanzar con las siguientes partes?

Con toda la información que me has proporcionado, puedo ayudarte a consolidar y mejorar el flujo de trabajo de tu aplicación Flask para la gestión y valoración de riesgos. A continuación te detallo algunas ideas clave y mejoras que puedes implementar en las distintas partes del código:

1. Consolidación del Backend y Formularios

Si no lo has hecho ya, puedes aprovechar WTForms o Flask-WTF para crear tus formularios, ya que ofrecen una validación más robusta y manejan las entradas de manera más segura. Los formularios que usas en tus plantillas como crear_riesgo.html, valoracion_riesgo.html, agregar_control.html, etc., pueden seguir este esquema.

Ejemplo de Formulario con WTForms:

from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, TextAreaField, SelectField, FileField
from wtforms.validators import DataRequired, NumberRange

class RiesgoForm(FlaskForm):
    nombre = StringField('Nombre', validators=[DataRequired()])
    codigo = StringField('Código', validators=[DataRequired()])
    escenario = TextAreaField('Escenario')
    probabilidad_inherente = IntegerField('Probabilidad Inherente', validators=[NumberRange(min=1, max=5)])

    impacto_personas = IntegerField('Impacto Personas', validators=[NumberRange(min=1, max=5)])
    impacto_ambiente = IntegerField('Impacto Ambiente', validators=[NumberRange(min=1, max=5)])
    impacto_recursos_economicos = IntegerField('Impacto Recursos Económicos', validators=[NumberRange(min=1, max=5)])
    impacto_reputacional = IntegerField('Impacto Reputacional', validators=[NumberRange(min=1, max=5)])
    impacto_clientes = IntegerField('Impacto Clientes', validators=[NumberRange(min=1, max=5)])

Control y Acción de Tratamiento:
Si los formularios de Control y Acción de Tratamiento tienen muchos campos repetidos, considera un BaseForm que pueda ser extendido por otros formularios específicos.

2. Carga de Archivos y Parámetros

En la vista de parametros.html, donde se cargan los archivos de controles y acciones, asegúrate de que el procesamiento del archivo Excel (.xlsx) se maneje correctamente en tu backend. Para esto puedes usar bibliotecas como openpyxl o pandas para leer los archivos Excel.

Backend para manejar la carga:

from flask import request, redirect, url_for, flash
import pandas as pd

@app.route('/parametros', methods=['GET', 'POST'])
def definir_parametros():
    if request.method == 'POST':
        cantidad_riesgos = request.form['cantidad_riesgos']
        archivo_controles = request.files['archivo_controles']
        archivo_acciones = request.files['archivo_acciones']
        
        # Leer los archivos Excel
        controles_df = pd.read_excel(archivo_controles)
        acciones_df = pd.read_excel(archivo_acciones)

        # Procesa los datos y almacena en base de datos
        # ...
        
        flash("Parámetros definidos correctamente.")
        return redirect(url_for('main.index'))
    return render_template('parametros.html')

3. Dashboard y Visualización de Datos

Para el dashboard, podrías implementar gráficos y tablas dinámicas usando Flask-Chart.js o Plotly. Estas librerías te permitirán visualizar las variaciones entre riesgos inherentes y residuales de manera atractiva.

Ejemplo con Chart.js:

En tu vista del dashboard (dashboard.html):

<canvas id="riskChart"></canvas>

<script>
    var ctx = document.getElementById('riskChart').getContext('2d');
    var riskChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Riesgo 1', 'Riesgo 2', 'Riesgo 3'], // Nombres de los riesgos
            datasets: [{
                label: 'Riesgo Inherente',
                data: [5, 3, 4], // Valores de riesgo inherente
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
            },
            {
                label: 'Riesgo Residual',
                data: [3, 2, 1], // Valores de riesgo residual
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>

Backend para el dashboard:

@app.route('/dashboard')
def dashboard():
    riesgos = get_riesgos_con_valores()  # Función que trae los riesgos y sus valores
    return render_template('dashboard.html', riesgos=riesgos)

4. Flujos y Confirmaciones

En tu código has implementado varias confirmaciones de acciones destructivas, como eliminar un control o riesgo. Asegúrate de que siempre exista un proceso de respaldo de los datos para evitar pérdidas permanentes.

5. Final Touches y UX

	•	Consistencia de Estilos: Usar Bootstrap es una buena elección para estilos consistentes. Sin embargo, asegúrate de revisar las clases como col-sm-2, col-sm-10, etc., para un mejor ajuste en pantallas más pequeñas.
	•	Manejo de Errores: No olvides manejar errores de validación o excepciones durante la carga de archivos o procesos en segundo plano.
	•	Documentación: Asegúrate de documentar bien el flujo de trabajo, especialmente si otros usuarios también interactuarán con los controles y acciones de tratamiento.

Con estas mejoras, tu aplicación debería estar mucho más completa y funcional. ¿Hay algún aspecto específico que te gustaría que detalláramos más?

# parte final

agregar_accion.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Añadir Acción de Tratamiento</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        <h1 class="text-center">Añadir Acción de Tratamiento: {{ riesgo.nombre }}</h1>

        <form method="POST" class="form-horizontal">
            {{ form.hidden_tag() }}
            
            <div class="form-group">
                <label for="categoria" class="col-sm-2 control-label">{{ form.categoria.label }}</label>
                <div class="col-sm-10">
                    {{ form.categoria(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="puntos_causa" class="col-sm-2 control-label">{{ form.puntos_causa.label }}</label>
                <div class="col-sm-10">
                    {{ form.puntos_causa(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="puntos_consecuencia" class="col-sm-2 control-label">{{ form.puntos_consecuencia.label }}</label>
                <div class="col-sm-10">
                    {{ form.puntos_consecuencia(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-success">Guardar AT</button>
                </div>
            </div>
        </form>

        <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}" class="btn btn-default">Regresar</a>
    </div>
</body>
</html>

agregar_control.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Añadir Control</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        <h1 class="text-center">Añadir Control para el Riesgo: {{ riesgo.nombre }}</h1>

        <form method="POST" class="form-horizontal">
            {{ form.hidden_tag() }}
            
            <div class="form-group">
                <label for="nombre_control" class="col-sm-2 control-label">{{ form.nombre_control.label }}</label>
                <div class="col-sm-10">
                    {{ form.nombre_control(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="tipo" class="col-sm-2 control-label">{{ form.tipo.label }}</label>
                <div class="col-sm-10">
                    {{ form.tipo(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="clase" class="col-sm-2 control-label">{{ form.clase.label }}</label>
                <div class="col-sm-10">
                    {{ form.clase(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="efectividad" class="col-sm-2 control-label">{{ form.efectividad.label }}</label>
                <div class="col-sm-10">
                    {{ form.efectividad(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="cubrimiento_causa" class="col-sm-2 control-label">{{ form.cubrimiento_causa.label }}</label>
                <div class="col-sm-10">
                    {{ form.cubrimiento_causa(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="cubrimiento_consecuencia" class="col-sm-2 control-label">{{ form.cubrimiento_consecuencia.label }}</label>
                <div class="col-sm-10">
                    {{ form.cubrimiento_consecuencia(class="form-control") }}
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-success" >Guardar Control</button>
                </div>
            </div>
        </form>

        <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}" class="btn btn-default">Regresar</a>
    </div>
</body>
</html>




Actualmente tengo las siguientes funciones para cargar un listado de opciones a partir de archivos creados previamente en excel, lo que quiero es que previamente 
estos archivos de excel sean cargados una vez o las veces que se necesiten, ya que el listado puede cambiar, pero una vez cargados las opciones esten habilitadas, 
despues cualquier usuario puede diligenciar el formulario porque ya estan cargados los archivos, 
sin embargo si ningun archivo estuviera cargado no se debe permitir el ingreso de datos en estos formularios y se debe dar aviso que no hay ningun archivo cargado, 

Voy a compartirte fragmentos de codigo, en seis partes

#parte 1

utils.py

import pandas as pd

def cargar_controles():
    df = pd.read_excel('Controles.xlsx')
    return df['Nombre_control'].tolist()

def cargar_acciones():
    df = pd.read_excel('Acciones.xlsx')
    return [(row['Puntaje_AT'], row['AT']) for index, row in df.iterrows()]

def calcular_puntaje_inherente(impacto_personas,impacto_ambiente,impacto_recursos_economicos,impacto_reputacional,impacto_clientes):
    """
    Calcula el impacto inherente como la puntuación máxima de las categorías de impacto.
    """
    impacto_inherente=max(impacto_personas,impacto_ambiente,impacto_recursos_economicos,impacto_reputacional,impacto_clientes)
    return (impacto_inherente)

def calcular_reduccion_por_controles(controles):
    """
    Calcula la reducción de riesgo basada en los controles asociados al riesgo.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    for control in controles:
        puntos_causa = control.clase + control.efectividad + control.cubrimiento_causa
        puntos_consecuencia = control.clase + control.efectividad + control.cubrimiento_consecuencia
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(controles), puntos_consecuencia_total / len(controles))

def calcular_reduccion_por_acciones(acciones):
    """
    Calcula la reducción de riesgo basada en las acciones de tratamiento.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    puntaje_residual_causa=0
    puntaje_residual_consecuencia=0
    for accion in acciones:
        puntos_causa = (accion.puntos_causa + accion.categoria) / 2
        puntos_consecuencia = (accion.puntos_consecuencia + accion.categoria) / 2
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(acciones), puntos_consecuencia_total / len(acciones))

def calcular_riesgo_residual(riesgo, controles, acciones):
    """
    Calcula el riesgo residual después de aplicar controles y acciones de tratamiento.
    El resultado se obtiene ponderando el 30% por controles y el 70% por acciones de tratamiento.
    """
    # Calcular reducciones por controles y acciones
    reduccion_controles = calcular_reduccion_por_controles(controles)
    reduccion_acciones = calcular_reduccion_por_acciones(acciones)

    # Ponderación de la reducción
    causa_residual = (reduccion_controles[0] * 0.30) + (reduccion_acciones[0] * 0.70)
    if causa_residual < 60:
        puntaje_residual_causa= 0
    elif (60<=causa_residual < 80):
        puntaje_residual_causa= 1
    else:
        puntaje_residual_causa= 2

    consecuencia_residual = (reduccion_controles[1] * 0.30) + (reduccion_acciones[1] * 0.70)
    if consecuencia_residual < 60:
        puntaje_residual_consecuencia=0
    elif (60<=consecuencia_residual < 80):
        puntaje_residual_consecuencia=1
    else:
        puntaje_residual_consecuencia=2

    return (puntaje_residual_causa, puntaje_residual_consecuencia)

#########

forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField, TextAreaField
from wtforms.validators import DataRequired
from app.utils import cargar_controles, cargar_acciones

controles = cargar_controles()
acciones = cargar_acciones()

class RiskForm(FlaskForm):
    codigo = StringField('Código del Riesgo', validators=[DataRequired()])
    nombre = StringField('Nombre del Riesgo', validators=[DataRequired()])
    escenario = TextAreaField('Escenario de Valoración', render_kw={"rows": 4})
    probabilidad_inherente = SelectField('Probabilidad Inherente', choices=[(1, 'Raro'), (2, 'Improbable'), (3, 'Posible'), (4, 'Probable'), (5, 'Con Certeza')], coerce=int)
    impacto_personas = SelectField('Impacto Personas', 
                          choices=[(1, 'Muy Bajo'), 
                                   (2, 'Bajo'), 
                                   (3, 'Medio'), 
                                   (4, 'Alto'), 
                                   (5, 'Muy Alto')],
                          coerce=int)
    impacto_ambiente = SelectField('Impacto Ambiente', 
                        choices=[(1, 'Muy Bajo'), 
                                (2, 'Bajo'), 
                                (3, 'Medio'), 
                                (4, 'Alto'), 
                                (5, 'Muy Alto')],
                        coerce=int)
    impacto_recursos_economicos = SelectField('Impacto Recursos Económicos', 
                        choices=[(1, 'Muy Bajo'), 
                                (2, 'Bajo'), 
                                (3, 'Medio'), 
                                (4, 'Alto'), 
                                (5, 'Muy Alto')],
                        coerce=int)
    impacto_reputacional = SelectField('Impacto Reputacional', 
                        choices=[(1, 'Muy Bajo'), 
                                (2, 'Bajo'), 
                                (3, 'Medio'), 
                                (4, 'Alto'), 
                                (5, 'Muy Alto')],
                        coerce=int)
    impacto_clientes = SelectField('Impacto Clientes', 
                        choices=[(1, 'Muy Bajo'), 
                                (2, 'Bajo'), 
                                (3, 'Medio'), 
                                (4, 'Alto'), 
                                (5, 'Muy Alto')],
                        coerce=int)
    submit = SubmitField('Guardar')

class ControlForm(FlaskForm):
    nombre_control = SelectField('Nombre del Control', choices=[(control, control) for control in cargar_controles()])
    tipo = SelectField('Tipo de Control', choices=[('preventivo', 'Preventivo'), ('detectivo', 'Detectivo'), ('correctivo', 'Correctivo')])
    clase = SelectField('Clase de Control', choices=[(5, 'Manual'), (10, 'Manual TI'), (15, 'Automático')])
    efectividad = SelectField('Efectividad', choices=[(0, 'Inefectivo'), (70, 'Efectivo')], coerce=int)
    cubrimiento_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    cubrimiento_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')

class AccionTratamientoForm(FlaskForm):
    # categoria = StringField('Categoría de la Acción', validators=[DataRequired()])
    # categoria = SelectField('Categoría de la Acción', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    categoria = SelectField('Categoría de la Acción', choices=cargar_acciones(), coerce=int)
    puntos_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    puntos_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')   


# parte 2/6


routes.py

from flask import render_template, redirect, url_for, flash, request
from flask import Blueprint
from app import db
from app.models import Risk
from app.forms import RiskForm
from app.forms import ControlForm, AccionTratamientoForm
from app.models import Control, AccionTratamiento
from werkzeug.utils import secure_filename
import json
from flask import jsonify
from app.utils import calcular_puntaje_inherente, calcular_riesgo_residual,calcular_reduccion_por_controles,calcular_reduccion_por_acciones,obtener_nivel_riesgo,cargar_controles, cargar_acciones
from app.matriz_riesgo import generar_matriz_riesgo
import random
import colorsys
from flask import send_file
import pandas as pd
from io import BytesIO


main = Blueprint('main', __name__)

# Ruta para la página principal, donde se listan los riesgos
@main.route('/')
def index():
    riesgos = Risk.query.all()
    return render_template('index.html', riesgos=riesgos)

# Ruta para crear un nuevo riesgo
@main.route('/crear_riesgo', methods=['GET', 'POST'])
def crear_riesgo():
    form = RiskForm()
    if form.validate_on_submit():
        impacto_inherente = calcular_puntaje_inherente(form.impacto_personas.data,form.impacto_ambiente.data,form.impacto_recursos_economicos.data,form.impacto_reputacional.data,form.impacto_clientes.data)
        nuevo_riesgo = Risk(
            nombre=form.nombre.data,
            codigo=form.codigo.data,
            escenario=form.escenario.data,
            probabilidad_inherente=form.probabilidad_inherente.data,
            impacto_personas = form.impacto_personas.data,
            impacto_ambiente = form.impacto_ambiente.data,
            impacto_recursos_economicos = form.impacto_recursos_economicos.data,
            impacto_reputacional = form.impacto_reputacional.data,
            impacto_clientes = form.impacto_clientes.data,
            impacto_inherente=impacto_inherente            
        )
        db.session.add(nuevo_riesgo)
        db.session.commit()
        flash('Riesgo creado con éxito', 'success')
        return redirect(url_for('main.index'))
    
    return render_template('crear_riesgo.html', form=form)

# Ruta para valorar un riesgo existente
@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)

    if form.validate_on_submit():
        riesgo.nombre = form.nombre.data
        riesgo.codigo = form.codigo.data
        riesgo.escenario = form.escenario.data
        riesgo.probabilidad_inherente = form.probabilidad_inherente.data
        riesgo.impacto_personas = form.impacto_personas.data
        riesgo.impacto_ambiente = form.impacto_ambiente.data
        riesgo.impacto_recursos_economicos = form.impacto_recursos_economicos.data
        riesgo.impacto_reputacional = form.impacto_reputacional.data
        riesgo.impacto_clientes = form.impacto_clientes.data
        riesgo.impacto_inherente = calcular_puntaje_inherente(riesgo.impacto_personas,riesgo.impacto_ambiente,riesgo.impacto_recursos_economicos,riesgo.impacto_reputacional,riesgo.impacto_clientes)

        db.session.commit()
        flash('Valoración del riesgo actualizada', 'success')
        return redirect(url_for('main.index'))

    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)

# Ruta para la ventana de parámetros
@main.route('/parametros', methods=['GET', 'POST'])
def parametros():
    if request.method == 'POST':
        archivo_controles = request.files['archivo_controles']
        archivo_acciones = request.files['archivo_acciones']
        
        if archivo_controles and archivo_acciones:
            filename_controles = secure_filename(archivo_controles.filename)
            filename_acciones = secure_filename(archivo_acciones.filename)
            
            archivo_controles.save(os.path.join('uploads', filename_controles))
            archivo_acciones.save(os.path.join('uploads', filename_acciones))
            
            flash('Archivos cargados y parámetros definidos con éxito', 'success')
            return redirect(url_for('main.index'))
    
    return render_template('parametros.html')

# Ruta para agregar un control a un riesgo
@main.route('/riesgo/<int:id>/agregar_control', methods=['GET', 'POST'])
def agregar_control(id):
    riesgo = Risk.query.get_or_404(id)
    form = ControlForm()

    if form.validate_on_submit():
        nuevo_control = Control(
            nombre_control=form.nombre_control.data,
            tipo=form.tipo.data,
            clase=form.clase.data,
            efectividad=form.efectividad.data,
            cubrimiento_causa=form.cubrimiento_causa.data,
            cubrimiento_consecuencia=form.cubrimiento_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nuevo_control)
        db.session.commit()
        flash('Control añadido con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_control.html', form=form, riesgo=riesgo)

# Ruta para agregar una acción de tratamiento a un riesgo
@main.route('/riesgo/<int:id>/agregar_accion', methods=['GET', 'POST'])
def agregar_accion(id):
    riesgo = Risk.query.get_or_404(id)
    form = AccionTratamientoForm()

    if form.validate_on_submit():
        at=dict(form.categoria.choices).get(form.categoria.data)
        nueva_accion = AccionTratamiento(
            at=at,
            categoria=form.categoria.data,
            puntos_causa=form.puntos_causa.data,
            puntos_consecuencia=form.puntos_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nueva_accion)
        db.session.commit()
        flash('Acción de tratamiento añadida con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_accion.html', form=form, riesgo=riesgo)

## Rutas para editar y eliminar controles

@main.route('/control/<int:id>/editar', methods=['GET', 'POST'])
def editar_control(id):
    control = Control.query.get_or_404(id)
    form = ControlForm(obj=control)

    if form.validate_on_submit():
        control.nombre_control = form.nombre_control.data
        control.tipo = form.tipo.data
        control.clase = form.clase.data
        control.efectividad = form.efectividad.data
        control.cubrimiento_causa = form.cubrimiento_causa.data
        control.cubrimiento_consecuencia = form.cubrimiento_consecuencia.data
        db.session.commit()
        flash('Control actualizado con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=control.riesgo_id))

    return render_template('agregar_control.html', form=form, riesgo=control.riesgo)


@main.route('/control/<int:id>/eliminar', methods=['GET', 'POST'])
def eliminar_control(id):
    control = Control.query.get_or_404(id)
    db.session.delete(control)
    db.session.commit()
    flash('Control eliminado con éxito', 'success')
    return redirect(url_for('main.valoracion_riesgo', id=control.riesgo_id))


## Rutas para editar y eliminar acciones

@main.route('/accion/<int:id>/editar', methods=['GET', 'POST'])
def editar_accion(id):
    accion = AccionTratamiento.query.get_or_404(id)
    form = AccionTratamientoForm(obj=accion)

    if form.validate_on_submit():
        accion.categoria = form.categoria.data
        accion.puntos_causa = form.puntos_causa.data
        accion.puntos_consecuencia = form.puntos_consecuencia.data
        db.session.commit()
        flash('Acción de tratamiento actualizada con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

    return render_template('agregar_accion.html', form=form, riesgo=accion.riesgo)


@main.route('/accion/<int:id>/eliminar', methods=['GET', 'POST'])
def eliminar_accion(id):
    accion = AccionTratamiento.query.get_or_404(id)
    db.session.delete(accion)
    db.session.commit()
    flash('Acción de tratamiento eliminada con éxito', 'success')
    return redirect(url_for('main.valoracion_riesgo', id=accion.riesgo_id))

## Ruta para eliminar riesgos

@main.route('/riesgo/<int:id>/eliminar', methods=['GET', 'POST'])
def eliminar_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    
    # Eliminar los controles y acciones asociados
    for control in riesgo.controles:
        db.session.delete(control)
    for accion in riesgo.acciones_tratamiento:
        db.session.delete(accion)
        
    db.session.delete(riesgo)
    db.session.commit()
    flash('Riesgo y sus elementos asociados eliminados con éxito', 'success')
    return redirect(url_for('main.index'))


# parte 3/6

models.py

from . import db

class Risk(db.Model):
    __tablename__ = 'risks'
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(20), nullable=False)
    nombre = db.Column(db.String(100), nullable=False)
    escenario = db.Column(db.String(255), nullable=False)
    probabilidad_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    impacto_personas=db.Column(db.Integer, nullable=False)  # 1-5
    impacto_ambiente=db.Column(db.Integer, nullable=False)  # 1-5
    impacto_recursos_economicos=db.Column(db.Integer, nullable=False)  # 1-5
    impacto_reputacional=db.Column(db.Integer, nullable=False)  # 1-5
    impacto_clientes=db.Column(db.Integer, nullable=False)  # 1-5
    impacto_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    
    # Relación con controles y acciones
    controles = db.relationship('Control', backref='riesgo', lazy=True)
    acciones_tratamiento = db.relationship('AccionTratamiento', backref='riesgo', lazy=True)

class Control(db.Model):
    __tablename__ = 'controles'
    id = db.Column(db.Integer, primary_key=True)
    nombre_control=db.Column(db.String(50), nullable=False)
    tipo = db.Column(db.String(50), nullable=False)  # preventivo, detectivo, correctivo
    clase = db.Column(db.Integer, nullable=False)  # manual=5, manual TI=10, automatico=15
    efectividad = db.Column(db.Integer, nullable=False)  # 0 = inefectivo, 70 = efectivo
    cubrimiento_causa = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    cubrimiento_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

class AccionTratamiento(db.Model):
    __tablename__ = 'acciones_tratamiento'
    id = db.Column(db.Integer, primary_key=True)
    at = db.Column(db.String(100), nullable=False)
    categoria = db.Column(db.Integer, nullable=False)
    puntos_causa = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    puntos_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

config.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'supersecretkey'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///instance/risk_db.sqlite'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

run.py

from app import create_app, db

app = create_app()

if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # Crea las tablas en la base de datos si no existen
    app.run(debug=True)

aun faltan dos partes

# parte 4/6


index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración de Riesgos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        <h1 class="text-center">Listado de Riesgos</h1>
        
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Riesgos</h3>
            </div>
            <div class="panel-body">
                <ul class="list-group">
                    {% for riesgo in riesgos %}
                        <li class="list-group-item bg-success">
                            <strong>{{ riesgo.nombre }}</strong> (Código: {{ riesgo.codigo }})
                            <div class="pull-right">
                                <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}" class="btn btn-primary btn-xs">Editar</a>
                                <a href="{{ url_for('main.eliminar_riesgo', id=riesgo.id) }}" class="btn btn-danger btn-xs" 
                                onclick="return confirm('Eliminar este riesgo también eliminará sus controles y acciones asociados. ¿Estás seguro?');">
                                    Eliminar
                                </a>
                            </div>
                        </li>
                    {% else %}
                        <li class="list-group-item">No hay riesgos definidos.</li>
                    {% endfor %}
                </ul>
            </div>
        </div>
        
        <a href="{{ url_for('main.crear_riesgo') }}" class="btn btn-success">Crear Nuevo Riesgo</a>
        <a href="{{ url_for('main.dashboard') }}" class="btn btn-primary">DashBoard Variación Riesgo</a>
        <a href="{{ url_for('main.download_excel') }}" class="btn btn-info">Descargar Excel</a>
    </div>
</body>
</html>


crear_riesgo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
    <style>
        .form-group {
            margin-bottom: 1px; /* Reduce el margen inferior */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center">Crear Nuevo Riesgo</h1>

        <form method="POST" class="form-horizontal">
            {{ form.hidden_tag() }}

            <div class="form-group">
                <label for="nombre" class="col-sm-2 control-label">{{ form.nombre.label }}</label>
                <div class="col-sm-10">
                    {{ form.nombre(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="codigo" class="col-sm-2 control-label">{{ form.codigo.label }}</label>
                <div class="col-sm-10">
                    {{ form.codigo(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="escenario" class="col-sm-2 control-label">{{ form.escenario.label }}</label>
                <div class="col-sm-10">
                    {{ form.escenario(class="form-control", rows="2") }}
                </div>
            </div>
            <div class="form-group">
                <label for="probabilidad_inherente" class="col-sm-2 control-label">{{ form.probabilidad_inherente.label }}</label>
                <div class="col-sm-10">
                    {{ form.probabilidad_inherente(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_personas" class="col-sm-2 control-label">{{ form.impacto_personas.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_personas(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_ambiente" class="col-sm-2 control-label">{{ form.impacto_ambiente.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_ambiente(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_recursos_economicos" class="col-sm-2 control-label">{{ form.impacto_recursos_economicos.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_recursos_economicos(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_reputacional" class="col-sm-2 control-label">{{ form.impacto_reputacional.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_reputacional(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_clientes" class="col-sm-2 control-label">{{ form.impacto_clientes.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_clientes(class="form-control") }}
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-success">Crear Riesgo</button>
                </div>
            </div>
        </form>

        <a href="{{ url_for('main.index') }}" class="btn btn-default">Regresar al listado de riesgos</a>
    </div>
</body>
</html>


# parte 5/6

valoracion_riesgo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración del Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">
    <style>
        .form-group {
            margin-bottom: 1px; /* Reduce el margen inferior */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center">Valoración del Riesgo: {{ riesgo.nombre }}</h1>

        <nav class="navbar navbar-default">
            <div class="container-fluid">
                <ul class="nav navbar-nav">
                    <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
                    <li><a href="{{ url_for('main.parametros') }}">Parámetros</a></li>
                    <li><a href="{{ url_for('main.agregar_control', id=riesgo.id) }}">Agregar Control</a></li>
                    <li><a href="{{ url_for('main.agregar_accion', id=riesgo.id) }}">Agregar AT</a></li>
                </ul>
            </div>
        </nav>

        <form method="POST" class="form-horizontal">
            {{ form.hidden_tag() }}

            <div class="form-group">
                <label for="nombre" class="col-sm-2 control-label">{{ form.nombre.label }}</label>
                <div class="col-sm-10">
                    {{ form.nombre(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="codigo" class="col-sm-2 control-label">{{ form.codigo.label }}</label>
                <div class="col-sm-10">
                    {{ form.codigo(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="escenario" class="col-sm-2 control-label">{{ form.escenario.label }}</label>
                <div class="col-sm-10">
                    {{ form.escenario(class="form-control", rows="2") }}
                </div>
            </div>
            <div class="form-group">
                <label for="probabilidad_inherente" class="col-sm-2 control-label">{{ form.probabilidad_inherente.label }}</label>
                <div class="col-sm-10">
                    {{ form.probabilidad_inherente(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_personas" class="col-sm-2 control-label">{{ form.impacto_personas.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_personas(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_ambiente" class="col-sm-2 control-label">{{ form.impacto_ambiente.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_ambiente(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_recursos_economicos" class="col-sm-2 control-label">{{ form.impacto_recursos_economicos.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_recursos_economicos(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_reputacional" class="col-sm-2 control-label">{{ form.impacto_reputacional.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_reputacional(class="form-control") }}
                </div>
            </div>
            <div class="form-group">
                <label for="impacto_clientes" class="col-sm-2 control-label">{{ form.impacto_clientes.label }}</label>
                <div class="col-sm-10">
                    {{ form.impacto_clientes(class="form-control") }}
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-success" onclick="return confirm('Esta operación cambiará la valoración inicial de riesgo. ¿Deseas continuar?');">
                        Guardar Valoración
                    </button>
                </div>
            </div>
        </form>



        <a href="{{ url_for('main.index') }}" class="btn btn-default">Regresar al listado de riesgos</a>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h2 class="panel-title">Controles Asociados</h2>
            </div>
        
            <ul class="list-group">
                {% for control in riesgo.controles %}
                    <li class="list-group-item">
                        {{ control.id }} - {{ control.nombre_control }} 
                        <div class="pull-right">
                            <a href="{{ url_for('main.editar_control', id=control.id) }}" class="btn btn-primary btn-xs" onclick="return confirm('Esta operación cambiará el valor inicial del control. ¿Deseas continuar?');">Editar</a>
                            <a href="{{ url_for('main.eliminar_control', id=control.id) }}" class="btn btn-danger btn-xs" 
                            onclick="return confirm('¿Estás seguro de que deseas eliminar este control?');">Eliminar</a>
                        </div>
                    </li>
                {% else %}
                    <li class="list-group-item">No hay controles asociados a este riesgo.</li>
                {% endfor %}
            </ul>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <h2 class="panel-title">Acciones de Tratamiento Asociadas</h2>
            </div>
        
            <ul class="list-group">
                {% for accion in riesgo.acciones_tratamiento %}
                    <li class="list-group-item">
                        {{ accion.id }} - {{ accion.at }} 
                        <div class="pull-right">
                            <a href="{{ url_for('main.editar_accion', id=accion.id) }}" class="btn btn-primary btn-xs" onclick="return confirm('Esta operación cambiará la valoración inicial de la Acción de Tratamiento. ¿Deseas continuar?');">Editar</a>
                            <a href="{{ url_for('main.eliminar_accion', id=accion.id) }}" class="btn btn-danger btn-xs" 
                            onclick="return confirm('¿Estás seguro de que deseas eliminar esta acción de tratamiento?');">Eliminar</a>
                        </div>
                    </li>
                {% else %}
                    <li class="list-group-item">No hay acciones de tratamiento asociadas a este riesgo.</li>
                {% endfor %}
            </ul>
        </div>
    </div>
</body>
</html>

# parte 6

Es en esta hoja donde quiero que se carguen los exceles

parametros.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Definir Parámetros</title>
</head>
<body>
    <h1>Definir Parámetros de Riesgos</h1>

    <form method="POST" enctype="multipart/form-data">
        <label for="cantidad_riesgos">Cantidad de Riesgos:</label>
        <input type="number" name="cantidad_riesgos" id="cantidad_riesgos" min="1" required>
        
        <label for="archivo_controles">Archivo de Controles:</label>
        <input type="file" name="archivo_controles" id="archivo_controles" accept=".xlsx" required>
        
        <label for="archivo_acciones">Archivo de Acciones:</label>
        <input type="file" name="archivo_acciones" id="archivo_acciones" accept=".xlsx" required>
        
        <button type="submit">Definir</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar</a>
</body>
</html>

es claro lo que busco?
