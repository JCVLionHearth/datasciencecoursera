S√≠, es posible obtener informaci√≥n del usuario autenticado en un entorno de intranet corporativo, especialmente si est√°s utilizando un directorio activo (Active Directory, AD). 

Para obtener el correo electr√≥nico del usuario autenticado sin que tengan que ingresarlo manualmente, puedes usar integraciones con servicios de autenticaci√≥n y directorio como LDAP (Lightweight Directory Access Protocol) en tu aplicaci√≥n Flask.

A continuaci√≥n te doy una idea general de c√≥mo podr√≠as implementar esto:

### Paso 1: Configurar Flask-LDAP3-Login

Primero, necesitas instalar la extensi√≥n `flask-ldap3-login`:

```bash
pip install flask-ldap3-login
```

### Paso 2: Configurar tu aplicaci√≥n Flask para usar LDAP

Debes configurar tu aplicaci√≥n Flask para conectarse a tu servidor LDAP. Aqu√≠ hay un ejemplo b√°sico:

```python
from flask import Flask, render_template, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin, LoginManager, login_user, login_required, logout_user, current_user
from flask_ldap3_login import LDAP3LoginManager, AuthenticationResponseStatus
from werkzeug.security import generate_password_hash, check_password_hash
import json
import datetime
import re
import unicodedata

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'

# Configuraci√≥n de la base de datos
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///interactions.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Configuraci√≥n de LDAP
app.config['LDAP_HOST'] = 'ldap://your_ldap_server'
app.config['LDAP_BASE_DN'] = 'dc=your_domain,dc=com'
app.config['LDAP_USER_DN'] = 'ou=users'
app.config['LDAP_GROUP_DN'] = 'ou=groups'
app.config['LDAP_USER_RDN_ATTR'] = 'cn'
app.config['LDAP_USER_LOGIN_ATTR'] = 'sAMAccountName'
app.config['LDAP_BIND_USER_DN'] = None
app.config['LDAP_BIND_USER_PASSWORD'] = None

ldap_manager = LDAP3LoginManager(app)

# Definici√≥n del modelo de interacci√≥n
class Interaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), nullable=False)
    user_input = db.Column(db.String(500), nullable=False)
    email = db.Column(db.String(150), nullable=True)
    timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)

    def __repr__(self):
        return f'<Interaction {self.username} - {self.user_input}>'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/get')
def get_bot_response_endpoint():
    user_text = request.args.get('msg')
    user_name = current_user.username if current_user.is_authenticated else 'Unknown'
    email = current_user.email if current_user.is_authenticated else ''
    return jsonify(get_bot_response(user_text, user_name, email))

def get_bot_response(user_input, user_name, email):
    # Tu l√≥gica de respuesta del bot
    save_interaction(user_name, user_input, email)
    return "Respuesta del bot"

def save_interaction(username, user_input, email):
    interaction = Interaction(username=username, user_input=user_input, email=email)
    db.session.add(interaction)
    db.session.commit()

if __name__ == "__main__":
    app.run(debug=True)
```

### Paso 3: Autenticaci√≥n del usuario

Tendr√°s que autenticar al usuario usando su credencial de red al iniciar la sesi√≥n. En un entorno de intranet, esto normalmente se hace autom√°ticamente a trav√©s de un Single Sign-On (SSO) o similar.

### Paso 4: Obtener el correo electr√≥nico del usuario autenticado

Cuando el usuario est√© autenticado, puedes obtener su informaci√≥n de usuario, incluyendo su correo electr√≥nico, desde el AD y usar esta informaci√≥n en tu aplicaci√≥n.

Con esta configuraci√≥n b√°sica, cuando un usuario interact√∫e con tu aplicaci√≥n, su informaci√≥n de autenticaci√≥n (incluido su correo electr√≥nico) se obtendr√° autom√°ticamente desde el servidor LDAP, y podr√°s almacenarla junto con sus interacciones en tu base de datos.

Este es un esquema general. Dependiendo de tu entorno espec√≠fico y tus requisitos, es posible que necesites ajustar la configuraci√≥n y el c√≥digo. Adem√°s, necesitar√°s permisos adecuados para acceder al servidor LDAP y obtener la informaci√≥n de usuario.

Para lograr que el modal de personalizaci√≥n incluya los campos para nombre y correo y que estos se guarden en la base de datos, necesitas hacer algunos cambios en tu aplicaci√≥n. A continuaci√≥n, te indico los pasos necesarios:

1. **Modifica el modelo de `Interaction` para incluir el campo de correo:**

    ```python
    class Interaction(db.Model):
        id = db.Column(db.Integer, primary_key=True)
        username = db.Column(db.String(100), nullable=False)
        user_input = db.Column(db.String(500), nullable=False)
        email = db.Column(db.String(100), nullable=True)  # A√±ade el campo de correo
        timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)

        def __repr__(self):
            return f'<Interaction {self.username} - {self.user_input}>'
    ```

2. **Actualiza la funci√≥n `save_interaction` para incluir el correo:**

    ```python
    def save_interaction(username, user_input, email=None):
        if username is None:
            username = 'Unknown'
        interaction = Interaction(username=username, user_input=user_input, email=email)
        db.session.add(interaction)
        db.session.commit()
    ```

3. **Modifica la ruta `/get` para recibir el correo:**

    ```python
    @app.route("/get")
    def get_bot_response_endpoint():
        user_text = request.args.get('msg')
        user_name = request.args.get('user', 'Unknown')
        user_email = request.args.get('email', '')  # Recibe el correo
        chat_history.append(('User', user_text))
        return jsonify(get_bot_response(user_text, user_name, user_email))
    ```

4. **Actualiza la funci√≥n `get_bot_response` para pasar el correo:**

    ```python
    def get_bot_response(user_input, user_name, user_email):
        global chat_history
        normalized_input = normalize_text(user_input)
        
        if greeting_patterns.search(normalized_input):
            initial_greeting = (f"üòäHola!!, con ¬øCu√°l opci√≥n puedo ayudarte? "
                                "<button class='option-button' onclick=\"sendMessage('Tengo una consulta')\">Consulta</button>"
                                "<button class='option-button' onclick=\"sendMessage('Tengo un dilema')\">Dilema</button>"
                                "<button class='option-button' onclick=\"sendMessage('Quiero consultar la normativa')\">Normativas</button>"
                                "<button class='option-button' onclick=\"sendMessage('Quiero recordar algunas definiciones')\">Definiciones</button>"
                                "<button class='option-button' onclick=\"sendMessage('Con quienes me puedo contactar')\">Contactos</button>")
            chat_history.append(('Bot', initial_greeting))
            save_interaction(user_name, user_input, user_email)
            return initial_greeting
        
        if farewell_patterns.search(normalized_input):
            farewell_message = "Fue un gusto servirte!!üëç, ¬°que tengas un buen d√≠a! Si necesitas m√°s ayuda, estar√© aqu√≠ para asistirte.üë®‚Äçüíª <br> Para m√°s informaci√≥n consulta La üíª<a href='https://ecopetrol.sharepoint.com/sites/emasdigital/Paginas/L%C3%ADnea-%C3%A9tica.aspx' target='_blank'>L√≠nea √âtica<a>"
            chat_history.append(('Bot', farewell_message))
            save_interaction(user_name, user_input, user_email)
            return farewell_message

        if normalized_input == 'si':
            response = get_initial_greeting(user_name)
            save_interaction(user_name, user_input, user_email)
            return response
        if normalized_input == 'no':
            response = get_farewell_message()
            save_interaction(user_name, user_input, user_email)
            return response

        for intent in intents['intents']:
            if normalized_input == normalize_text(intent['tag']):
                responses = intent.get('responses', [])
                if responses:
                    response = responses[0]
                else:
                    response = ""
                
                options = intent.get('options', [])
                if options:
                    response += "<br><br>üë®‚Äçüè´Encontr√© estas opciones: " + "".join(
                        f'<button class="option-button" onclick="sendMessage(\'{opt}\')">{opt}</button>' for opt in options)
                else:
                    response += "<br><br> ¬øPuedo ayudarte con algo m√°s? " \
                                "<br><button class='option-button green' onclick=\"sendMessage('SI')\">SI</button> " \
                                "<button class='option-button green' onclick=\"sendMessage('NO')\">NO</button>"
                chat_history.append(('Bot', response))
                save_interaction(user_name, user_input, user_email)
                return response

        response = "Lo siento, No te entiendo. üòÖ"
        chat_history.append(('Bot', response))
        save_interaction(user_name, user_input, user_email)
        return response
    ```

5. **Actualiza el archivo `index.html` para incluir el campo de correo en el modal y enviarlo con las peticiones:**

    ```html
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h2>Personaliza tu experiencia</h2>
            <label for="userName">Nombre:</label>
            <input type="text" id="userName">
            <label for="userEmail">Correo:</label>
            <input type="email" id="userEmail">
            <label for="userAvatar">Selecciona un avatar:</label>
            <div id="avatarSelection">
                <i class="fas fa-user-circle avatar-option" onclick="selectAvatar('fa-user-circle')"></i>
                <i class="fas fa-user-ninja avatar-option" onclick="selectAvatar('fa-user-ninja')"></i>
                <i class="fas fa-user-astronaut avatar-option" onclick="selectAvatar('fa-user-astronaut')"></i>
                <i class="fas fa-user-tie avatar-option" onclick="selectAvatar('fa-user-tie')"></i>
                <i class="fas fa-user-secret avatar-option" onclick="selectAvatar('fa-user-secret')"></i>
                <i class="fas fa-mars avatar-option" onclick="selectAvatar('fa-mars')"></i>
                <i class="fas fa-venus avatar-option" onclick="selectAvatar('fa-venus')"></i>
            </div>
            <div>
                <p><i>Las respuestas dadas por el bot son orientativas frente a aspectos com√∫nmente consultados. 
                    Para una respuesta con mayor detalle a un caso espec√≠fico, consulte a trav√©s de la l√≠nea √©tica.</i></p>
            </div>
            <button onclick="saveSettings()">Guardar</button>
        </div>
    </div>

    <script>
        var userName = localStorage.getItem('userName') || 'User';
        var userEmail = localStorage.getItem('userEmail') || '';
        var userAvatar = 'fa-user-circle';

        function appendMessage(role, message) {
            var messageClass = role === 'User' ? 'user-message' : 'bot-message';
            var avatarClass = role === 'User' ? userAvatar : 'fa-robot';
            $("#chatlog").append('<div class="' + messageClass + '"><i class="fas ' + avatarClass + '"></i> <span>' + message + '</span></div>');
            $("#chatbox").scrollTop($("#chatbox")[0].scrollHeight);
        }

        function displayTypingIndicator() {
            $("#typingIndicator").show();
            $("#chatbox").scrollTop($("#chatbox")[0].scrollHeight);
        }

        function hideTypingIndicator() {
            $("#typingIndicator").hide();
        }

        function sendMessage(userInput = null) {
            if (!userInput) {
                userInput = $("#userInput").val();
            }
            appendMessage('User', userInput);
            $("#userInput").val('');
            displayTypingIndicator();
            setTimeout(function() {
                $.get("/get", { msg: userInput, user: userName, email: userEmail }).done(function(data) {
                    hideTypingIndicator();
                    appendMessage('Bot', data);
                });
            }, 1000);  // Delay de 1 segundo para simular que el bot est√° escribiendo
        }

        function downloadChat() {
            window.location.href = "/download";
        }

        function openSettings() {
            document.getElementById('settingsModal').style.display = 'block';
        }

        function closeSettings() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        function selectAvatar(avatarClass) {
            userAvatar = avatarClass;
            $('.avatar-option').removeClass('selected');
            $("." + avatarClass).addClass('selected');
        }

        function saveSettings() {
            userName = $("#userName").val() || 'Usuario';
            userEmail = $("#userEmail").val() || '';
            localStorage.setItem('userName', userName);
            localStorage.setItem('userEmail', userEmail);
            closeSettings();
            var initialGreeting = `Hola ${userName}, soy <b>Ethos</b> tu asistente Virtual de consultas y dilemas üë®‚Äçüíª. ¬øEn qu√© puedo ayudarte? 
            <button class='option-button' onclick="sendMessage('Tengo una consulta')">Tengo una Consulta</button> 
            <button class='option-button' onclick="sendMessage('Tengo un dilema')">Tengo un Dilema</button> 
            <button class='option-button' onclick=\"sendMessage('Quiero consultar la normativa')\">Quiero consultar la normativa</button> 
            <button class='option-button'

 onclick=\"sendMessage('Quiero recordar algunas definiciones')\">Quiero recordar algunas definiciones</button> 
            <button class='option-button' onclick=\"sendMessage('Con quienes me puedo contactar')\">Contactos</button>`;
            appendMessage('Bot', initialGreeting);
        }

        $(document).ready(function() {
            var initialGreeting = `Hola ${userName}, soy <b>Ethos</b> tu asistente Virtual de consultas y dilemas üë®‚Äçüíª. ¬øEn qu√© puedo ayudarte? 
            <button class='option-button' onclick="sendMessage('Tengo una consulta')">Tengo una Consulta</button> 
            <button class='option-button' onclick="sendMessage('Tengo un dilema')">Tengo un Dilema</button> 
            <button class='option-button' onclick=\"sendMessage('Quiero consultar la normativa')\">Quiero consultar la normativa</button> 
            <button class='option-button' onclick=\"sendMessage('Quiero recordar algunas definiciones')\">Quiero recordar algunas definiciones</button> 
            <button class='option-button' onclick=\"sendMessage('Con quienes me puedo contactar')\">Contactos</button>`;
            appendMessage('Bot', initialGreeting);
        });
    </script>
    ```

Con estos cambios, tu aplicaci√≥n estar√° lista para recibir y guardar el correo electr√≥nico del usuario, adem√°s de su nombre. Si tienes alguna duda o necesitas m√°s ayuda con estos cambios, h√°zmelo saber.
