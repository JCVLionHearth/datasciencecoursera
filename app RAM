Quiero que en esta ruta, actualmente hace una grafica para cada riesgo mostrando el cambio en la probabilidad inherente y la residual, , quiero que las lineas 'line': {'width': 2, 'dash': 'dot'} que une los dos puntos tuviesen forma de flecha para indicar el estado final del riesgo, esta e mi ruta actual:

@main.route('/dashboard')
def dashboard():
    # Obtener todos los riesgos
    riesgos = Risk.query.all()
    riesgos_data = []

    for riesgo in riesgos:
        # Obtener los controles y acciones asociados al riesgo
        controles = riesgo.controles
        acciones = riesgo.acciones_tratamiento

        # Calcular la reducción por controles y acciones
        if controles and acciones:
            reduccion_controles = calcular_reduccion_por_controles(controles)
            reduccion_acciones = calcular_reduccion_por_acciones(acciones)

            # Calcular riesgo residual
            puntaje_residual_causa, puntaje_residual_consecuencia = calcular_riesgo_residual(riesgo, controles, acciones)
        else:
            # En caso de no tener controles o acciones, solo mostrar el inherente
            puntaje_residual_causa = 0
            puntaje_residual_consecuencia = 0

        # Puntaje inherente del riesgo
        probabilidad_inherente = riesgo.probabilidad_inherente
        consecuencia_inherente = riesgo.impacto_inherente

        # Calcular puntaje final
        puntaje_final_causa = probabilidad_inherente - puntaje_residual_causa
        puntaje_final_consecuencia = consecuencia_inherente - puntaje_residual_consecuencia

        # Agregar los datos del riesgo a la lista
        riesgos_data.append({
            'nombre': riesgo.codigo,
            'probabilidad_inherente': probabilidad_inherente,
            'consecuencia_inherente': consecuencia_inherente,
            'reduccion_residual_causa': puntaje_residual_causa,
            'reduccion_residual_consecuencia': puntaje_residual_consecuencia,
            'puntaje_final_causa': puntaje_final_causa,
            'puntaje_final_consecuencia': puntaje_final_consecuencia
        })

    # Preparar datos para la gráfica
    graph_data = {
        'data': [
            {
                'type': 'scatter',
                'mode': 'lines+markers',
                'x': [riesgo['probabilidad_inherente'], riesgo['puntaje_final_causa']],
                'y': [riesgo['consecuencia_inherente'], riesgo['puntaje_final_consecuencia']],
                'text': [riesgo['nombre'], riesgo['nombre']],
                'marker': {'size': 12},
                'line': {'width': 2, 'dash': 'dot'},
                'name': riesgo['nombre']  # Añadir el nombre del riesgo aquí
            } for riesgo in riesgos_data
        ],
        'layout': {
            'title': 'Cambio del Valor de Cada Riesgo',
            'xaxis': {'title': 'Probabilidad', 'range': [0, 5]},
            'yaxis': {'title': 'Impacto', 'range': [0, 5]}
        }
    }

    return render_template('dashboard.html', riesgos_data=riesgos_data, graph_json=graph_data)

y aqui la muestra

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Riesgos</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard de Riesgos</h1>
    <div id="grafico"></div>

    <table>
        <thead>
            <tr>
                <th>Nombre del Riesgo</th>
                <th>Probabilidad Inherente</th>
                <th>Impacto Inherente</th>
                <th>Reducción(Causa)</th>
                <th>Reducción(Consecuencia)</th>
                <th>Probabilidad Residual</th>
                <th>Impacto Residual</th>
            </tr>
        </thead>
        <tbody>
            {% for riesgo in riesgos_data %}
            <tr>
                <td>{{ riesgo.nombre }}</td>
                <td>{{ riesgo.probabilidad_inherente }}</td>
                <td>{{ riesgo.consecuencia_inherente }}</td>
                <td>{{ riesgo.reduccion_residual_causa }}</td>
                <td>{{ riesgo.reduccion_residual_consecuencia }}</td>
                <td>{{ riesgo.puntaje_final_causa }}</td>
                <td>{{ riesgo.puntaje_final_consecuencia }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        var graph_data = {{ graph_json | safe }};
        Plotly.newPlot('grafico', graph_data.data, graph_data.layout);
    </script>
</body>
</html>

###########


Parece que el error proviene del hecho de que el objeto `Control` no tiene un atributo llamado `clase_control_puntos`, lo cual sugiere un problema en la forma en que estás accediendo a los datos de los controles.

### Solución al error de `'Control' object has no attribute 'clase_control_puntos'`

1. **Verifica el Modelo de Control**:
   Asegúrate de que en tu modelo de base de datos (en **`models.py`** o donde sea que esté definido el modelo de `Control`) tienes correctamente definido el campo `clase_control_puntos` o el campo equivalente que estás intentando acceder. Si el campo se llama de otra manera, asegúrate de usar el nombre correcto.

2. **Revisión del Acceso a Atributos**:
   Verifica el código que hace referencia a `clase_control_puntos`. Si no existe un atributo con ese nombre en tu modelo `Control`, intenta renombrarlo por el campo correcto que debería estar accediendo.

   Revisa esta parte del código donde se calcula la reducción por controles:

   ```python
   reduccion_controles = calcular_reduccion_por_controles(controles)
   ```

   Asegúrate de que la función **`calcular_reduccion_por_controles`** está accediendo correctamente a los atributos de `Control` y que esos atributos existen.

   Si el modelo `Control` no tiene el campo `clase_control_puntos`, debes revisar el campo correcto que debe ser utilizado, por ejemplo, puede ser algo como `puntos` o `eficacia`, etc. Cambia este campo en la función de reducción de controles.

### Agregar Botones para Navegar en la Aplicación

Para agregar botones que permitan navegar entre las diferentes rutas de tu aplicación, como el **Dashboard**, **Agregar Controles**, **Agregar Acciones**, y otros parámetros, puedes modificar tu plantilla **base.html** o la plantilla donde deseas agregar los botones de navegación.

#### Ejemplo de menú de navegación con botones:

1. **Editar `base.html` (o tu archivo principal de layout)**:

   Si ya tienes una plantilla base de HTML donde usas un layout general para todas las páginas, puedes agregar un menú de navegación con botones como este:

   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>{% block title %}My App{% endblock %}</title>
       <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
   </head>
   <body>
       <nav>
           <ul>
               <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
               <li><a href="{{ url_for('main.parametros') }}">Parámetros</a></li>
               <li><a href="{{ url_for('main.agregar_controles') }}">Agregar Controles</a></li>
               <li><a href="{{ url_for('main.agregar_acciones') }}">Agregar Acciones</a></li>
           </ul>
       </nav>

       <div class="content">
           {% block content %}
           {% endblock %}
       </div>
   </body>
   </html>
   ```

   ### Explicación del código:

   - **Menú de Navegación**: Los enlaces (`<a>`) dentro del menú son botones que permiten la navegación. Cada uno apunta a una ruta específica de tu aplicación usando **`url_for`**.
   - Asegúrate de que las rutas como `dashboard`, `parametros`, `agregar_controles`, y `agregar_acciones` estén definidas en **`routes.py`**.

2. **Agregar Enlaces a las Plantillas Específicas**:

   Si no estás usando una plantilla base, simplemente agrega estos botones o enlaces en las plantillas donde los necesites:

   ```html
   <nav>
       <ul>
           <li><a href="{{ url_for('main.dashboard') }}">Dashboard</a></li>
           <li><a href="{{ url_for('main.parametros') }}">Parámetros</a></li>
           <li><a href="{{ url_for('main.agregar_controles') }}">Agregar Controles</a></li>
           <li><a href="{{ url_for('main.agregar_acciones') }}">Agregar Acciones</a></li>
       </ul>
   </nav>
   ```

3. **Asegúrate de Tener las Rutas en `routes.py`**:

   En tu archivo **`routes.py`**, debes tener rutas para cada una de las funcionalidades que mencionas, como el Dashboard, parámetros, agregar controles y agregar acciones.

   Ejemplo:

   ```python
   @main.route('/dashboard')
   def dashboard():
       # Lógica del Dashboard aquí
       return render_template('dashboard.html')

   @main.route('/parametros')
   def parametros():
       # Lógica para mostrar parámetros
       return render_template('parametros.html')

   @main.route('/agregar_controles', methods=['GET', 'POST'])
   def agregar_controles():
       # Lógica para agregar controles
       return render_template('agregar_controles.html')

   @main.route('/agregar_acciones', methods=['GET', 'POST'])
   def agregar_acciones():
       # Lógica para agregar acciones
       return render_template('agregar_acciones.html')
   ```

### Resumen de los Cambios

1. **Solucionar el error de `'clase_control_puntos'**: Asegúrate de que el modelo `Control` tiene ese atributo o usa el atributo correcto que representa los puntos del control.

2. **Agregar un Menú de Navegación**: Añade botones o enlaces para navegar entre el Dashboard, parámetros, agregar controles y agregar acciones.

3. **Definir Rutas**: Verifica que las rutas correspondientes estén definidas en **`routes.py`**.

Con estas modificaciones, deberías poder visualizar el Dashboard sin el error y tener una interfaz con botones para navegar entre las distintas funcionalidades de tu aplicación.

cuando ejecuto este enlace http://127.0.0.1:5000/dashboard sale el siguiente error AttributeError: 'Control' object has no attribute 'clase_control_puntos', adicionalmente no hay botones para llamar al dashboard, parametros y a las rutas de agregar controles y acciones

Para implementar la lógica en la ruta **Dashboard** en **`routes.py`**, donde primero calcules los controles y las acciones, y luego obtengas el puntaje del riesgo residual, debes seguir estos pasos:

### Paso 1: Importar las funciones necesarias en `routes.py`

Primero, asegúrate de haber importado las funciones que necesitas desde **`utils.py`**:

```python
from app.utils import calcular_reduccion_por_controles, calcular_reduccion_por_acciones, calcular_riesgo_residual, obtener_nivel_riesgo
```

### Paso 2: Modificar la ruta `dashboard`

En la ruta del **Dashboard**, deberás seguir los siguientes pasos:

1. Obtener todos los riesgos desde la base de datos.
2. Para cada riesgo, obtener los controles y las acciones de tratamiento.
3. Utilizar las funciones para calcular la reducción de riesgo por controles y acciones.
4. Calcular el riesgo residual.
5. Preparar la información para mostrarla gráficamente en el dashboard.

### Ejemplo de la ruta `dashboard`:

```python
@main.route('/dashboard')
def dashboard():
    # Obtener todos los riesgos
    riesgos = Risk.query.all()

    # Preparar datos para el gráfico
    data_graficos = {
        'data': [],
        'layout': {'title': 'Variaciones del Riesgo Inherente y Residual'}
    }

    for riesgo in riesgos:
        # Obtener los controles y acciones asociados al riesgo
        controles = riesgo.controles
        acciones = riesgo.acciones_tratamiento

        # Calcular la reducción por controles y acciones
        if controles and acciones:
            reduccion_controles = calcular_reduccion_por_controles(controles)
            reduccion_acciones = calcular_reduccion_por_acciones(acciones)

            # Calcular riesgo residual
            puntaje_residual = calcular_riesgo_residual(riesgo, controles, acciones)

            # Puntaje inherente del riesgo
            puntaje_inherente = riesgo.probabilidad_inherente * riesgo.impacto_inherente

            # Convertir puntajes a niveles de riesgo
            nivel_inherente = obtener_nivel_riesgo(puntaje_inherente)
            nivel_residual = obtener_nivel_riesgo(sum(puntaje_residual) / 2)

            # Preparar los datos para el gráfico
            data_graficos['data'].append({
                'x': ['Riesgo Inherente', 'Riesgo Residual'],
                'y': [puntaje_inherente, sum(puntaje_residual) / 2],
                'name': riesgo.nombre,
                'type': 'bar'
            })

        else:
            # En caso de no tener controles o acciones, solo mostrar el inherente
            puntaje_inherente = riesgo.probabilidad_inherente * riesgo.impacto_inherente
            nivel_inherente = obtener_nivel_riesgo(puntaje_inherente)

            data_graficos['data'].append({
                'x': ['Riesgo Inherente'],
                'y': [puntaje_inherente],
                'name': riesgo.nombre,
                'type': 'bar'
            })

    # Convertir los datos a formato JSON para el gráfico
    graph_json = json.dumps(data_graficos)

    return render_template('dashboard.html', graph_json=graph_json)
```

### Explicación del código:

1. **Obtención de riesgos**: Se obtienen todos los riesgos desde la base de datos.
   
2. **Calcular reducción por controles y acciones**:
    - Para cada riesgo, se obtienen sus controles y acciones.
    - Si el riesgo tiene controles y acciones, se calcula la reducción de riesgo por controles y acciones usando las funciones de **`utils.py`**.
    - Se calcula el **puntaje inherente** multiplicando la probabilidad por el impacto inherente.
    - Se calcula el **puntaje residual** usando la función **`calcular_riesgo_residual`**.
    - Si no tiene controles o acciones, solo se mostrará el puntaje inherente.

3. **Generar gráfico**:
    - Se construyen las barras de riesgo inherente y residual para cada riesgo, y se preparan los datos para enviarlos al **dashboard**.
    - Los datos se envían como un JSON a la plantilla.

### Paso 3: Modificar `dashboard.html` para mostrar el gráfico

En el archivo **`dashboard.html`**, asegúrate de incluir el siguiente código para generar el gráfico con **Plotly**:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Riesgos</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard de Riesgos</h1>
    <div id="grafico"></div>

    <script>
        // Datos del gráfico generados por la ruta
        var graph_data = {{ graph_json | safe }};
        Plotly.newPlot('grafico', graph_data.data, graph_data.layout);
    </script>
</body>
</html>
```

### Explicación de la plantilla:

- La librería **Plotly** se utiliza para generar gráficos.
- El código JavaScript toma los datos JSON generados en la ruta **dashboard** y crea un gráfico dinámico mostrando la variación de los riesgos inherentes y residuales.

### Resultado esperado:
El **Dashboard** mostrará una gráfica de barras donde se puede visualizar la diferencia entre el **riesgo inherente** y el **riesgo residual** para cada riesgo. Esto permitirá analizar cómo los controles y las acciones de tratamiento impactan en la reducción del riesgo.

### Paso 4: Visualización dinámica de los cambios

Si deseas hacer cambios en vivo para visualizar variaciones del riesgo residual, puedes implementar AJAX o WebSockets para actualizar el gráfico en tiempo real cuando se modifican los controles o las acciones. Esto se puede implementar en un paso posterior.

Para abordar tus objetivos, vamos a desglosar cada uno en partes más manejables:

### 1. **Ventana de Parámetros para Definir Riesgos**
Dado que ya puedes crear y valorar riesgos, vamos a refinar la lógica para que, con base en la cantidad de riesgos especificada, puedas gestionarlos de manera dinámica.

#### En tu archivo **`routes.py`**, podrías añadir una vista para esta "ventana de parámetros":

```python
# Ruta para la ventana de parámetros
@main.route('/parametros', methods=['GET', 'POST'])
def parametros():
    if request.method == 'POST':
        cantidad_riesgos = int(request.form.get('cantidad_riesgos', 1))
        return redirect(url_for('main.crear_riesgo', cantidad=cantidad_riesgos))
    
    return render_template('parametros.html')
```

Y el HTML para **`parametros.html`**:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Definir Parámetros</title>
</head>
<body>
    <h1>Definir Parámetros de Riesgos</h1>

    <form method="POST">
        <label for="cantidad_riesgos">Cantidad de Riesgos:</label>
        <input type="number" name="cantidad_riesgos" id="cantidad_riesgos" min="1" required>
        <button type="submit">Definir</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar</a>
</body>
</html>
```

### 2. **Crear Controles y Acciones de Tratamiento Asociadas al Riesgo**

Ahora puedes implementar las rutas para añadir controles y acciones a un riesgo específico.

#### **Rutas para Crear Controles y Acciones de Tratamiento**:

En **`routes.py`**, agrega estas rutas:

```python
from app.forms import ControlForm, AccionTratamientoForm
from app.models import Control, AccionTratamiento

# Ruta para agregar un control a un riesgo
@main.route('/riesgo/<int:id>/agregar_control', methods=['GET', 'POST'])
def agregar_control(id):
    riesgo = Risk.query.get_or_404(id)
    form = ControlForm()

    if form.validate_on_submit():
        nuevo_control = Control(
            tipo=form.tipo.data,
            clase=form.clase.data,
            efectividad=form.efectividad.data,
            cubrimiento_causa=form.cubrimiento_causa.data,
            cubrimiento_consecuencia=form.cubrimiento_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nuevo_control)
        db.session.commit()
        flash('Control añadido con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_control.html', form=form, riesgo=riesgo)

# Ruta para agregar una acción de tratamiento a un riesgo
@main.route('/riesgo/<int:id>/agregar_accion', methods=['GET', 'POST'])
def agregar_accion(id):
    riesgo = Risk.query.get_or_404(id)
    form = AccionTratamientoForm()

    if form.validate_on_submit():
        nueva_accion = AccionTratamiento(
            categoria=form.categoria.data,
            puntos_causa=form.puntos_causa.data,
            puntos_consecuencia=form.puntos_consecuencia.data,
            riesgo_id=id
        )
        db.session.add(nueva_accion)
        db.session.commit()
        flash('Acción de tratamiento añadida con éxito', 'success')
        return redirect(url_for('main.valoracion_riesgo', id=riesgo.id))

    return render_template('agregar_accion.html', form=form, riesgo=riesgo)
```

En cuanto a las plantillas, para **`agregar_control.html`** y **`agregar_accion.html`**, serán bastante similares:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Añadir Control</title>
</head>
<body>
    <h1>Añadir Control para el Riesgo: {{ riesgo.nombre }}</h1>

    <form method="POST">
        {{ form.hidden_tag() }}
        
        <div>
            {{ form.tipo.label }}: {{ form.tipo }}
        </div>
        <div>
            {{ form.clase.label }}: {{ form.clase }}
        </div>
        <div>
            {{ form.efectividad.label }}: {{ form.efectividad }}
        </div>
        <div>
            {{ form.cubrimiento_causa.label }}: {{ form.cubrimiento_causa }}
        </div>
        <div>
            {{ form.cubrimiento_consecuencia.label }}: {{ form.cubrimiento_consecuencia }}
        </div>

        <button type="submit">Guardar Control</button>
    </form>

    <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}">Regresar</a>
</body>
</html>
```

### 3. **Ventana para Valorar el Riesgo y Guardarlo en la Base de Datos**

Esto ya lo tienes implementado parcialmente. La funcionalidad de actualizar un riesgo está definida en la ruta de **`valoracion_riesgo`**, donde ya estás guardando los cambios en la base de datos usando SQLAlchemy. 

Asegúrate de que, al actualizar, se calculen los valores de riesgo residual con base en los controles y las acciones aplicadas, usando las funciones de `utils.py`.

### 4. **Dashboard con Variaciones Visuales (Plotly)**

Para hacer las gráficas dinámicas, integrando los riesgos inherentes y residuales, puedes usar Plotly.

En **`routes.py`**, crea una ruta para el **dashboard**:

```python
import json
from flask import jsonify

@main.route('/dashboard')
def dashboard():
    riesgos = Risk.query.all()

    # Aquí calcula el riesgo inherente y residual
    graficos = {
        'data': [],
        'layout': {'title': 'Variaciones del Riesgo'}
    }

    for riesgo in riesgos:
        # Asumimos que obtendrás controles y acciones del riesgo
        controles = riesgo.controles
        acciones = riesgo.acciones_tratamiento

        puntaje_inherente = calcular_puntaje_inherente(riesgo.probabilidad_inherente, riesgo.impacto_inherente)
        riesgo_residual = calcular_riesgo_residual(riesgo, controles, acciones)

        # Datos para Plotly
        graficos['data'].append({
            'x': ['Inherente', 'Residual'],
            'y': [puntaje_inherente, sum(riesgo_residual)],
            'type': 'bar',
            'name': riesgo.nombre
        })

    return render_template('dashboard.html', graph_json=json.dumps(graficos))
```

Y la plantilla para **`dashboard.html`**:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Riesgos</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard de Riesgos</h1>
    <div id="grafico"></div>

    <script>
        var graph_data = {{ graph_json | safe }};
        Plotly.newPlot('grafico', graph_data.data, graph_data.layout);
    </script>
</body>
</html>
```

### 5. **Comparaciones en Vivo del Riesgo Residual**

Para hacer comparaciones en tiempo real, se puede hacer una funcionalidad que capture el valor anterior del riesgo y permita ver cómo varía a medida que se aplican controles y acciones de tratamiento. Esto puede lograrse con AJAX para actualizar los datos sin refrescar toda la página, pero esto podría implicar una implementación adicional más avanzada.

Si te interesa esta parte, te puedo guiar en cómo implementarlo. ¿Te gustaría que lo desarrollemos ahora?

modificando los codigos y demás lógicas ya he logrado que cree los riesgos y dado el caso realizar una nueva valoración, ahora quiero con cada riesgo trabajar los controles y las acciones de tratamiento, asume que las acciones de tratamiento y los controles se obtienen de archivos excel construidos previamente. de acuerdo con esto tengo los siguientes codigos

## models.py

from . import db

class Risk(db.Model):
    __tablename__ = 'risks'
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(20), nullable=False)
    nombre = db.Column(db.String(100), nullable=False)
    escenario = db.Column(db.String(255), nullable=False)
    probabilidad_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    impacto_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    
    # Relación con controles y acciones
    controles = db.relationship('Control', backref='riesgo', lazy=True)
    acciones_tratamiento = db.relationship('AccionTratamiento', backref='riesgo', lazy=True)

class Control(db.Model):
    __tablename__ = 'controles'
    id = db.Column(db.Integer, primary_key=True)
    tipo = db.Column(db.String(50), nullable=False)  # preventivo, detectivo, correctivo
    clase = db.Column(db.String(50), nullable=False)  # manual, manual TI, automatico
    efectividad = db.Column(db.Integer, nullable=False)  # 0 = inefectivo, 70 = efectivo
    cubrimiento_causa = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    cubrimiento_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

class AccionTratamiento(db.Model):
    __tablename__ = 'acciones_tratamiento'
    id = db.Column(db.Integer, primary_key=True)
    categoria = db.Column(db.String(100), nullable=False)
    puntos_causa = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    puntos_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

## forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField
from wtforms.validators import DataRequired

class RiskForm(FlaskForm):
    codigo = StringField('Código del Riesgo', validators=[DataRequired()])
    nombre = StringField('Nombre del Riesgo', validators=[DataRequired()])
    escenario = StringField('Escenario de Valoración', validators=[DataRequired()])
    probabilidad_inherente = SelectField('Probabilidad Inherente', choices=[(1, 'Raro'), (2, 'Improbable'), (3, 'Posible'), (4, 'Probable'), (5, 'Con Certeza')], coerce=int)
    impacto_inherente = SelectField('Impacto Inherente', 
                          choices=[('1', 'Muy Bajo'), 
                                   ('2', 'Bajo'), 
                                   ('3', 'Medio'), 
                                   ('4', 'Alto'), 
                                   ('5', 'Muy Alto')],
                          validators=[DataRequired()])
    submit = SubmitField('Guardar')

class ControlForm(FlaskForm):
    tipo = SelectField('Tipo de Control', choices=[('preventivo', 'Preventivo'), ('detectivo', 'Detectivo'), ('correctivo', 'Correctivo')])
    clase = SelectField('Clase de Control', choices=[('manual', 'Manual'), ('manual TI', 'Manual TI'), ('automatico', 'Automático')])
    efectividad = SelectField('Efectividad', choices=[(0, 'Inefectivo'), (70, 'Efectivo')], coerce=int)
    cubrimiento_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    cubrimiento_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')

class AccionTratamientoForm(FlaskForm):
    categoria = StringField('Categoría de la Acción', validators=[DataRequired()])
    puntos_causa = SelectField('Puntos por Causa', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    puntos_consecuencia = SelectField('Puntos por Consecuencia', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')   

## routes.py

from flask import render_template, redirect, url_for, flash, request
from flask import Blueprint
from app import db
from app.models import Risk
from app.forms import RiskForm

main = Blueprint('main', __name__)

# Ruta para la página principal, donde se listan los riesgos
@main.route('/')
def index():
    riesgos = Risk.query.all()
    return render_template('index.html', riesgos=riesgos)

# Ruta para crear un nuevo riesgo
@main.route('/crear_riesgo', methods=['GET', 'POST'])
def crear_riesgo():
    form = RiskForm()
    if form.validate_on_submit():
        nuevo_riesgo = Risk(
            nombre=form.nombre.data,
            codigo=form.codigo.data,
            escenario=form.escenario.data,
            probabilidad_inherente=form.probabilidad_inherente.data,
            impacto_inherente=form.impacto_inherente.data
        )
        db.session.add(nuevo_riesgo)
        db.session.commit()
        flash('Riesgo creado con éxito', 'success')
        return redirect(url_for('main.index'))
    
    return render_template('crear_riesgo.html', form=form)

# Ruta para valorar un riesgo existente
@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)

    if form.validate_on_submit():
        riesgo.nombre = form.nombre.data
        riesgo.codigo = form.codigo.data
        riesgo.escenario = form.escenario.data
        riesgo.probabilidad_inherente = form.probabilidad_inherente.data
        riesgo.impacto_inherente = form.impacto_inherente.data

        db.session.commit()
        flash('Valoración del riesgo actualizada', 'success')
        return redirect(url_for('main.index'))

    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)

## utils.py (este aun no se ha usado)

def calcular_puntaje_inherente(probabilidad_inherente, impacto_inherente):
    """
    Calcula la puntuación inherente del riesgo combinando probabilidad e impacto.
    Se asume que el impacto es la puntuación máxima de las categorías de impacto.
    """
    return probabilidad_inherente * impacto_inherente

def calcular_reduccion_por_controles(controles):
    """
    Calcula la reducción de riesgo basada en los controles asociados al riesgo.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    for control in controles:
        puntos_causa = control.clase_control_puntos() + control.efectividad + control.cubrimiento_causa
        puntos_consecuencia = control.clase_control_puntos() + control.efectividad + control.cubrimiento_consecuencia
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(controles), puntos_consecuencia_total / len(controles))

def calcular_reduccion_por_acciones(acciones):
    """
    Calcula la reducción de riesgo basada en las acciones de tratamiento.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    for accion in acciones:
        puntos_causa = (accion.puntos_causa + accion.clase_accion_puntos()) / 2
        puntos_consecuencia = (accion.puntos_consecuencia + accion.clase_accion_puntos()) / 2
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(acciones), puntos_consecuencia_total / len(acciones))

def calcular_riesgo_residual(riesgo, controles, acciones):
    """
    Calcula el riesgo residual después de aplicar controles y acciones de tratamiento.
    El resultado se obtiene ponderando el 30% por controles y el 70% por acciones de tratamiento.
    """
    # Calcular reducciones por controles y acciones
    reduccion_controles = calcular_reduccion_por_controles(controles)
    reduccion_acciones = calcular_reduccion_por_acciones(acciones)

    # Ponderación de la reducción
    causa_residual = (reduccion_controles[0] * 0.30) + (reduccion_acciones[0] * 0.70)
    consecuencia_residual = (reduccion_controles[1] * 0.30) + (reduccion_acciones[1] * 0.70)

    return causa_residual, consecuencia_residual

def obtener_nivel_riesgo(puntaje):
    """
    Asigna el nivel de riesgo con base en el puntaje.
    """
    if puntaje <= 1:
        return 'Muy Bajo'
    elif puntaje <= 2:
        return 'Bajo'
    elif puntaje <= 3:
        return 'Medio'
    elif puntaje <= 4:
        return 'Alto'
    else:
        return 'Muy Alto'

# Plantillas

## index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración de Riesgos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Listado de Riesgos</h1>
    
    <ul>
        {% for riesgo in riesgos %}
        <li>
            <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}">
                {{ riesgo.nombre }} (Código: {{ riesgo.codigo }})
            </a>
        </li>
        {% else %}
        <li>No hay riesgos definidos.</li>
        {% endfor %}
    </ul>

    <a href="{{ url_for('main.crear_riesgo') }}">Crear Nuevo Riesgo</a>
</body>
</html>

## crear_riesgo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Crear Nuevo Riesgo</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.nombre.label }}: {{ form.nombre }}
        </div>
        <div>
            {{ form.codigo.label }}: {{ form.codigo }}
        </div>
        <div>
            {{ form.escenario.label }}: {{ form.escenario }}
        </div>
        <div>
            {{ form.probabilidad_inherente.label }}: {{ form.probabilidad_inherente }}
        </div>
        <div>
            {{ form.impacto_inherente.label }}: {{ form.impacto_inherente }}
        </div>

        <button type="submit">Crear Riesgo</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>

## valoracion_riesgo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración del Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Valoración del Riesgo: {{ riesgo.nombre }}</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.nombre.label }}: {{ form.nombre }}
        </div>
        <div>
            {{ form.codigo.label }}: {{ form.codigo }}
        </div>
        <div>
            {{ form.escenario.label }}: {{ form.escenario }}
        </div>
        <div>
            {{ form.probabilidad_inherente.label }}: {{ form.probabilidad_inherente }}
        </div>
        <div>
            {{ form.impacto_inherente.label }}: {{ form.impacto_inherente }}
        </div>

        <button type="submit">Guardar Valoración</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>

## dashboard.html (esta aun no la veo integrada en el despligue final)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Riesgos</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard de Riesgos</h1>
    <div id="grafico"></div>

    <script>
        var graph_data = {{ graph_json | safe }};
        Plotly.newPlot('grafico', graph_data.data, graph_data.layout);
    </script>
</body>
</html>

Ayudame a seguir completando mis objetivos:

necesito que me ayudes a crear una aplicacion que me permita hacer los siguiente:
1. una ventana de parametros, en esta se definirá cuantos riesgos hay y con base a esto se creará la valoración de cada riesgo. (este al parecer ya se hace)
2. se debe permitir crear la cantidad de controles y de acciones de tratamiento asociadas al risgos
3. una ventana que me permita hacer la valoración del riesgo seleccionado y que esta se guarde en una base de datos sql (sqllite, sqlAclhemy)
4. dashboard que permitan ver las variaciones visuales de los niveles de riesgo inherente a residual. (estas graficas deben ser dinamicas y en lo posible mostrar la matriz ram)
5. debe permitir realizar cambios en vivo del riesgo para identificar la variacion del riesgo resisual al realizar algun cambio, pero debe mantener el anterior para hacer comparaciones.


El error `TypeError: 'probabilidad' is an invalid keyword argument for Risk` ocurre porque estás intentando pasar un argumento llamado `probabilidad` (u otro campo del formulario) al crear una instancia del modelo `Risk`, pero este modelo no tiene un atributo o columna llamada `probabilidad`.

Vamos a revisar los siguientes pasos para solucionar este problema:

### 1. Verifica el modelo `Risk` en `models.py`

Es probable que en el archivo `models.py` el modelo `Risk` no tenga columnas definidas para algunos campos que estás enviando desde el formulario, como `probabilidad` e `impacto`. Asegúrate de que el modelo `Risk` tenga todos los campos que el formulario está enviando.

#### `models.py`
Revisa el modelo `Risk` y agrega las columnas correspondientes:

```python
from app import db

class Risk(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(50), nullable=False)
    escenario = db.Column(db.String(200), nullable=False)
    
    # Agregar columnas para probabilidad e impacto
    probabilidad = db.Column(db.Integer, nullable=False)  # valor 1-5
    impacto = db.Column(db.Integer, nullable=False)  # valor 1-5

    def __repr__(self):
        return f'<Risk {self.nombre}>'
```

### 2. Migración de la Base de Datos

Si has actualizado el modelo `Risk` agregando nuevos campos, necesitarás crear y aplicar una nueva migración para que estos cambios se reflejen en la base de datos.

#### Generar migración:
```bash
flask db migrate -m "Added probabilidad and impacto fields to Risk"
```

#### Aplicar migración:
```bash
flask db upgrade
```

### 3. Actualiza la función para crear el riesgo en `routes.py`

Cuando el formulario envía los datos, la función que procesa la solicitud debe recoger estos datos y guardarlos en la base de datos correctamente. Asegúrate de que la función `crear_riesgo` esté recibiendo los datos correctamente y asignándolos al modelo.

#### `routes.py`
Actualiza la función de creación de riesgo:

```python
from flask import render_template, url_for, flash, redirect
from app import db
from app.forms import RiskForm
from app.models import Risk
from app.main import bp

@bp.route('/crear_riesgo', methods=['GET', 'POST'])
def crear_riesgo():
    form = RiskForm()
    if form.validate_on_submit():
        # Crea un nuevo riesgo con los datos del formulario
        nuevo_riesgo = Risk(
            nombre=form.nombre.data,
            codigo=form.codigo.data,
            escenario=form.escenario.data,
            probabilidad=int(form.probabilidad.data),  # Asegúrate de que probabilidad es un entero
            impacto=int(form.impacto.data)  # Asegúrate de que impacto es un entero
        )
        db.session.add(nuevo_riesgo)
        db.session.commit()
        
        flash('Nuevo riesgo creado con éxito', 'success')
        return redirect(url_for('main.index'))
    
    return render_template('crear_riesgo.html', form=form)
```

### Resumen de los cambios:
1. **Modelo `Risk`**: Asegúrate de que el modelo tiene las columnas `probabilidad` e `impacto`.
2. **Migración de la base de datos**: Si agregaste columnas nuevas, realiza la migración y actualización de la base de datos.
3. **Función para crear el riesgo**: Asegúrate de pasar los datos correctos del formulario al modelo.

Con estos cambios, el botón "Crear Riesgo" debería funcionar correctamente y guardar los datos del formulario en la base de datos sin errores.

ya aparece una ventana para agregar el riesgo, pero al ehjecutar el boton sale el siguiente error: TypeError: 'probabilidad' is an invalid keyword argument for Risk

El error que estás viendo, `'app.forms.RiskForm object' has no attribute 'probabilidad'`, significa que en el formulario `RiskForm`, definido en el archivo `forms.py`, no has declarado el campo `probabilidad`, aunque estás intentando usarlo en la plantilla HTML `crear_riesgo.html`.

Vamos a solucionar este problema asegurándonos de que todos los campos necesarios estén definidos correctamente en el formulario. 

### 1. Actualiza el formulario en `forms.py`

Verifica que el archivo `forms.py` esté declarando correctamente todos los campos requeridos, incluyendo `probabilidad` e `impacto`.

#### `forms.py`
```python
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField
from wtforms.validators import DataRequired

class RiskForm(FlaskForm):
    # Nombre del riesgo
    nombre = StringField('Nombre del Riesgo', validators=[DataRequired()])
    
    # Código del riesgo
    codigo = StringField('Código del Riesgo', validators=[DataRequired()])
    
    # Escenario de valoración
    escenario = StringField('Escenario de Valoración', validators=[DataRequired()])
    
    # Probabilidad inherente del riesgo (1-5)
    probabilidad = SelectField('Probabilidad Inherente', 
                               choices=[('1', 'Raro'), 
                                        ('2', 'Improbable'), 
                                        ('3', 'Posible'), 
                                        ('4', 'Probable'), 
                                        ('5', 'Con certeza')],
                               validators=[DataRequired()])
    
    # Impacto inherente del riesgo (1-5)
    impacto = SelectField('Impacto Inherente', 
                          choices=[('1', 'Muy Bajo'), 
                                   ('2', 'Bajo'), 
                                   ('3', 'Medio'), 
                                   ('4', 'Alto'), 
                                   ('5', 'Muy Alto')],
                          validators=[DataRequired()])
    
    # Botón de envío
    submit = SubmitField('Crear Riesgo')
```

### 2. Actualiza la plantilla HTML `crear_riesgo.html`

Verifica que en tu plantilla HTML `crear_riesgo.html`, los campos están siendo referenciados correctamente. El error ocurrió porque intentaste acceder a `form.probabilidad`, pero en el formulario `RiskForm`, ese campo no estaba definido. Después de asegurarnos de que está definido en el formulario, actualiza el HTML para que use ese campo.

#### `crear_riesgo.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Crear Nuevo Riesgo</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.nombre.label }}: {{ form.nombre }}
        </div>
        <div>
            {{ form.codigo.label }}: {{ form.codigo }}
        </div>
        <div>
            {{ form.escenario.label }}: {{ form.escenario }}
        </div>
        <div>
            {{ form.probabilidad.label }}: {{ form.probabilidad }}
        </div>
        <div>
            {{ form.impacto.label }}: {{ form.impacto }}
        </div>

        <button type="submit">Crear Riesgo</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>
```

### 3. Verifica el envío del formulario

El botón de envío ya está correctamente configurado en el formulario HTML, usando el campo `submit` del formulario `RiskForm`. También hemos agregado una validación con `DataRequired()` para asegurarnos de que los campos `probabilidad` e `impacto` siempre sean rellenados.

### Resumen:
1. **Formulario**: Asegúrate de que `probabilidad` e `impacto` estén correctamente definidos en el archivo `forms.py`.
2. **Plantilla HTML**: Verifica que los campos del formulario están siendo referenciados en `crear_riesgo.html`.
3. **Validación**: Los campos requeridos deben estar validados con `DataRequired()` para evitar entradas vacías.

Con estos cambios, deberías poder crear nuevos riesgos sin que Flask arroje errores relacionados con los campos del formulario.

UndefinedError
jinja2.exceptions.UndefinedError: 'app.forms.RiskForm object' has no attribute 'probabilidad'

Entiendo. La función `crear_riesgo` a la que haces referencia es una **vista** en Flask que se encarga de manejar el formulario para crear un nuevo riesgo. Esto implica tanto la creación de la función en **routes.py** como la plantilla **HTML** que se encargará de mostrar el formulario para capturar los datos del riesgo.

Voy a rehacer todo el archivo de rutas y las plantillas HTML necesarias asociadas a las rutas para asegurarnos de que estén correctamente conectadas.

### 1. **Archivo de rutas (`routes.py`)**
Este archivo define las vistas (rutas) necesarias para listar, crear y valorar riesgos.

```python
from flask import render_template, redirect, url_for, flash, request
from flask import Blueprint
from app import db
from app.models import Risk
from app.forms import RiskForm

main = Blueprint('main', __name__)

# Ruta para la página principal, donde se listan los riesgos
@main.route('/')
def index():
    riesgos = Risk.query.all()
    return render_template('index.html', riesgos=riesgos)

# Ruta para crear un nuevo riesgo
@main.route('/crear_riesgo', methods=['GET', 'POST'])
def crear_riesgo():
    form = RiskForm()
    if form.validate_on_submit():
        nuevo_riesgo = Risk(
            nombre=form.nombre.data,
            codigo=form.codigo.data,
            escenario=form.escenario.data,
            probabilidad=form.probabilidad.data,
            impacto=form.impacto.data
        )
        db.session.add(nuevo_riesgo)
        db.session.commit()
        flash('Riesgo creado con éxito', 'success')
        return redirect(url_for('main.index'))
    
    return render_template('crear_riesgo.html', form=form)

# Ruta para valorar un riesgo existente
@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)

    if form.validate_on_submit():
        riesgo.nombre = form.nombre.data
        riesgo.codigo = form.codigo.data
        riesgo.escenario = form.escenario.data
        riesgo.probabilidad = form.probabilidad.data
        riesgo.impacto = form.impacto.data

        db.session.commit()
        flash('Valoración del riesgo actualizada', 'success')
        return redirect(url_for('main.index'))

    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)
```

### 2. **Plantillas HTML**

#### `index.html` - Página principal para listar los riesgos

Este archivo muestra todos los riesgos creados y ofrece la opción de valorarlos o crear uno nuevo.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración de Riesgos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Listado de Riesgos</h1>
    
    <ul>
        {% for riesgo in riesgos %}
        <li>
            <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}">
                {{ riesgo.nombre }} (Código: {{ riesgo.codigo }})
            </a>
        </li>
        {% else %}
        <li>No hay riesgos definidos.</li>
        {% endfor %}
    </ul>

    <a href="{{ url_for('main.crear_riesgo') }}">Crear Nuevo Riesgo</a>
</body>
</html>
```

#### `crear_riesgo.html` - Página para crear un nuevo riesgo

Este archivo contiene el formulario para crear un nuevo riesgo.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crear Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Crear Nuevo Riesgo</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.nombre.label }}: {{ form.nombre }}
        </div>
        <div>
            {{ form.codigo.label }}: {{ form.codigo }}
        </div>
        <div>
            {{ form.escenario.label }}: {{ form.escenario }}
        </div>
        <div>
            {{ form.probabilidad.label }}: {{ form.probabilidad }}
        </div>
        <div>
            {{ form.impacto.label }}: {{ form.impacto }}
        </div>

        <button type="submit">Crear Riesgo</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>
```

#### `valoracion_riesgo.html` - Página para valorar un riesgo existente

Este archivo permite editar la valoración de un riesgo ya creado.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración del Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Valoración del Riesgo: {{ riesgo.nombre }}</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.nombre.label }}: {{ form.nombre }}
        </div>
        <div>
            {{ form.codigo.label }}: {{ form.codigo }}
        </div>
        <div>
            {{ form.escenario.label }}: {{ form.escenario }}
        </div>
        <div>
            {{ form.probabilidad.label }}: {{ form.probabilidad }}
        </div>
        <div>
            {{ form.impacto.label }}: {{ form.impacto }}
        </div>

        <button type="submit">Guardar Valoración</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>
```

### 3. **Formularios (`forms.py`)**

Asegúrate de que tu archivo `forms.py` contenga el formulario para manejar los datos de los riesgos:

```python
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, SelectField
from wtforms.validators import DataRequired

class RiskForm(FlaskForm):
    nombre = StringField('Nombre del Riesgo', validators=[DataRequired()])
    codigo = StringField('Código del Riesgo', validators=[DataRequired()])
    escenario = StringField('Escenario de Valoración', validators=[DataRequired()])
    probabilidad = SelectField('Probabilidad Inherente', 
                               choices=[('1', 'Raro'), ('2', 'Improbable'), ('3', 'Posible'), 
                                        ('4', 'Probable'), ('5', 'Con certeza')],
                               validators=[DataRequired()])
    impacto = SelectField('Impacto Inherente', 
                          choices=[('1', 'Muy Bajo'), ('2', 'Bajo'), ('3', 'Medio'), 
                                   ('4', 'Alto'), ('5', 'Muy Alto')],
                          validators=[DataRequired()])
```

### Resumen de las rutas:

- **Ruta `/`**: Lista todos los riesgos.
- **Ruta `/crear_riesgo`**: Muestra el formulario para crear un nuevo riesgo.
- **Ruta `/riesgo/<int:id>`**: Muestra la valoración de un riesgo ya creado.

### Verifica que las plantillas HTML estén ubicadas en la carpeta **`templates`** dentro de la estructura de la aplicación y que las rutas estén correctamente registradas.

Aquí te dejo las plantillas HTML que faltaban para que la aplicación funcione correctamente.

### `index.html`

Este archivo se usará para mostrar la página principal donde listarás los riesgos creados.

Guárdalo en la carpeta `app/templates/`.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración de Riesgos</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Listado de Riesgos</h1>
    
    <ul>
        {% for riesgo in riesgos %}
        <li>
            <a href="{{ url_for('main.valoracion_riesgo', id=riesgo.id) }}">
                {{ riesgo.nombre }} (Código: {{ riesgo.codigo }})
            </a>
        </li>
        {% else %}
        <li>No hay riesgos definidos.</li>
        {% endfor %}
    </ul>

    <a href="{{ url_for('main.crear_riesgo') }}">Crear Nuevo Riesgo</a>
</body>
</html>
```

Este archivo lista todos los riesgos y permite seleccionar un riesgo para valorarlo. También incluye un enlace para crear un nuevo riesgo.

### `valoracion_riesgo.html`

Este archivo permitirá mostrar la valoración de un riesgo específico. Guárdalo también en la carpeta `app/templates/`.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Valoración del Riesgo</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Valoración del Riesgo: {{ riesgo.nombre }}</h1>

    <form method="POST">
        {{ form.hidden_tag() }}

        <div>
            {{ form.probabilidad.label }}: {{ form.probabilidad }}
        </div>
        <div>
            {{ form.impacto.label }}: {{ form.impacto }}
        </div>

        <h3>Controles</h3>
        <!-- Aquí irían los campos del formulario relacionados a los controles -->

        <h3>Acciones de Tratamiento</h3>
        <!-- Aquí irían los campos del formulario relacionados a las acciones de tratamiento -->

        <button type="submit">Guardar Valoración</button>
    </form>

    <a href="{{ url_for('main.index') }}">Regresar al listado de riesgos</a>
</body>
</html>
```

En este archivo puedes realizar la valoración del riesgo. Aquí se renderizarán los formularios relacionados con la probabilidad, impacto, controles y acciones de tratamiento.

### `styles.css` (opcional)

Si quieres un archivo CSS para mejorar la apariencia básica, puedes crear un archivo llamado `styles.css` en la carpeta `app/static/`:

```css
body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

h1, h3 {
    color: #333;
}

ul {
    list-style-type: none;
    padding: 0;
}

li {
    margin-bottom: 10px;
}

form div {
    margin-bottom: 10px;
}
```

### Verifica la estructura de carpetas:

Tu estructura de carpetas debería verse así:

```
project_folder/
├── app/
│   ├── __init__.py
│   ├── models.py
│   ├── routes.py
│   ├── templates/
│   │   ├── index.html
│   │   ├── valoracion_riesgo.html
│   └── static/
│       └── styles.css  # Si agregas el CSS opcional
├── run.py
```

Con estos archivos ya deberías poder navegar entre la página principal y la valoración de riesgos. Si necesitas más modificaciones, no dudes en decirlo.

El error que mencionas ocurre porque en el archivo **app/routes.py**, donde se definen las rutas, parece que no se ha definido la variable `main`, que debería referirse al blueprint que estamos utilizando para manejar las rutas.

Vamos a corregirlo:

### Solución: Definir y registrar el blueprint

En **app/routes.py**, necesitas definir un blueprint llamado `main` al comienzo del archivo. Un blueprint permite estructurar la aplicación Flask de manera modular.

1. **Define el blueprint en `app/routes.py`:**

```python
from flask import Blueprint

main = Blueprint('main', __name__)

# Importa tus rutas aquí
from . import views  # Asume que las rutas están en views.py o en este archivo
```

2. **Registra el blueprint en `create_app`:**

En tu archivo **app/__init__.py**, necesitas registrar el blueprint en la aplicación. Abre ese archivo y agrégalo de esta manera:

```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///risks.db'
    app.config['SECRET_KEY'] = 'tu_clave_secreta_aqui'

    db.init_app(app)

    # Registro del blueprint
    from .routes import main
    app.register_blueprint(main)

    return app
```

3. **Asegúrate de que las rutas estén en `app/routes.py`:**

Si las rutas que escribimos anteriormente están en el archivo `app/routes.py`, deberían funcionar correctamente, ya que el blueprint `main` está ahora definido y registrado.

Por ejemplo, tu archivo **app/routes.py** debería tener esta estructura:

```python
from flask import render_template, redirect, url_for, flash
from . import db
from .models import Risk
from .forms import RiskForm
from .utils import calcular_puntaje_inherente, calcular_riesgo_residual, obtener_nivel_riesgo
from flask import Blueprint

# Definir el blueprint
main = Blueprint('main', __name__)

@main.route('/')
def index():
    riesgos = Risk.query.all()
    return render_template('index.html', riesgos=riesgos)

@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)
    
    # Código para manejar la valoración del riesgo...

    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)

@main.route('/dashboard')
def dashboard():
    # Código para manejar el dashboard...
    return render_template('dashboard.html')
```

### Pasos siguientes

1. Verifica que la aplicación se ejecuta correctamente.
2. Asegúrate de que tienes todas las rutas y plantillas correctamente conectadas.

Si el error persiste o surge otro, indícalo y con gusto te ayudo a depurarlo.

### Arquitectura de la aplicación de valoración de riesgos

Vamos a construir la aplicación paso a paso. La aplicación será creada usando **Flask** para el backend, **SQLAlchemy** para interactuar con una base de datos **SQLite**, y **Flask-WTF** para los formularios. Además, utilizaremos **Plotly** o **Matplotlib** para los gráficos en el dashboard y **Jinja2** para el manejo de plantillas.

#### Paso 1: Estructura del proyecto

Crea la siguiente estructura de carpetas en **Visual Studio Code**:

```
risk_app/
│
├── app/
│   ├── static/         # Archivos estáticos como CSS, JS
│   ├── templates/      # Archivos HTML (Jinja2 templates)
│   ├── __init__.py     # Inicialización de la aplicación
│   ├── models.py       # Definición de la base de datos
│   ├── forms.py        # Definición de formularios
│   ├── routes.py       # Rutas de la aplicación
│   └── utils.py        # Funciones de utilidades para el cálculo del riesgo
│
├── instance/
│   └── risk_db.sqlite  # Base de datos SQLite
│
├── .env                # Archivo de configuración
├── config.py           # Configuración de Flask
├── run.py              # Ejecuta la aplicación
└── requirements.txt    # Dependencias del proyecto
```

#### Paso 2: Crear un entorno virtual y dependencias

En la terminal de **Visual Studio Code**, crea un entorno virtual y activa el entorno:

```bash
python -m venv venv
source venv/bin/activate  # En Windows sería venv\Scripts\activate
```

Instala las dependencias:

```bash
pip install flask flask-sqlalchemy flask-wtf plotly matplotlib
```

Guarda las dependencias en el archivo `requirements.txt`:

```bash
pip freeze > requirements.txt
```

#### Paso 3: Configuración de Flask

En el archivo **config.py**, define la configuración básica de Flask y SQLAlchemy:

```python
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'supersecretkey'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///instance/risk_db.sqlite'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
```

#### Paso 4: Inicialización de la aplicación

En el archivo **app/__init__.py**, inicializa la aplicación y SQLAlchemy:

```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import CSRFProtect
from config import Config

db = SQLAlchemy()
csrf = CSRFProtect()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    csrf.init_app(app)

    from .routes import main
    app.register_blueprint(main)

    return app
```

#### Paso 5: Modelo de base de datos

En **app/models.py**, define los modelos de base de datos para almacenar riesgos, controles y acciones de tratamiento:

```python
from . import db

class Risk(db.Model):
    __tablename__ = 'risks'
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(20), nullable=False)
    nombre = db.Column(db.String(100), nullable=False)
    escenario = db.Column(db.String(255), nullable=False)
    probabilidad_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    impacto_inherente = db.Column(db.Integer, nullable=False)  # 1-5
    
    # Relación con controles y acciones
    controles = db.relationship('Control', backref='riesgo', lazy=True)
    acciones_tratamiento = db.relationship('AccionTratamiento', backref='riesgo', lazy=True)

class Control(db.Model):
    __tablename__ = 'controles'
    id = db.Column(db.Integer, primary_key=True)
    tipo = db.Column(db.String(50), nullable=False)  # preventivo, detectivo, correctivo
    clase = db.Column(db.String(50), nullable=False)  # manual, manual TI, automatico
    efectividad = db.Column(db.Integer, nullable=False)  # 0 = inefectivo, 70 = efectivo
    cubrimiento_causa = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    cubrimiento_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 10, 15
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)

class AccionTratamiento(db.Model):
    __tablename__ = 'acciones_tratamiento'
    id = db.Column(db.Integer, primary_key=True)
    categoria = db.Column(db.String(100), nullable=False)
    puntos_causa = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    puntos_consecuencia = db.Column(db.Integer, nullable=False)  # 0, 50, 100
    riesgo_id = db.Column(db.Integer, db.ForeignKey('risks.id'), nullable=False)
```

#### Paso 6: Formularios con Flask-WTF

En **app/forms.py**, crea los formularios para la creación de riesgos, controles y acciones de tratamiento:

```python
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, SelectField, SubmitField
from wtforms.validators import DataRequired

class RiskForm(FlaskForm):
    codigo = StringField('Código del Riesgo', validators=[DataRequired()])
    nombre = StringField('Nombre del Riesgo', validators=[DataRequired()])
    escenario = StringField('Escenario de Valoración', validators=[DataRequired()])
    probabilidad_inherente = SelectField('Probabilidad Inherente', choices=[(1, 'Raro'), (2, 'Improbable'), (3, 'Posible'), (4, 'Probable'), (5, 'Con Certeza')], coerce=int)
    impacto_inherente = IntegerField('Impacto Inherente', validators=[DataRequired()])
    submit = SubmitField('Guardar')

class ControlForm(FlaskForm):
    tipo = SelectField('Tipo de Control', choices=[('preventivo', 'Preventivo'), ('detectivo', 'Detectivo'), ('correctivo', 'Correctivo')])
    clase = SelectField('Clase de Control', choices=[('manual', 'Manual'), ('manual TI', 'Manual TI'), ('automatico', 'Automático')])
    efectividad = SelectField('Efectividad', choices=[(0, 'Inefectivo'), (70, 'Efectivo')], coerce=int)
    cubrimiento_causa = SelectField('Cubrimiento de Causa', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    cubrimiento_consecuencia = SelectField('Cubrimiento de Consecuencia', choices=[(0, 'Ninguna'), (10, 'Parcial'), (15, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')

class AccionTratamientoForm(FlaskForm):
    categoria = StringField('Categoría de la Acción', validators=[DataRequired()])
    puntos_causa = SelectField('Puntos por Causa', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    puntos_consecuencia = SelectField('Puntos por Consecuencia', choices=[(0, 'Ninguna'), (50, 'Parcial'), (100, 'Completa')], coerce=int)
    submit = SubmitField('Guardar')
```

#### Paso 7: Rutas principales

En **app/routes.py**, define las rutas para visualizar, crear y actualizar los riesgos:

```python
from flask import render_template, redirect, url_for, flash
from . import db
from .models import Risk, Control, AccionTratamiento
from .forms import RiskForm, ControlForm, AccionTratamientoForm

@main.route('/')
def index():
    riesgos = Risk.query.all()
    return render_template('index.html', riesgos=riesgos)

@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)
    if form.validate_on_submit():
        form.populate_obj(riesgo)
        db.session.commit()
        flash('Riesgo actualizado', 'success')
        return redirect(url_for('main.index'))
    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)
```

### Continuaré explicando la lógica de cálculos, gráficos y control de versiones en los siguientes pasos.

### Paso 8: Implementación de la lógica para cálculos de riesgos

En el archivo **app/utils.py**, implementaremos las funciones necesarias para los cálculos de riesgos inherentes y residuales. Estas funciones calcularán la puntuación máxima de probabilidad e impacto, así como la mitigación por controles y acciones de tratamiento.

```python
def calcular_puntaje_inherente(probabilidad_inherente, impacto_inherente):
    """
    Calcula la puntuación inherente del riesgo combinando probabilidad e impacto.
    Se asume que el impacto es la puntuación máxima de las categorías de impacto.
    """
    return probabilidad_inherente * impacto_inherente

def calcular_reduccion_por_controles(controles):
    """
    Calcula la reducción de riesgo basada en los controles asociados al riesgo.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    for control in controles:
        puntos_causa = control.clase_control_puntos() + control.efectividad + control.cubrimiento_causa
        puntos_consecuencia = control.clase_control_puntos() + control.efectividad + control.cubrimiento_consecuencia
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(controles), puntos_consecuencia_total / len(controles))

def calcular_reduccion_por_acciones(acciones):
    """
    Calcula la reducción de riesgo basada en las acciones de tratamiento.
    """
    puntos_causa_total = 0
    puntos_consecuencia_total = 0
    for accion in acciones:
        puntos_causa = (accion.puntos_causa + accion.clase_accion_puntos()) / 2
        puntos_consecuencia = (accion.puntos_consecuencia + accion.clase_accion_puntos()) / 2
        puntos_causa_total += puntos_causa
        puntos_consecuencia_total += puntos_consecuencia
    return (puntos_causa_total / len(acciones), puntos_consecuencia_total / len(acciones))

def calcular_riesgo_residual(riesgo, controles, acciones):
    """
    Calcula el riesgo residual después de aplicar controles y acciones de tratamiento.
    El resultado se obtiene ponderando el 30% por controles y el 70% por acciones de tratamiento.
    """
    # Calcular reducciones por controles y acciones
    reduccion_controles = calcular_reduccion_por_controles(controles)
    reduccion_acciones = calcular_reduccion_por_acciones(acciones)

    # Ponderación de la reducción
    causa_residual = (reduccion_controles[0] * 0.30) + (reduccion_acciones[0] * 0.70)
    consecuencia_residual = (reduccion_controles[1] * 0.30) + (reduccion_acciones[1] * 0.70)

    return causa_residual, consecuencia_residual

def obtener_nivel_riesgo(puntaje):
    """
    Asigna el nivel de riesgo con base en el puntaje.
    """
    if puntaje <= 1:
        return 'Muy Bajo'
    elif puntaje <= 2:
        return 'Bajo'
    elif puntaje <= 3:
        return 'Medio'
    elif puntaje <= 4:
        return 'Alto'
    else:
        return 'Muy Alto'
```

Estas funciones son críticas para los cálculos, incluyendo la evaluación de riesgos inherentes y el cálculo de los riesgos residuales después de aplicar los controles y acciones de tratamiento.

### Paso 9: Actualización de las vistas y rutas para cálculos dinámicos

En **app/routes.py**, actualizaremos la lógica para integrar los cálculos de riesgo inherente y residual al realizar las valoraciones:

```python
from flask import render_template, redirect, url_for, flash, request
from . import db
from .models import Risk, Control, AccionTratamiento
from .forms import RiskForm, ControlForm, AccionTratamientoForm
from .utils import calcular_puntaje_inherente, calcular_riesgo_residual, obtener_nivel_riesgo

@main.route('/riesgo/<int:id>', methods=['GET', 'POST'])
def valoracion_riesgo(id):
    riesgo = Risk.query.get_or_404(id)
    form = RiskForm(obj=riesgo)

    if form.validate_on_submit():
        form.populate_obj(riesgo)
        db.session.commit()
        flash('Riesgo actualizado', 'success')

        # Calcular riesgo inherente
        puntaje_inherente = calcular_puntaje_inherente(
            riesgo.probabilidad_inherente, 
            riesgo.impacto_inherente
        )

        # Obtener controles y acciones asociadas
        controles = Control.query.filter_by(riesgo_id=riesgo.id).all()
        acciones = AccionTratamiento.query.filter_by(riesgo_id=riesgo.id).all()

        # Calcular riesgo residual
        causa_residual, consecuencia_residual = calcular_riesgo_residual(riesgo, controles, acciones)

        # Evaluar el nuevo nivel de riesgo inherente y residual
        nivel_inherente = obtener_nivel_riesgo(puntaje_inherente)
        nivel_residual = obtener_nivel_riesgo(causa_residual + consecuencia_residual)

        return render_template('resultados_riesgo.html', 
                               riesgo=riesgo, 
                               puntaje_inherente=puntaje_inherente, 
                               causa_residual=causa_residual, 
                               consecuencia_residual=consecuencia_residual,
                               nivel_inherente=nivel_inherente, 
                               nivel_residual=nivel_residual)
    
    return render_template('valoracion_riesgo.html', form=form, riesgo=riesgo)
```

### Paso 10: Dashboard con gráficos dinámicos

Para la visualización dinámica, utilizaremos **Plotly** para generar gráficos interactivos de los niveles de riesgo.

En **app/routes.py**, agrega una nueva ruta para mostrar el dashboard:

```python
import plotly.graph_objs as go
from flask import jsonify

@main.route('/dashboard')
def dashboard():
    riesgos = Risk.query.all()
    
    # Datos para el gráfico
    nombres_riesgos = [riesgo.nombre for riesgo in riesgos]
    niveles_inherentes = [calcular_puntaje_inherente(r.probabilidad_inherente, r.impacto_inherente) for r in riesgos]
    
    # Ejemplo de nivel residual (esto sería calculado dinámicamente)
    niveles_residuales = [r.impacto_inherente - 1 for r in riesgos]  # Simplificado para el ejemplo

    # Gráfico
    fig = go.Figure()
    fig.add_trace(go.Bar(x=nombres_riesgos, y=niveles_inherentes, name='Riesgo Inherente', marker_color='red'))
    fig.add_trace(go.Bar(x=nombres_riesgos, y=niveles_residuales, name='Riesgo Residual', marker_color='green'))

    fig.update_layout(title='Riesgo Inherente vs Residual', barmode='group')

    return render_template('dashboard.html', graph_json=fig.to_json())
```

Y en el template **dashboard.html**, renderiza el gráfico:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Riesgos</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>Dashboard de Riesgos</h1>
    <div id="grafico"></div>

    <script>
        var graph_data = {{ graph_json | safe }};
        Plotly.newPlot('grafico', graph_data.data, graph_data.layout);
    </script>
</body>
</html>
```

### Paso 11: Implementar comparaciones dinámicas

Para permitir cambios en tiempo real, puedes utilizar **AJAX** o **WebSockets** para actualizar los valores y comparaciones en el dashboard sin necesidad de recargar toda la página. Esto se puede integrar más adelante si es necesario.

### Paso 12: Ejecutar la aplicación

En **run.py**, inicializa y corre la aplicación:

```python
from app import create_app, db

app = create_app()

if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # Crea las tablas en la base de datos si no existen
    app.run(debug=True)
```

Con estos pasos, tu aplicación estará lista para gestionar la valoración de riesgos de manera dinámica y permitir comparaciones de riesgos inherentes y residuales con gráficas en tiempo real. 

¿Te gustaría profundizar en alguna funcionalidad en particular o en la integración de más gráficos y funcionalidades en tiempo real?
crear una aplicación en python, usando flask, para valoración de riesgos. Actualmente se hace en excel, el proceso actual hace lo siguiente:
1. Hay una hoja llamada valoracion en la que se define el riesgo (para cada riesgo se crea una hoja individual) en esta hoja se indica el codigo del riesgo, el nombre del riesgo, el escenario de valoracion (es decir el suceso que materializa el riesgo)
2. En esta valoracion se describe la probabilidad inherente (raro, improbable, possible, probable, con certeza) la cual está asociada a un valor de 1 a 5
3. se define el impacto inherente (un valor de 1 a 5 para cada una de cinco categorias) al final el valor del impacto inherente total es el maximo de estas 5 categorias
4. Se describe en nuevas columnas a partir de la combinacion de probabilidad e impacto una puntuación para cada categoria, que se obtiene de otra hoja llamada RAM, de las cuales se obtiene la maxima puntuación y con esto se califica el riesgo total inherente (muy bajo, Bajo, Medio, Alto o Muy Alto)
5. En la hoja valoración se agregan los controles especificos para la mitigación de este riesgo, este control puede ser: preventivo, detectivo o correctivo.
6. el control debe mitigar alguna o todas las categorias de impacto.
7. Tambien se define la clase de control (manual, manual TI, automatico) cada uno de estos da una puntuacion (5,10,15 respectivamente)
8. Se establece si el control es inefectivo o efectivo, si es inefectivo obtiene una puntuacion de 0 y si es efectivo la puntuacion es 70
9. Se establece para el control el nivel de cubrimiento para la causa y la consecuencia, que puede ser: ninguna=0 puntos, parcial=10 puntos o completa = 15 puntos
10. Se obtiene un total de puntos por causa que es la suma de los puntos por clase de control + puntos por efectividad control + puntos por cubrimiento de causa
11. Se obtiene un total de puntos por consecuencia que es la suma de los puntos por clase de control + puntos por efectividad control + puntos por cubrimiento de consecuencia
12. esto se hace para cada uno de los controles asociados al riesgo
13. se promedia los puntos por causa y se promedia los puntos por consecuencia, el total está ponderado por el 30% que es la asignación de mitigantes por controles
14. el otro 70% está asociado a acciones de tratamiento asociados a planes que mitigan las consecuancias del riesgo
15. las acciones de tratamiento estan clasificadas por categoria, tambien descritas en una hoja del documento llamada AT cada una de estas tiene una puntuación.
16. las acciones de tratamiento tienen puntos por cubrimiento de causa y por cubrimiento de la consecuencia que puede ser: ninguna=0 puntos, parcial=50 puntos o completa = 100 puntos
17. Se calcula el total de puntos por causa como el promedio entre los puntos dados por el tipo o clase de acción de tratamiento y los puntos por cubrimiento de causa
18. Se calcula el total de puntos por consecuencia como el promedio entre los puntos dados por el tipo o clase de acción de tratamiento y los puntos por cubrimiento de consecuencia.
19. esto se hace para cada una de las acciones de tratamiento asociados al riesgo
20. se promedia los puntos por causa y se promedia los puntos por consecuencia de las acciones de tratamiento, el total está ponderado por el 70% que es la asignación de mitigantes por acciones de tratamiento
21. finalmente se obtiene un gran total por causa que es la suma de la ponderación de causa de controles y de la acciones de tratamiento y un gran total por consecuencia que es la suma de la ponderación de consecuencia de controles y de la acciones de tratamiento
22. Con estos valores se calcula la reduccion del riesgo, si las anteriores sumas estan entre 0 y 60 se le asigna 0, si es entre 60 y 80 se le asigna 1 y si es mayor a 80 se le asigna 2, tanto para causa=probabilidad y consecuencia=impacto
23. se calcula la probabilidad residual como la diferencia entre el valor obtenido anteriormente de causa(probabilidad) y el valor de la probabilidad inherente descrita en el numeral 2.
24. se calcula el impacto residual como la diferencia entre el valor obtenido del numeral 22 consecuencia(impacto) y el valor del impacto inherente descrita en el numeral 3.
25. con estos dos valores se le asigna un nuevo nivel de riesgo (muy bajo, Bajo, Medio, Alto o Muy Alto) que se obtiene de la misma hoja RAM
26. con estos datos se obtiene un grafico que muestra la variacion del nivel inherente vs el nuevo valor en el nivel residual, consolidado para todos los riesgos.

necesito que me ayudes a crear una aplicacion que me permita hacer los siguiente:
1. una ventana de parametros, en esta se definirá cuantos riesgos hay y con base a esto se creará la valoración de cada riesgo.
2. se debe permitir crear la cantidad de controles y de acciones de tratamiento asociadas al risgos
3. una ventana que me permita hacer la valoración del riesgo seleccionado y que esta se guarde en una base de datos sql (sqllite, sqlAclhemy)
4. dashboard que permitan ver las variaciones visuales de los niveles de riesgo inherente a residual. (estas graficas deben ser dinamicas y en lo posible mostrar la matriz ram)
5. debe permitir realizar cambios en vivo del riesgo para identificar la variacion del riesgo resisual al realizar algun cambio, pero debe mantener el anterior para hacer comparaciones.

crea toda la arquitectura de la aplicación, usando visual studio code, los codigos de python, y todo lo necesario paso a paso, continua la respuesta si llegas a quedarte sin espacio
